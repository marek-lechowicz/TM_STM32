
wprowadzenie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ada8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800af48  0800af48  0001af48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b378  0800b378  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b378  0800b378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b380  0800b380  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b380  0800b380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  200001e0  0800b564  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800b564  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142c5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f56  00000000  00000000  000344d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001180  00000000  00000000  00037428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  000385a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000194a5  00000000  00000000  00039590  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f4f7  00000000  00000000  00052a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094a13  00000000  00000000  00061f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f693f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  000f69bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800af30 	.word	0x0800af30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800af30 	.word	0x0800af30

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]
 8000fae:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fbc:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fbe:	4a3b      	ldr	r2, [pc, #236]	; (80010ac <MX_ADC1_Init+0x114>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fca:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fd0:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fdc:	4b32      	ldr	r3, [pc, #200]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000fec:	4a30      	ldr	r2, [pc, #192]	; (80010b0 <MX_ADC1_Init+0x118>)
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000ff6:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <MX_ADC1_Init+0x110>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <MX_ADC1_Init+0x110>)
 8001006:	2201      	movs	r2, #1
 8001008:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <MX_ADC1_Init+0x110>)
 800100c:	f002 f91e 	bl	800324c <HAL_ADC_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001016:	f000 fe1f 	bl	8001c58 <Error_Handler>
  }
  /** Configure the analog watchdog 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0x11c>)
 800101c:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	4619      	mov	r1, r3
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <MX_ADC1_Init+0x110>)
 8001038:	f002 fcb4 	bl	80039a4 <HAL_ADC_AnalogWDGConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001042:	f000 fe09 	bl	8001c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001046:	2301      	movs	r3, #1
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800104e:	2307      	movs	r3, #7
 8001050:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001052:	463b      	mov	r3, r7
 8001054:	4619      	mov	r1, r3
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_ADC1_Init+0x110>)
 8001058:	f002 fb72 	bl	8003740 <HAL_ADC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8001062:	f000 fdf9 	bl	8001c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_ADC1_Init+0x120>)
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_ADC1_Init+0x110>)
 8001074:	f002 fb64 	bl	8003740 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800107e:	f000 fdeb 	bl	8001c58 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001082:	2311      	movs	r3, #17
 8001084:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001086:	2303      	movs	r3, #3
 8001088:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108a:	463b      	mov	r3, r7
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_ADC1_Init+0x110>)
 8001090:	f002 fb56 	bl	8003740 <HAL_ADC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800109a:	f000 fddd 	bl	8001c58 <Error_Handler>
  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000234 	.word	0x20000234
 80010ac:	40012000 	.word	0x40012000
 80010b0:	0f000001 	.word	0x0f000001
 80010b4:	00800200 	.word	0x00800200
 80010b8:	10000012 	.word	0x10000012

080010bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	; 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_ADC_MspInit+0xec>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d15f      	bne.n	800119e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a31      	ldr	r2, [pc, #196]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 80010e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a2a      	ldr	r2, [pc, #168]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b28      	ldr	r3, [pc, #160]	; (80011ac <HAL_ADC_MspInit+0xf0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = PV_Pin;
 8001116:	2302      	movs	r3, #2
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PV_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4821      	ldr	r0, [pc, #132]	; (80011b0 <HAL_ADC_MspInit+0xf4>)
 800112a:	f003 fac5 	bl	80046b8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_ADC_MspInit+0xfc>)
 8001132:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113a:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001140:	4b1c      	ldr	r3, [pc, #112]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001146:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800114c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800114e:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800115e:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001160:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001164:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001172:	4810      	ldr	r0, [pc, #64]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001174:	f002 ff10 	bl	8003f98 <HAL_DMA_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800117e:	f000 fd6b 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a0b      	ldr	r2, [pc, #44]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 8001186:	639a      	str	r2, [r3, #56]	; 0x38
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_ADC_MspInit+0xf8>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2012      	movs	r0, #18
 8001194:	f002 fec9 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001198:	2012      	movs	r0, #18
 800119a:	f002 fee2 	bl	8003f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40012000 	.word	0x40012000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	2000027c 	.word	0x2000027c
 80011b8:	40026410 	.word	0x40026410
 80011bc:	00000000 	.word	0x00000000

080011c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */

extern uint16_t ADCRes;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  ADCRes = HAL_ADC_GetValue(&hadc1);                    // 0-4095 == 0-3.3V
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <HAL_ADC_ConvCpltCallback+0x68>)
 80011ca:	f002 fa97 	bl	80036fc <HAL_ADC_GetValue>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_ADC_ConvCpltCallback+0x6c>)
 80011d4:	801a      	strh	r2, [r3, #0]
  ADCRes = (uint16_t)(3.3 * (double)ADCRes / 4.095);    // [mV]
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_ADC_ConvCpltCallback+0x6c>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f99a 	bl	8000514 <__aeabi_ui2d>
 80011e0:	a30d      	add	r3, pc, #52	; (adr r3, 8001218 <HAL_ADC_ConvCpltCallback+0x58>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fa0f 	bl	8000608 <__aeabi_dmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	4618      	mov	r0, r3
 80011f0:	4621      	mov	r1, r4
 80011f2:	a30b      	add	r3, pc, #44	; (adr r3, 8001220 <HAL_ADC_ConvCpltCallback+0x60>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fb30 	bl	800085c <__aeabi_ddiv>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	4618      	mov	r0, r3
 8001202:	4621      	mov	r1, r4
 8001204:	f7ff fcd8 	bl	8000bb8 <__aeabi_d2uiz>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_ADC_ConvCpltCallback+0x6c>)
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	66666666 	.word	0x66666666
 800121c:	400a6666 	.word	0x400a6666
 8001220:	ae147ae1 	.word	0xae147ae1
 8001224:	40106147 	.word	0x40106147
 8001228:	20000234 	.word	0x20000234
 800122c:	200002dc 	.word	0x200002dc

08001230 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_DMA_Init+0x78>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_DMA_Init+0x78>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_DMA_Init+0x78>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_DMA_Init+0x78>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_DMA_Init+0x78>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_DMA_Init+0x78>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	2010      	movs	r0, #16
 8001274:	f002 fe59 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001278:	2010      	movs	r0, #16
 800127a:	f002 fe72 	bl	8003f62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2011      	movs	r0, #17
 8001284:	f002 fe51 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001288:	2011      	movs	r0, #17
 800128a:	f002 fe6a 	bl	8003f62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2038      	movs	r0, #56	; 0x38
 8001294:	f002 fe49 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001298:	2038      	movs	r0, #56	; 0x38
 800129a:	f002 fe62 	bl	8003f62 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <get_color>:
*      Author: student
*/
#include "gpio.h"
#include "functions.h"

void get_color(double temperature) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b0ac      	sub	sp, #176	; 0xb0
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	ed87 0b00 	vstr	d0, [r7]
	// wejście LED1
	GPIO_InitTypeDef Led1_in;
	Led1_in.Pin = LED1_Pin;
 80012b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	Led1_in.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	Led1_in.Mode = GPIO_MODE_INPUT;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	// wyjście dla LED1
	GPIO_InitTypeDef Led1_out;
	Led1_out.Pin = LED1_Pin;
 80012ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	Led1_out.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	Led1_out.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	// wejście LED2
	GPIO_InitTypeDef Led2_in;
	Led2_in.Pin = LED2_Pin;
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	673b      	str	r3, [r7, #112]	; 0x70
	Led2_in.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	67bb      	str	r3, [r7, #120]	; 0x78
	Led2_in.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	677b      	str	r3, [r7, #116]	; 0x74

	// wyjście dla LED2
	GPIO_InitTypeDef Led2_out;
	Led2_out.Pin = LED2_Pin;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	65fb      	str	r3, [r7, #92]	; 0x5c
	Led2_out.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	667b      	str	r3, [r7, #100]	; 0x64
	Led2_out.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	663b      	str	r3, [r7, #96]	; 0x60

	// wejście LED3
	GPIO_InitTypeDef Led3_in;
	Led3_in.Pin = LED3_Pin;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	64bb      	str	r3, [r7, #72]	; 0x48
	Led3_in.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	653b      	str	r3, [r7, #80]	; 0x50
	Led3_in.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c

	// wyjście dla LED3
	GPIO_InitTypeDef Led3_out;
	Led3_out.Pin = LED3_Pin;
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
	Led3_out.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	63fb      	str	r3, [r7, #60]	; 0x3c
	Led3_out.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	2301      	movs	r3, #1
 8001310:	63bb      	str	r3, [r7, #56]	; 0x38

	// wejście LED4
	GPIO_InitTypeDef Led4_in;
	Led4_in.Pin = LED4_Pin;
 8001312:	2340      	movs	r3, #64	; 0x40
 8001314:	623b      	str	r3, [r7, #32]
	Led4_in.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
	Led4_in.Mode = GPIO_MODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24

	// wyjście dla LED4
	GPIO_InitTypeDef Led4_out;
	Led4_out.Pin = LED4_Pin;
 800131e:	2340      	movs	r3, #64	; 0x40
 8001320:	60fb      	str	r3, [r7, #12]
	Led4_out.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
	Led4_out.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]

	char color;
	if (temperature < 18) {
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b96      	ldr	r3, [pc, #600]	; (8001588 <get_color+0x2dc>)
 8001330:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001334:	f7ff fbda 	bl	8000aec <__aeabi_dcmplt>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <get_color+0x9a>
		color = 'W';
 800133e:	2357      	movs	r3, #87	; 0x57
 8001340:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001344:	e044      	b.n	80013d0 <get_color+0x124>
	}
	else if (temperature < 20) {
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b90      	ldr	r3, [pc, #576]	; (800158c <get_color+0x2e0>)
 800134c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001350:	f7ff fbcc 	bl	8000aec <__aeabi_dcmplt>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <get_color+0xb6>
		color = 'A';
 800135a:	2341      	movs	r3, #65	; 0x41
 800135c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001360:	e036      	b.n	80013d0 <get_color+0x124>
	}
	else if (temperature < 22) {
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b8a      	ldr	r3, [pc, #552]	; (8001590 <get_color+0x2e4>)
 8001368:	e9d7 0100 	ldrd	r0, r1, [r7]
 800136c:	f7ff fbbe 	bl	8000aec <__aeabi_dcmplt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <get_color+0xd2>
		color = 'B';
 8001376:	2342      	movs	r3, #66	; 0x42
 8001378:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800137c:	e028      	b.n	80013d0 <get_color+0x124>
	}
	else if (temperature < 24) {
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b84      	ldr	r3, [pc, #528]	; (8001594 <get_color+0x2e8>)
 8001384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001388:	f7ff fbb0 	bl	8000aec <__aeabi_dcmplt>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <get_color+0xee>
		color = 'G';
 8001392:	2347      	movs	r3, #71	; 0x47
 8001394:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001398:	e01a      	b.n	80013d0 <get_color+0x124>
	}
	else if (temperature < 26) {
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <get_color+0x2ec>)
 80013a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013a4:	f7ff fba2 	bl	8000aec <__aeabi_dcmplt>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <get_color+0x10a>
		color = 'Y';
 80013ae:	2359      	movs	r3, #89	; 0x59
 80013b0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80013b4:	e00c      	b.n	80013d0 <get_color+0x124>
	}
	else if (temperature > 26) {
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	4b77      	ldr	r3, [pc, #476]	; (8001598 <get_color+0x2ec>)
 80013bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013c0:	f7ff fbb2 	bl	8000b28 <__aeabi_dcmpgt>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <get_color+0x124>
		color = 'R';
 80013ca:	2352      	movs	r3, #82	; 0x52
 80013cc:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
	}
	switch (color) {
 80013d0:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80013d4:	3b41      	subs	r3, #65	; 0x41
 80013d6:	2b18      	cmp	r3, #24
 80013d8:	f200 80cc 	bhi.w	8001574 <get_color+0x2c8>
 80013dc:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <get_color+0x138>)
 80013de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e2:	bf00      	nop
 80013e4:	0800147b 	.word	0x0800147b
 80013e8:	080014ad 	.word	0x080014ad
 80013ec:	08001575 	.word	0x08001575
 80013f0:	08001575 	.word	0x08001575
 80013f4:	08001575 	.word	0x08001575
 80013f8:	08001575 	.word	0x08001575
 80013fc:	080014df 	.word	0x080014df
 8001400:	08001575 	.word	0x08001575
 8001404:	08001575 	.word	0x08001575
 8001408:	08001575 	.word	0x08001575
 800140c:	08001575 	.word	0x08001575
 8001410:	08001575 	.word	0x08001575
 8001414:	08001575 	.word	0x08001575
 8001418:	08001575 	.word	0x08001575
 800141c:	08001575 	.word	0x08001575
 8001420:	08001575 	.word	0x08001575
 8001424:	08001575 	.word	0x08001575
 8001428:	08001543 	.word	0x08001543
 800142c:	08001575 	.word	0x08001575
 8001430:	08001575 	.word	0x08001575
 8001434:	08001575 	.word	0x08001575
 8001438:	08001575 	.word	0x08001575
 800143c:	08001449 	.word	0x08001449
 8001440:	08001575 	.word	0x08001575
 8001444:	08001511 	.word	0x08001511
		case 'W':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 8001448:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800144c:	4619      	mov	r1, r3
 800144e:	4853      	ldr	r0, [pc, #332]	; (800159c <get_color+0x2f0>)
 8001450:	f003 f932 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_out);	// B
 8001454:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001458:	4619      	mov	r1, r3
 800145a:	4850      	ldr	r0, [pc, #320]	; (800159c <get_color+0x2f0>)
 800145c:	f003 f92c 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_out);	// G
 8001460:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001464:	4619      	mov	r1, r3
 8001466:	484d      	ldr	r0, [pc, #308]	; (800159c <get_color+0x2f0>)
 8001468:	f003 f926 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_out);   // R
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	484a      	ldr	r0, [pc, #296]	; (800159c <get_color+0x2f0>)
 8001474:	f003 f920 	bl	80046b8 <HAL_GPIO_Init>
			break;
 8001478:	e07c      	b.n	8001574 <get_color+0x2c8>
		case 'A':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 800147a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800147e:	4619      	mov	r1, r3
 8001480:	4846      	ldr	r0, [pc, #280]	; (800159c <get_color+0x2f0>)
 8001482:	f003 f919 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_out);	// B
 8001486:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800148a:	4619      	mov	r1, r3
 800148c:	4843      	ldr	r0, [pc, #268]	; (800159c <get_color+0x2f0>)
 800148e:	f003 f913 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_out);	// G
 8001492:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001496:	4619      	mov	r1, r3
 8001498:	4840      	ldr	r0, [pc, #256]	; (800159c <get_color+0x2f0>)
 800149a:	f003 f90d 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_in);   // R
 800149e:	f107 0320 	add.w	r3, r7, #32
 80014a2:	4619      	mov	r1, r3
 80014a4:	483d      	ldr	r0, [pc, #244]	; (800159c <get_color+0x2f0>)
 80014a6:	f003 f907 	bl	80046b8 <HAL_GPIO_Init>
			break;
 80014aa:	e063      	b.n	8001574 <get_color+0x2c8>
		case 'B':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 80014ac:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014b0:	4619      	mov	r1, r3
 80014b2:	483a      	ldr	r0, [pc, #232]	; (800159c <get_color+0x2f0>)
 80014b4:	f003 f900 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_out);	// B
 80014b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014bc:	4619      	mov	r1, r3
 80014be:	4837      	ldr	r0, [pc, #220]	; (800159c <get_color+0x2f0>)
 80014c0:	f003 f8fa 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_in);	// G
 80014c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014c8:	4619      	mov	r1, r3
 80014ca:	4834      	ldr	r0, [pc, #208]	; (800159c <get_color+0x2f0>)
 80014cc:	f003 f8f4 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_in);   // R
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4619      	mov	r1, r3
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <get_color+0x2f0>)
 80014d8:	f003 f8ee 	bl	80046b8 <HAL_GPIO_Init>
			break;
 80014dc:	e04a      	b.n	8001574 <get_color+0x2c8>
		case 'G':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 80014de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014e2:	4619      	mov	r1, r3
 80014e4:	482d      	ldr	r0, [pc, #180]	; (800159c <get_color+0x2f0>)
 80014e6:	f003 f8e7 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_in);	// B
 80014ea:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014ee:	4619      	mov	r1, r3
 80014f0:	482a      	ldr	r0, [pc, #168]	; (800159c <get_color+0x2f0>)
 80014f2:	f003 f8e1 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_out);	// G
 80014f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014fa:	4619      	mov	r1, r3
 80014fc:	4827      	ldr	r0, [pc, #156]	; (800159c <get_color+0x2f0>)
 80014fe:	f003 f8db 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_in);   // R
 8001502:	f107 0320 	add.w	r3, r7, #32
 8001506:	4619      	mov	r1, r3
 8001508:	4824      	ldr	r0, [pc, #144]	; (800159c <get_color+0x2f0>)
 800150a:	f003 f8d5 	bl	80046b8 <HAL_GPIO_Init>
			break;
 800150e:	e031      	b.n	8001574 <get_color+0x2c8>
		case 'Y':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 8001510:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001514:	4619      	mov	r1, r3
 8001516:	4821      	ldr	r0, [pc, #132]	; (800159c <get_color+0x2f0>)
 8001518:	f003 f8ce 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_in);	// B
 800151c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001520:	4619      	mov	r1, r3
 8001522:	481e      	ldr	r0, [pc, #120]	; (800159c <get_color+0x2f0>)
 8001524:	f003 f8c8 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_out);	// G
 8001528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800152c:	4619      	mov	r1, r3
 800152e:	481b      	ldr	r0, [pc, #108]	; (800159c <get_color+0x2f0>)
 8001530:	f003 f8c2 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_out);   // R
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	4619      	mov	r1, r3
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <get_color+0x2f0>)
 800153c:	f003 f8bc 	bl	80046b8 <HAL_GPIO_Init>
			break;
 8001540:	e018      	b.n	8001574 <get_color+0x2c8>
		case 'R':
			HAL_GPIO_Init(LED1_GPIO_Port, &Led1_out);
 8001542:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001546:	4619      	mov	r1, r3
 8001548:	4814      	ldr	r0, [pc, #80]	; (800159c <get_color+0x2f0>)
 800154a:	f003 f8b5 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED2_GPIO_Port, &Led2_in);	// B
 800154e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001552:	4619      	mov	r1, r3
 8001554:	4811      	ldr	r0, [pc, #68]	; (800159c <get_color+0x2f0>)
 8001556:	f003 f8af 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED3_GPIO_Port, &Led3_in);	// G
 800155a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800155e:	4619      	mov	r1, r3
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <get_color+0x2f0>)
 8001562:	f003 f8a9 	bl	80046b8 <HAL_GPIO_Init>
			HAL_GPIO_Init(LED4_GPIO_Port, &Led4_out);   // R
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <get_color+0x2f0>)
 800156e:	f003 f8a3 	bl	80046b8 <HAL_GPIO_Init>
			break;
 8001572:	bf00      	nop
	}
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157a:	4808      	ldr	r0, [pc, #32]	; (800159c <get_color+0x2f0>)
 800157c:	f003 fa36 	bl	80049ec <HAL_GPIO_WritePin>
}
 8001580:	bf00      	nop
 8001582:	37b0      	adds	r7, #176	; 0xb0
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40320000 	.word	0x40320000
 800158c:	40340000 	.word	0x40340000
 8001590:	40360000 	.word	0x40360000
 8001594:	40380000 	.word	0x40380000
 8001598:	403a0000 	.word	0x403a0000
 800159c:	40020400 	.word	0x40020400

080015a0 <digit>:

void digit(int digit) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  switch (digit) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b09      	cmp	r3, #9
 80015ac:	f200 8180 	bhi.w	80018b0 <digit+0x310>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <digit+0x18>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015e1 	.word	0x080015e1
 80015bc:	08001629 	.word	0x08001629
 80015c0:	08001671 	.word	0x08001671
 80015c4:	080016b9 	.word	0x080016b9
 80015c8:	08001701 	.word	0x08001701
 80015cc:	08001749 	.word	0x08001749
 80015d0:	08001791 	.word	0x08001791
 80015d4:	080017d9 	.word	0x080017d9
 80015d8:	08001821 	.word	0x08001821
 80015dc:	08001869 	.word	0x08001869
	  case 0:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	48b4      	ldr	r0, [pc, #720]	; (80018b8 <digit+0x318>)
 80015e6:	f003 fa01 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2110      	movs	r1, #16
 80015ee:	48b2      	ldr	r0, [pc, #712]	; (80018b8 <digit+0x318>)
 80015f0:	f003 f9fc 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2108      	movs	r1, #8
 80015f8:	48af      	ldr	r0, [pc, #700]	; (80018b8 <digit+0x318>)
 80015fa:	f003 f9f7 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2102      	movs	r1, #2
 8001602:	48ad      	ldr	r0, [pc, #692]	; (80018b8 <digit+0x318>)
 8001604:	f003 f9f2 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	2104      	movs	r1, #4
 800160c:	48aa      	ldr	r0, [pc, #680]	; (80018b8 <digit+0x318>)
 800160e:	f003 f9ed 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8001612:	2201      	movs	r2, #1
 8001614:	2120      	movs	r1, #32
 8001616:	48a8      	ldr	r0, [pc, #672]	; (80018b8 <digit+0x318>)
 8001618:	f003 f9e8 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	2101      	movs	r1, #1
 8001620:	48a5      	ldr	r0, [pc, #660]	; (80018b8 <digit+0x318>)
 8001622:	f003 f9e3 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 8001626:	e143      	b.n	80018b0 <digit+0x310>

	  case 1:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2140      	movs	r1, #64	; 0x40
 800162c:	48a2      	ldr	r0, [pc, #648]	; (80018b8 <digit+0x318>)
 800162e:	f003 f9dd 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2110      	movs	r1, #16
 8001636:	48a0      	ldr	r0, [pc, #640]	; (80018b8 <digit+0x318>)
 8001638:	f003 f9d8 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2108      	movs	r1, #8
 8001640:	489d      	ldr	r0, [pc, #628]	; (80018b8 <digit+0x318>)
 8001642:	f003 f9d3 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2102      	movs	r1, #2
 800164a:	489b      	ldr	r0, [pc, #620]	; (80018b8 <digit+0x318>)
 800164c:	f003 f9ce 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	2104      	movs	r1, #4
 8001654:	4898      	ldr	r0, [pc, #608]	; (80018b8 <digit+0x318>)
 8001656:	f003 f9c9 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	4896      	ldr	r0, [pc, #600]	; (80018b8 <digit+0x318>)
 8001660:	f003 f9c4 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2101      	movs	r1, #1
 8001668:	4893      	ldr	r0, [pc, #588]	; (80018b8 <digit+0x318>)
 800166a:	f003 f9bf 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 800166e:	e11f      	b.n	80018b0 <digit+0x310>

	  case 2:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	4890      	ldr	r0, [pc, #576]	; (80018b8 <digit+0x318>)
 8001676:	f003 f9b9 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 800167a:	2201      	movs	r2, #1
 800167c:	2110      	movs	r1, #16
 800167e:	488e      	ldr	r0, [pc, #568]	; (80018b8 <digit+0x318>)
 8001680:	f003 f9b4 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2108      	movs	r1, #8
 8001688:	488b      	ldr	r0, [pc, #556]	; (80018b8 <digit+0x318>)
 800168a:	f003 f9af 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 800168e:	2201      	movs	r2, #1
 8001690:	2102      	movs	r1, #2
 8001692:	4889      	ldr	r0, [pc, #548]	; (80018b8 <digit+0x318>)
 8001694:	f003 f9aa 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2104      	movs	r1, #4
 800169c:	4886      	ldr	r0, [pc, #536]	; (80018b8 <digit+0x318>)
 800169e:	f003 f9a5 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2120      	movs	r1, #32
 80016a6:	4884      	ldr	r0, [pc, #528]	; (80018b8 <digit+0x318>)
 80016a8:	f003 f9a0 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2101      	movs	r1, #1
 80016b0:	4881      	ldr	r0, [pc, #516]	; (80018b8 <digit+0x318>)
 80016b2:	f003 f99b 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 80016b6:	e0fb      	b.n	80018b0 <digit+0x310>

	  case 3:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2140      	movs	r1, #64	; 0x40
 80016bc:	487e      	ldr	r0, [pc, #504]	; (80018b8 <digit+0x318>)
 80016be:	f003 f995 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80016c2:	2201      	movs	r2, #1
 80016c4:	2110      	movs	r1, #16
 80016c6:	487c      	ldr	r0, [pc, #496]	; (80018b8 <digit+0x318>)
 80016c8:	f003 f990 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2108      	movs	r1, #8
 80016d0:	4879      	ldr	r0, [pc, #484]	; (80018b8 <digit+0x318>)
 80016d2:	f003 f98b 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	2102      	movs	r1, #2
 80016da:	4877      	ldr	r0, [pc, #476]	; (80018b8 <digit+0x318>)
 80016dc:	f003 f986 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2104      	movs	r1, #4
 80016e4:	4874      	ldr	r0, [pc, #464]	; (80018b8 <digit+0x318>)
 80016e6:	f003 f981 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	4872      	ldr	r0, [pc, #456]	; (80018b8 <digit+0x318>)
 80016f0:	f003 f97c 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	2101      	movs	r1, #1
 80016f8:	486f      	ldr	r0, [pc, #444]	; (80018b8 <digit+0x318>)
 80016fa:	f003 f977 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 80016fe:	e0d7      	b.n	80018b0 <digit+0x310>

	  case 4:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	2140      	movs	r1, #64	; 0x40
 8001704:	486c      	ldr	r0, [pc, #432]	; (80018b8 <digit+0x318>)
 8001706:	f003 f971 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2110      	movs	r1, #16
 800170e:	486a      	ldr	r0, [pc, #424]	; (80018b8 <digit+0x318>)
 8001710:	f003 f96c 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8001714:	2201      	movs	r2, #1
 8001716:	2108      	movs	r1, #8
 8001718:	4867      	ldr	r0, [pc, #412]	; (80018b8 <digit+0x318>)
 800171a:	f003 f967 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2102      	movs	r1, #2
 8001722:	4865      	ldr	r0, [pc, #404]	; (80018b8 <digit+0x318>)
 8001724:	f003 f962 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2104      	movs	r1, #4
 800172c:	4862      	ldr	r0, [pc, #392]	; (80018b8 <digit+0x318>)
 800172e:	f003 f95d 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2120      	movs	r1, #32
 8001736:	4860      	ldr	r0, [pc, #384]	; (80018b8 <digit+0x318>)
 8001738:	f003 f958 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2101      	movs	r1, #1
 8001740:	485d      	ldr	r0, [pc, #372]	; (80018b8 <digit+0x318>)
 8001742:	f003 f953 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 8001746:	e0b3      	b.n	80018b0 <digit+0x310>

	  case 5:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8001748:	2201      	movs	r2, #1
 800174a:	2140      	movs	r1, #64	; 0x40
 800174c:	485a      	ldr	r0, [pc, #360]	; (80018b8 <digit+0x318>)
 800174e:	f003 f94d 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	4858      	ldr	r0, [pc, #352]	; (80018b8 <digit+0x318>)
 8001758:	f003 f948 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2108      	movs	r1, #8
 8001760:	4855      	ldr	r0, [pc, #340]	; (80018b8 <digit+0x318>)
 8001762:	f003 f943 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2102      	movs	r1, #2
 800176a:	4853      	ldr	r0, [pc, #332]	; (80018b8 <digit+0x318>)
 800176c:	f003 f93e 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2104      	movs	r1, #4
 8001774:	4850      	ldr	r0, [pc, #320]	; (80018b8 <digit+0x318>)
 8001776:	f003 f939 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2120      	movs	r1, #32
 800177e:	484e      	ldr	r0, [pc, #312]	; (80018b8 <digit+0x318>)
 8001780:	f003 f934 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 8001784:	2201      	movs	r2, #1
 8001786:	2101      	movs	r1, #1
 8001788:	484b      	ldr	r0, [pc, #300]	; (80018b8 <digit+0x318>)
 800178a:	f003 f92f 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 800178e:	e08f      	b.n	80018b0 <digit+0x310>

	  case 6:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2140      	movs	r1, #64	; 0x40
 8001794:	4848      	ldr	r0, [pc, #288]	; (80018b8 <digit+0x318>)
 8001796:	f003 f929 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_RESET);
 800179a:	2200      	movs	r2, #0
 800179c:	2110      	movs	r1, #16
 800179e:	4846      	ldr	r0, [pc, #280]	; (80018b8 <digit+0x318>)
 80017a0:	f003 f924 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2108      	movs	r1, #8
 80017a8:	4843      	ldr	r0, [pc, #268]	; (80018b8 <digit+0x318>)
 80017aa:	f003 f91f 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 80017ae:	2201      	movs	r2, #1
 80017b0:	2102      	movs	r1, #2
 80017b2:	4841      	ldr	r0, [pc, #260]	; (80018b8 <digit+0x318>)
 80017b4:	f003 f91a 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2104      	movs	r1, #4
 80017bc:	483e      	ldr	r0, [pc, #248]	; (80018b8 <digit+0x318>)
 80017be:	f003 f915 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	483c      	ldr	r0, [pc, #240]	; (80018b8 <digit+0x318>)
 80017c8:	f003 f910 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2101      	movs	r1, #1
 80017d0:	4839      	ldr	r0, [pc, #228]	; (80018b8 <digit+0x318>)
 80017d2:	f003 f90b 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 80017d6:	e06b      	b.n	80018b0 <digit+0x310>

	  case 7:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 80017d8:	2201      	movs	r2, #1
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	4836      	ldr	r0, [pc, #216]	; (80018b8 <digit+0x318>)
 80017de:	f003 f905 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2110      	movs	r1, #16
 80017e6:	4834      	ldr	r0, [pc, #208]	; (80018b8 <digit+0x318>)
 80017e8:	f003 f900 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2108      	movs	r1, #8
 80017f0:	4831      	ldr	r0, [pc, #196]	; (80018b8 <digit+0x318>)
 80017f2:	f003 f8fb 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2102      	movs	r1, #2
 80017fa:	482f      	ldr	r0, [pc, #188]	; (80018b8 <digit+0x318>)
 80017fc:	f003 f8f6 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2104      	movs	r1, #4
 8001804:	482c      	ldr	r0, [pc, #176]	; (80018b8 <digit+0x318>)
 8001806:	f003 f8f1 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	482a      	ldr	r0, [pc, #168]	; (80018b8 <digit+0x318>)
 8001810:	f003 f8ec 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2101      	movs	r1, #1
 8001818:	4827      	ldr	r0, [pc, #156]	; (80018b8 <digit+0x318>)
 800181a:	f003 f8e7 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 800181e:	e047      	b.n	80018b0 <digit+0x310>

	  case 8:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	2140      	movs	r1, #64	; 0x40
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <digit+0x318>)
 8001826:	f003 f8e1 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2110      	movs	r1, #16
 800182e:	4822      	ldr	r0, [pc, #136]	; (80018b8 <digit+0x318>)
 8001830:	f003 f8dc 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2108      	movs	r1, #8
 8001838:	481f      	ldr	r0, [pc, #124]	; (80018b8 <digit+0x318>)
 800183a:	f003 f8d7 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 800183e:	2201      	movs	r2, #1
 8001840:	2102      	movs	r1, #2
 8001842:	481d      	ldr	r0, [pc, #116]	; (80018b8 <digit+0x318>)
 8001844:	f003 f8d2 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_SET);
 8001848:	2201      	movs	r2, #1
 800184a:	2104      	movs	r1, #4
 800184c:	481a      	ldr	r0, [pc, #104]	; (80018b8 <digit+0x318>)
 800184e:	f003 f8cd 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2120      	movs	r1, #32
 8001856:	4818      	ldr	r0, [pc, #96]	; (80018b8 <digit+0x318>)
 8001858:	f003 f8c8 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2101      	movs	r1, #1
 8001860:	4815      	ldr	r0, [pc, #84]	; (80018b8 <digit+0x318>)
 8001862:	f003 f8c3 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 8001866:	e023      	b.n	80018b0 <digit+0x310>

	  case 9:
		  HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, GPIO_PIN_SET);
 8001868:	2201      	movs	r2, #1
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <digit+0x318>)
 800186e:	f003 f8bd 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2110      	movs	r1, #16
 8001876:	4810      	ldr	r0, [pc, #64]	; (80018b8 <digit+0x318>)
 8001878:	f003 f8b8 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2108      	movs	r1, #8
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <digit+0x318>)
 8001882:	f003 f8b3 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, GPIO_PIN_SET);
 8001886:	2201      	movs	r2, #1
 8001888:	2102      	movs	r1, #2
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <digit+0x318>)
 800188c:	f003 f8ae 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2104      	movs	r1, #4
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <digit+0x318>)
 8001896:	f003 f8a9 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, GPIO_PIN_SET);
 800189a:	2201      	movs	r2, #1
 800189c:	2120      	movs	r1, #32
 800189e:	4806      	ldr	r0, [pc, #24]	; (80018b8 <digit+0x318>)
 80018a0:	f003 f8a4 	bl	80049ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, GPIO_PIN_SET);
 80018a4:	2201      	movs	r2, #1
 80018a6:	2101      	movs	r1, #1
 80018a8:	4803      	ldr	r0, [pc, #12]	; (80018b8 <digit+0x318>)
 80018aa:	f003 f89f 	bl	80049ec <HAL_GPIO_WritePin>
		  break;
 80018ae:	bf00      	nop

  };
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020800 	.word	0x40020800

080018bc <HAL_GPIO_EXTI_Callback>:
/*----------------------------------------------------------------------------*/
/* USER CODE BEGIN 1 */
#define MAX_PROGRAM_NUM 2
#define MIN_PROGRAM_NUM 0
int ButtonCnt;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
	if( GPIO_Pin == Button1_Pin) {
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d108      	bne.n	80018de <HAL_GPIO_EXTI_Callback+0x22>
		if (ButtonCnt > MIN_PROGRAM_NUM) ButtonCnt--;
 80018cc:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	dd04      	ble.n	80018de <HAL_GPIO_EXTI_Callback+0x22>
 80018d4:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	3b01      	subs	r3, #1
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018dc:	6013      	str	r3, [r2, #0]
	}
	if( GPIO_Pin == Button2_Pin)  {
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d108      	bne.n	80018f6 <HAL_GPIO_EXTI_Callback+0x3a>
		if (ButtonCnt < MAX_PROGRAM_NUM) ButtonCnt++;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	dc04      	bgt.n	80018f6 <HAL_GPIO_EXTI_Callback+0x3a>
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_GPIO_EXTI_Callback+0x48>)
 80018f4:	6013      	str	r3, [r2, #0]
	}
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200002e0 	.word	0x200002e0

08001908 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	4b4a      	ldr	r3, [pc, #296]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b47      	ldr	r3, [pc, #284]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a42      	ldr	r2, [pc, #264]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b40      	ldr	r3, [pc, #256]	; (8001a4c <MX_GPIO_Init+0x144>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b3c      	ldr	r3, [pc, #240]	; (8001a4c <MX_GPIO_Init+0x144>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a3b      	ldr	r2, [pc, #236]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b39      	ldr	r3, [pc, #228]	; (8001a4c <MX_GPIO_Init+0x144>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin 
 8001972:	2200      	movs	r2, #0
 8001974:	21ff      	movs	r1, #255	; 0xff
 8001976:	4836      	ldr	r0, [pc, #216]	; (8001a50 <MX_GPIO_Init+0x148>)
 8001978:	f003 f838 	bl	80049ec <HAL_GPIO_WritePin>
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_SET);
 800197c:	2201      	movs	r2, #1
 800197e:	2110      	movs	r1, #16
 8001980:	4834      	ldr	r0, [pc, #208]	; (8001a54 <MX_GPIO_Init+0x14c>)
 8001982:	f003 f833 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_SET);
 8001986:	2201      	movs	r2, #1
 8001988:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800198c:	4830      	ldr	r0, [pc, #192]	; (8001a50 <MX_GPIO_Init+0x148>)
 800198e:	f003 f82d 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001992:	2201      	movs	r2, #1
 8001994:	2110      	movs	r1, #16
 8001996:	4830      	ldr	r0, [pc, #192]	; (8001a58 <MX_GPIO_Init+0x150>)
 8001998:	f003 f828 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin 
 800199c:	f640 73ff 	movw	r3, #4095	; 0xfff
 80019a0:	60fb      	str	r3, [r7, #12]
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|DP_Pin 
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4826      	ldr	r0, [pc, #152]	; (8001a50 <MX_GPIO_Init+0x148>)
 80019b6:	f002 fe7f 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 80019ba:	2310      	movs	r3, #16
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019c6:	2302      	movs	r3, #2
 80019c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	4619      	mov	r1, r3
 80019d0:	4820      	ldr	r0, [pc, #128]	; (8001a54 <MX_GPIO_Init+0x14c>)
 80019d2:	f002 fe71 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 80019d6:	2321      	movs	r3, #33	; 0x21
 80019d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <MX_GPIO_Init+0x154>)
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	481b      	ldr	r0, [pc, #108]	; (8001a58 <MX_GPIO_Init+0x150>)
 80019ea:	f002 fe65 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 80019ee:	2310      	movs	r3, #16
 80019f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80019f2:	2311      	movs	r3, #17
 80019f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	4619      	mov	r1, r3
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <MX_GPIO_Init+0x150>)
 8001a06:	f002 fe57 	bl	80046b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8001a0a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_GPIO_Init+0x154>)
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <MX_GPIO_Init+0x150>)
 8001a20:	f002 fe4a 	bl	80046b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a24:	2200      	movs	r2, #0
 8001a26:	2100      	movs	r1, #0
 8001a28:	2006      	movs	r0, #6
 8001a2a:	f002 fa7e 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a2e:	2006      	movs	r0, #6
 8001a30:	f002 fa97 	bl	8003f62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2017      	movs	r0, #23
 8001a3a:	f002 fa76 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a3e:	2017      	movs	r0, #23
 8001a40:	f002 fa8f 	bl	8003f62 <HAL_NVIC_EnableIRQ>

}
 8001a44:	bf00      	nop
 8001a46:	3720      	adds	r7, #32
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	10110000 	.word	0x10110000

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a66:	f001 fb5d 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f87f 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f7ff ff4b 	bl	8001908 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a72:	f7ff fbdd 	bl	8001230 <MX_DMA_Init>
  MX_TIM1_Init();
 8001a76:	f000 fc8b 	bl	8002390 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001a7a:	f7ff fa8d 	bl	8000f98 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001a7e:	f001 f92b 	bl	8002cd8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001a82:	f000 fcd5 	bl	8002430 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a86:	f000 fd21 	bl	80024cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a8a:	f000 fd6d 	bl	8002568 <MX_TIM4_Init>
  MX_SPI1_Init();
 8001a8e:	f000 fa6b 	bl	8001f68 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001a92:	482d      	ldr	r0, [pc, #180]	; (8001b48 <main+0xe8>)
 8001a94:	f003 fef5 	bl	8005882 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a98:	482c      	ldr	r0, [pc, #176]	; (8001b4c <main+0xec>)
 8001a9a:	f003 fef2 	bl	8005882 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a9e:	482c      	ldr	r0, [pc, #176]	; (8001b50 <main+0xf0>)
 8001aa0:	f003 feef 	bl	8005882 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <main+0xf4>)
 8001aa6:	f003 feec 	bl	8005882 <HAL_TIM_Base_Start_IT>
//  HAL_ADC_Start_IT(&hadc1);
  HAL_UART_Receive_IT(&huart2, &Received, 1);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	492a      	ldr	r1, [pc, #168]	; (8001b58 <main+0xf8>)
 8001aae:	482b      	ldr	r0, [pc, #172]	; (8001b5c <main+0xfc>)
 8001ab0:	f004 fb20 	bl	80060f4 <HAL_UART_Receive_IT>
  HAL_ADC_Start_DMA(&hadc1, ADCDMABuff, 3);
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	492a      	ldr	r1, [pc, #168]	; (8001b60 <main+0x100>)
 8001ab8:	482a      	ldr	r0, [pc, #168]	; (8001b64 <main+0x104>)
 8001aba:	f001 fd4b 	bl	8003554 <HAL_ADC_Start_DMA>
	#define CTRL_REG3 0x22
	#define CTRL_REG1_FLAGS 0b11000111
	#define CTRL_REG2_FLAGS 0b01000000
	int licznik;

	SPIWrite(CTRL_REG1, CTRL_REG1_FLAGS);
 8001abe:	21c7      	movs	r1, #199	; 0xc7
 8001ac0:	2020      	movs	r0, #32
 8001ac2:	f000 fa21 	bl	8001f08 <SPIWrite>
	SPIWrite(CTRL_REG2, CTRL_REG2_FLAGS);
 8001ac6:	2140      	movs	r1, #64	; 0x40
 8001ac8:	2021      	movs	r0, #33	; 0x21
 8001aca:	f000 fa1d 	bl	8001f08 <SPIWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   wire_reset();
 8001ace:	f000 f8e7 	bl	8001ca0 <wire_reset>
	   wire_write(0xcc);
 8001ad2:	20cc      	movs	r0, #204	; 0xcc
 8001ad4:	f000 f960 	bl	8001d98 <wire_write>
	   wire_write(0x44);
 8001ad8:	2044      	movs	r0, #68	; 0x44
 8001ada:	f000 f95d 	bl	8001d98 <wire_write>

	   HAL_Delay(750);
 8001ade:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001ae2:	f001 fb91 	bl	8003208 <HAL_Delay>

	   wire_reset();
 8001ae6:	f000 f8db 	bl	8001ca0 <wire_reset>
	   wire_write(0xcc);
 8001aea:	20cc      	movs	r0, #204	; 0xcc
 8001aec:	f000 f954 	bl	8001d98 <wire_write>
	   wire_write(0xbe);
 8001af0:	20be      	movs	r0, #190	; 0xbe
 8001af2:	f000 f951 	bl	8001d98 <wire_write>

	   for (int i = 0; i < 9; i++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e00b      	b.n	8001b14 <main+0xb4>
		 scratchpad[i] = wire_read();
 8001afc:	f000 f967 	bl	8001dce <wire_read>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4619      	mov	r1, r3
 8001b04:	463a      	mov	r2, r7
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	701a      	strb	r2, [r3, #0]
	   for (int i = 0; i < 9; i++)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	ddf0      	ble.n	8001afc <main+0x9c>
	   uint8_t crc = wire_crc(scratchpad, 8);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f000 f9a0 	bl	8001e64 <wire_crc>
 8001b24:	4603      	mov	r3, r0
 8001b26:	72fb      	strb	r3, [r7, #11]
	   if (crc == scratchpad[8]) {
 8001b28:	7a3b      	ldrb	r3, [r7, #8]
 8001b2a:	7afa      	ldrb	r2, [r7, #11]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d1ce      	bne.n	8001ace <main+0x6e>
		   temperature = (scratchpad[1] << 8) | scratchpad[0];
 8001b30:	787b      	ldrb	r3, [r7, #1]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	783b      	ldrb	r3, [r7, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <main+0x108>)
 8001b42:	801a      	strh	r2, [r3, #0]
  {
 8001b44:	e7c3      	b.n	8001ace <main+0x6e>
 8001b46:	bf00      	nop
 8001b48:	20000590 	.word	0x20000590
 8001b4c:	200005d4 	.word	0x200005d4
 8001b50:	200003b8 	.word	0x200003b8
 8001b54:	20000374 	.word	0x20000374
 8001b58:	200002e4 	.word	0x200002e4
 8001b5c:	200006d4 	.word	0x200006d4
 8001b60:	200002e8 	.word	0x200002e8
 8001b64:	20000234 	.word	0x20000234
 8001b68:	200003b4 	.word	0x200003b4

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f005 f8f4 	bl	8006d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a26      	ldr	r2, [pc, #152]	; (8001c34 <SystemClock_Config+0xc8>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b24      	ldr	r3, [pc, #144]	; (8001c34 <SystemClock_Config+0xc8>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a20      	ldr	r2, [pc, #128]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <SystemClock_Config+0xcc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001be0:	2364      	movs	r3, #100	; 0x64
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001be8:	2304      	movs	r3, #4
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f002 ff2d 	bl	8004a50 <HAL_RCC_OscConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bfc:	f000 f82c 	bl	8001c58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c00:	230f      	movs	r3, #15
 8001c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	2103      	movs	r1, #3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 f987 	bl	8004f30 <HAL_RCC_ClockConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c28:	f000 f816 	bl	8001c58 <Error_Handler>
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3750      	adds	r7, #80	; 0x50
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_ADC_LevelOutOfWindowCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  printf("!!!! OUT OF WINDOW INTERRUPT !!!!\r\n");
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <HAL_ADC_LevelOutOfWindowCallback+0x18>)
 8001c46:	f005 ffd9 	bl	8007bfc <puts>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	0800af48 	.word	0x0800af48

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <delay_us>:
#include "main.h"



void delay_us(uint32_t us)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <delay_us+0x34>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24
  uint32_t time;
  while (__HAL_TIM_GET_COUNTER(&htim4) < us) {
 8001c78:	e003      	b.n	8001c82 <delay_us+0x1a>
	  time = __HAL_TIM_GET_COUNTER(&htim4);
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <delay_us+0x34>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	60fb      	str	r3, [r7, #12]
  while (__HAL_TIM_GET_COUNTER(&htim4) < us) {
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <delay_us+0x34>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d8f5      	bhi.n	8001c7a <delay_us+0x12>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000374 	.word	0x20000374

08001ca0 <wire_reset>:

HAL_StatusTypeDef wire_reset(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  int rc;

  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2110      	movs	r1, #16
 8001caa:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <wire_reset+0x50>)
 8001cac:	f002 fe9e 	bl	80049ec <HAL_GPIO_WritePin>
  delay_us(480);
 8001cb0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001cb4:	f7ff ffd8 	bl	8001c68 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2110      	movs	r1, #16
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <wire_reset+0x50>)
 8001cbe:	f002 fe95 	bl	80049ec <HAL_GPIO_WritePin>
  delay_us(70);
 8001cc2:	2046      	movs	r0, #70	; 0x46
 8001cc4:	f7ff ffd0 	bl	8001c68 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001cc8:	2110      	movs	r1, #16
 8001cca:	4809      	ldr	r0, [pc, #36]	; (8001cf0 <wire_reset+0x50>)
 8001ccc:	f002 fe76 	bl	80049bc <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	607b      	str	r3, [r7, #4]
  delay_us(410);
 8001cd4:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8001cd8:	f7ff ffc6 	bl	8001c68 <delay_us>

  if (rc == 0)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <wire_reset+0x46>
    return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <wire_reset+0x48>
  else
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40020400 	.word	0x40020400

08001cf4 <write_bit>:

void write_bit(int value)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if (value) {
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <write_bit+0x30>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2110      	movs	r1, #16
 8001d06:	4811      	ldr	r0, [pc, #68]	; (8001d4c <write_bit+0x58>)
 8001d08:	f002 fe70 	bl	80049ec <HAL_GPIO_WritePin>
    delay_us(6);
 8001d0c:	2006      	movs	r0, #6
 8001d0e:	f7ff ffab 	bl	8001c68 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001d12:	2201      	movs	r2, #1
 8001d14:	2110      	movs	r1, #16
 8001d16:	480d      	ldr	r0, [pc, #52]	; (8001d4c <write_bit+0x58>)
 8001d18:	f002 fe68 	bl	80049ec <HAL_GPIO_WritePin>
    delay_us(64);
 8001d1c:	2040      	movs	r0, #64	; 0x40
 8001d1e:	f7ff ffa3 	bl	8001c68 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
    delay_us(60);
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
    delay_us(10);
  }
}
 8001d22:	e00f      	b.n	8001d44 <write_bit+0x50>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2110      	movs	r1, #16
 8001d28:	4808      	ldr	r0, [pc, #32]	; (8001d4c <write_bit+0x58>)
 8001d2a:	f002 fe5f 	bl	80049ec <HAL_GPIO_WritePin>
    delay_us(60);
 8001d2e:	203c      	movs	r0, #60	; 0x3c
 8001d30:	f7ff ff9a 	bl	8001c68 <delay_us>
    HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2110      	movs	r1, #16
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <write_bit+0x58>)
 8001d3a:	f002 fe57 	bl	80049ec <HAL_GPIO_WritePin>
    delay_us(10);
 8001d3e:	200a      	movs	r0, #10
 8001d40:	f7ff ff92 	bl	8001c68 <delay_us>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40020400 	.word	0x40020400

08001d50 <read_bit>:

int read_bit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
  int rc;
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2110      	movs	r1, #16
 8001d5a:	480e      	ldr	r0, [pc, #56]	; (8001d94 <read_bit+0x44>)
 8001d5c:	f002 fe46 	bl	80049ec <HAL_GPIO_WritePin>
  delay_us(6);
 8001d60:	2006      	movs	r0, #6
 8001d62:	f7ff ff81 	bl	8001c68 <delay_us>
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	2110      	movs	r1, #16
 8001d6a:	480a      	ldr	r0, [pc, #40]	; (8001d94 <read_bit+0x44>)
 8001d6c:	f002 fe3e 	bl	80049ec <HAL_GPIO_WritePin>
  delay_us(9);
 8001d70:	2009      	movs	r0, #9
 8001d72:	f7ff ff79 	bl	8001c68 <delay_us>
  rc = HAL_GPIO_ReadPin(DS_GPIO_Port, DS_Pin);
 8001d76:	2110      	movs	r1, #16
 8001d78:	4806      	ldr	r0, [pc, #24]	; (8001d94 <read_bit+0x44>)
 8001d7a:	f002 fe1f 	bl	80049bc <HAL_GPIO_ReadPin>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	607b      	str	r3, [r7, #4]
  delay_us(55);
 8001d82:	2037      	movs	r0, #55	; 0x37
 8001d84:	f7ff ff70 	bl	8001c68 <delay_us>
  return rc;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40020400 	.word	0x40020400

08001d98 <wire_write>:

void wire_write(uint8_t byte)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	e00b      	b.n	8001dc0 <wire_write+0x28>
    write_bit(byte & 0x01);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ffa0 	bl	8001cf4 <write_bit>
    byte >>= 1;
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	085b      	lsrs	r3, r3, #1
 8001db8:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b07      	cmp	r3, #7
 8001dc4:	ddf0      	ble.n	8001da8 <wire_write+0x10>
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <wire_read>:

uint8_t wire_read(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
  uint8_t value = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	71fb      	strb	r3, [r7, #7]
  int i;
  for (i = 0; i < 8; i++) {
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	e00e      	b.n	8001dfc <wire_read+0x2e>
    value >>= 1;
 8001dde:	79fb      	ldrb	r3, [r7, #7]
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	71fb      	strb	r3, [r7, #7]
    if (read_bit())
 8001de4:	f7ff ffb4 	bl	8001d50 <read_bit>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <wire_read+0x28>
      value |= 0x80;
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001df4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	603b      	str	r3, [r7, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	2b07      	cmp	r3, #7
 8001e00:	dded      	ble.n	8001dde <wire_read+0x10>
  }
  return value;
 8001e02:	79fb      	ldrb	r3, [r7, #7]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <byte_crc>:

uint8_t byte_crc(uint8_t crc, uint8_t byte)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	460a      	mov	r2, r1
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	71bb      	strb	r3, [r7, #6]
  int i;
  for (i = 0; i < 8; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	e016      	b.n	8001e50 <byte_crc+0x44>
    uint8_t b = crc ^ byte;
 8001e22:	79fa      	ldrb	r2, [r7, #7]
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	4053      	eors	r3, r2
 8001e28:	72fb      	strb	r3, [r7, #11]
    crc >>= 1;
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	71fb      	strb	r3, [r7, #7]
    if (b & 0x01)
 8001e30:	7afb      	ldrb	r3, [r7, #11]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d004      	beq.n	8001e44 <byte_crc+0x38>
      crc ^= 0x8c;
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8001e40:	43db      	mvns	r3, r3
 8001e42:	71fb      	strb	r3, [r7, #7]
    byte >>= 1;
 8001e44:	79bb      	ldrb	r3, [r7, #6]
 8001e46:	085b      	lsrs	r3, r3, #1
 8001e48:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 8; i++) {
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b07      	cmp	r3, #7
 8001e54:	dde5      	ble.n	8001e22 <byte_crc+0x16>
  }
  return crc;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <wire_crc>:

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  int i;
    uint8_t crc = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	72fb      	strb	r3, [r7, #11]

    for (i = 0; i < len; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00d      	b.n	8001e94 <wire_crc+0x30>
      crc = byte_crc(crc, data[i]);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	781a      	ldrb	r2, [r3, #0]
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ffc1 	bl	8001e0c <byte_crc>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	72fb      	strb	r3, [r7, #11]
    for (i = 0; i < len; i++)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3301      	adds	r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbed      	blt.n	8001e78 <wire_crc+0x14>

    return crc;
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <SPIRead>:
#include "spi.h"

/* USER CODE BEGIN 0 */
uint16_t SPITx[10];
uint16_t SPIRx[10];
uint8_t SPIRead( uint8_t Address ) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  SPITx[0] = (0x80 | Address) << 8;
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <SPIRead+0x50>)
 8001ec2:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <SPIRead+0x54>)
 8001eca:	f002 fd8f 	bl	80049ec <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, SPITx, SPIRx, 1, 100);
 8001ece:	2364      	movs	r3, #100	; 0x64
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SPIRead+0x58>)
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <SPIRead+0x50>)
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <SPIRead+0x5c>)
 8001eda:	f003 fa59 	bl	8005390 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4806      	ldr	r0, [pc, #24]	; (8001efc <SPIRead+0x54>)
 8001ee4:	f002 fd82 	bl	80049ec <HAL_GPIO_WritePin>
  return( (uint8_t)(SPIRx[0] & 0xFF) );
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SPIRead+0x58>)
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000035c 	.word	0x2000035c
 8001efc:	40020000 	.word	0x40020000
 8001f00:	200002f0 	.word	0x200002f0
 8001f04:	20000304 	.word	0x20000304

08001f08 <SPIWrite>:
void SPIWrite( uint8_t AddressAndAtributes, uint8_t Data ) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460a      	mov	r2, r1
 8001f12:	71fb      	strb	r3, [r7, #7]
 8001f14:	4613      	mov	r3, r2
 8001f16:	71bb      	strb	r3, [r7, #6]
  SPITx[0] = (AddressAndAtributes << 8) + Data;
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <SPIWrite+0x50>)
 8001f2a:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2110      	movs	r1, #16
 8001f30:	480a      	ldr	r0, [pc, #40]	; (8001f5c <SPIWrite+0x54>)
 8001f32:	f002 fd5b 	bl	80049ec <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, SPITx, SPIRx, 1, 100);
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <SPIWrite+0x58>)
 8001f3e:	4906      	ldr	r1, [pc, #24]	; (8001f58 <SPIWrite+0x50>)
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <SPIWrite+0x5c>)
 8001f42:	f003 fa25 	bl	8005390 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOA, SPI_NSS_Pin, GPIO_PIN_SET);
 8001f46:	2201      	movs	r2, #1
 8001f48:	2110      	movs	r1, #16
 8001f4a:	4804      	ldr	r0, [pc, #16]	; (8001f5c <SPIWrite+0x54>)
 8001f4c:	f002 fd4e 	bl	80049ec <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000035c 	.word	0x2000035c
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	200002f0 	.word	0x200002f0
 8001f64:	20000304 	.word	0x20000304

08001f68 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <MX_SPI1_Init+0x6c>)
 8001f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001f9e:	2218      	movs	r2, #24
 8001fa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_SPI1_Init+0x68>)
 8001fbc:	f003 f984 	bl	80052c8 <HAL_SPI_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001fc6:	f7ff fe47 	bl	8001c58 <Error_Handler>
  }

}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000304 	.word	0x20000304
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a28      	ldr	r2, [pc, #160]	; (8002098 <HAL_SPI_MspInit+0xc0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d149      	bne.n	800208e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a26      	ldr	r2, [pc, #152]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_SPI_MspInit+0xc4>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002012:	613b      	str	r3, [r7, #16]
 8002014:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_SPI_MspInit+0xc4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a1f      	ldr	r2, [pc, #124]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a18      	ldr	r2, [pc, #96]	; (800209c <HAL_SPI_MspInit+0xc4>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_SPI_MspInit+0xc4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23c0      	movs	r3, #192	; 0xc0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800205e:	2305      	movs	r3, #5
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	4619      	mov	r1, r3
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <HAL_SPI_MspInit+0xc8>)
 800206a:	f002 fb25 	bl	80046b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800206e:	2308      	movs	r3, #8
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207e:	2305      	movs	r3, #5
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4806      	ldr	r0, [pc, #24]	; (80020a4 <HAL_SPI_MspInit+0xcc>)
 800208a:	f002 fb15 	bl	80046b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	; 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40013000 	.word	0x40013000
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_MspInit+0x4c>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a0f      	ldr	r2, [pc, #60]	; (80020f4 <HAL_MspInit+0x4c>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_MspInit+0x4c>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_MspInit+0x4c>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <HAL_MspInit+0x4c>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	; 0x40
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_MspInit+0x4c>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800210a:	e7fe      	b.n	800210a <HardFault_Handler+0x4>

0800210c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002110:	e7fe      	b.n	8002110 <MemManage_Handler+0x4>

08002112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002116:	e7fe      	b.n	8002116 <BusFault_Handler+0x4>

08002118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800211c:	e7fe      	b.n	800211c <UsageFault_Handler+0x4>

0800211e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214c:	f001 f83c 	bl	80031c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}

08002154 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002158:	2001      	movs	r0, #1
 800215a:	f002 fc61 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <DMA1_Stream5_IRQHandler+0x10>)
 800216a:	f002 f83d 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000614 	.word	0x20000614

08002178 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <DMA1_Stream6_IRQHandler+0x10>)
 800217e:	f002 f833 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000674 	.word	0x20000674

0800218c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <ADC_IRQHandler+0x10>)
 8002192:	f001 f89e 	bl	80032d2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000234 	.word	0x20000234

080021a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80021a4:	2020      	movs	r0, #32
 80021a6:	f002 fc3b 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80021aa:	2040      	movs	r0, #64	; 0x40
 80021ac:	f002 fc38 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	f002 fc35 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80021b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021ba:	f002 fc31 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80021be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021c2:	f002 fc2d 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021d2:	f003 fb7a 	bl	80058ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000590 	.word	0x20000590

080021e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <TIM2_IRQHandler+0x10>)
 80021e6:	f003 fb70 	bl	80058ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200005d4 	.word	0x200005d4

080021f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <TIM3_IRQHandler+0x10>)
 80021fa:	f003 fb66 	bl	80058ca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200003b8 	.word	0x200003b8

08002208 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <USART2_IRQHandler+0x10>)
 800220e:	f003 ffc7 	bl	80061a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200006d4 	.word	0x200006d4

0800221c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA2_Stream0_IRQHandler+0x10>)
 8002222:	f001 ffe1 	bl	80041e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000027c 	.word	0x2000027c

08002230 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
	}

return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e009      	b.n	8002290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf1      	blt.n	800227c <_write+0x12>
	}
	return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
	return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x50>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x16>
		heap_end = &end;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <_sbrk+0x50>)
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <_sbrk+0x54>)
 8002320:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <_sbrk+0x50>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <_sbrk+0x50>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	466a      	mov	r2, sp
 8002332:	4293      	cmp	r3, r2
 8002334:	d907      	bls.n	8002346 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002336:	f004 fce5 	bl	8006d04 <__errno>
 800233a:	4602      	mov	r2, r0
 800233c:	230c      	movs	r3, #12
 800233e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002340:	f04f 33ff 	mov.w	r3, #4294967295
 8002344:	e006      	b.n	8002354 <_sbrk+0x48>
	}

	heap_end += incr;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <_sbrk+0x50>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a03      	ldr	r2, [pc, #12]	; (800235c <_sbrk+0x50>)
 8002350:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	200001fc 	.word	0x200001fc
 8002360:	20000720 	.word	0x20000720

08002364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b08      	ldr	r3, [pc, #32]	; (800238c <SystemInit+0x28>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a07      	ldr	r2, [pc, #28]	; (800238c <SystemInit+0x28>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <SystemInit+0x28>)
 800237a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800237e:	609a      	str	r2, [r3, #8]
#endif
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	463b      	mov	r3, r7
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <MX_TIM1_Init+0x98>)
 80023ae:	4a1f      	ldr	r2, [pc, #124]	; (800242c <MX_TIM1_Init+0x9c>)
 80023b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <MX_TIM1_Init+0x98>)
 80023b4:	2264      	movs	r2, #100	; 0x64
 80023b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <MX_TIM1_Init+0x98>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <MX_TIM1_Init+0x98>)
 80023c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <MX_TIM1_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023cc:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_TIM1_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <MX_TIM1_Init+0x98>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023d8:	4813      	ldr	r0, [pc, #76]	; (8002428 <MX_TIM1_Init+0x98>)
 80023da:	f003 fa27 	bl	800582c <HAL_TIM_Base_Init>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80023e4:	f7ff fc38 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023ee:	f107 0308 	add.w	r3, r7, #8
 80023f2:	4619      	mov	r1, r3
 80023f4:	480c      	ldr	r0, [pc, #48]	; (8002428 <MX_TIM1_Init+0x98>)
 80023f6:	f003 fb70 	bl	8005ada <HAL_TIM_ConfigClockSource>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002400:	f7ff fc2a 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800240c:	463b      	mov	r3, r7
 800240e:	4619      	mov	r1, r3
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_TIM1_Init+0x98>)
 8002412:	f003 fd5b 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800241c:	f7ff fc1c 	bl	8001c58 <Error_Handler>
  }

}
 8002420:	bf00      	nop
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000590 	.word	0x20000590
 800242c:	40010000 	.word	0x40010000

08002430 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002436:	f107 0308 	add.w	r3, r7, #8
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	605a      	str	r2, [r3, #4]
 8002440:	609a      	str	r2, [r3, #8]
 8002442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002444:	463b      	mov	r3, r7
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 800244c:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <MX_TIM2_Init+0x98>)
 800244e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002452:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002456:	f242 7210 	movw	r2, #10000	; 0x2710
 800245a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <MX_TIM2_Init+0x98>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002464:	f242 7210 	movw	r2, #10000	; 0x2710
 8002468:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <MX_TIM2_Init+0x98>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002470:	4b15      	ldr	r3, [pc, #84]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002476:	4814      	ldr	r0, [pc, #80]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002478:	f003 f9d8 	bl	800582c <HAL_TIM_Base_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002482:	f7ff fbe9 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800248a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800248c:	f107 0308 	add.w	r3, r7, #8
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_TIM2_Init+0x98>)
 8002494:	f003 fb21 	bl	8005ada <HAL_TIM_ConfigClockSource>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800249e:	f7ff fbdb 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	4619      	mov	r1, r3
 80024ae:	4806      	ldr	r0, [pc, #24]	; (80024c8 <MX_TIM2_Init+0x98>)
 80024b0:	f003 fd0c 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80024ba:	f7ff fbcd 	bl	8001c58 <Error_Handler>
  }

}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200005d4 	.word	0x200005d4

080024cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e0:	463b      	mov	r3, r7
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <MX_TIM3_Init+0x94>)
 80024ea:	4a1e      	ldr	r2, [pc, #120]	; (8002564 <MX_TIM3_Init+0x98>)
 80024ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	; (8002560 <MX_TIM3_Init+0x94>)
 80024f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80024f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f6:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <MX_TIM3_Init+0x94>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80024fc:	4b18      	ldr	r3, [pc, #96]	; (8002560 <MX_TIM3_Init+0x94>)
 80024fe:	2264      	movs	r2, #100	; 0x64
 8002500:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <MX_TIM3_Init+0x94>)
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <MX_TIM3_Init+0x94>)
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800250e:	4814      	ldr	r0, [pc, #80]	; (8002560 <MX_TIM3_Init+0x94>)
 8002510:	f003 f98c 	bl	800582c <HAL_TIM_Base_Init>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800251a:	f7ff fb9d 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002522:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002524:	f107 0308 	add.w	r3, r7, #8
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <MX_TIM3_Init+0x94>)
 800252c:	f003 fad5 	bl	8005ada <HAL_TIM_ConfigClockSource>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002536:	f7ff fb8f 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002542:	463b      	mov	r3, r7
 8002544:	4619      	mov	r1, r3
 8002546:	4806      	ldr	r0, [pc, #24]	; (8002560 <MX_TIM3_Init+0x94>)
 8002548:	f003 fcc0 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002552:	f7ff fb81 	bl	8001c58 <Error_Handler>
  }

}
 8002556:	bf00      	nop
 8002558:	3718      	adds	r7, #24
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	200003b8 	.word	0x200003b8
 8002564:	40000400 	.word	0x40000400

08002568 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
 8002578:	609a      	str	r2, [r3, #8]
 800257a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800257c:	463b      	mov	r3, r7
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_TIM4_Init+0x94>)
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <MX_TIM4_Init+0x98>)
 8002588:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <MX_TIM4_Init+0x94>)
 800258c:	2263      	movs	r2, #99	; 0x63
 800258e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_TIM4_Init+0x94>)
 8002592:	2200      	movs	r2, #0
 8002594:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_TIM4_Init+0x94>)
 8002598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_TIM4_Init+0x94>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <MX_TIM4_Init+0x94>)
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025aa:	4814      	ldr	r0, [pc, #80]	; (80025fc <MX_TIM4_Init+0x94>)
 80025ac:	f003 f93e 	bl	800582c <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80025b6:	f7ff fb4f 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025c0:	f107 0308 	add.w	r3, r7, #8
 80025c4:	4619      	mov	r1, r3
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_TIM4_Init+0x94>)
 80025c8:	f003 fa87 	bl	8005ada <HAL_TIM_ConfigClockSource>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80025d2:	f7ff fb41 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025de:	463b      	mov	r3, r7
 80025e0:	4619      	mov	r1, r3
 80025e2:	4806      	ldr	r0, [pc, #24]	; (80025fc <MX_TIM4_Init+0x94>)
 80025e4:	f003 fc72 	bl	8005ecc <HAL_TIMEx_MasterConfigSynchronization>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80025ee:	f7ff fb33 	bl	8001c58 <Error_Handler>
  }

}
 80025f2:	bf00      	nop
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000374 	.word	0x20000374
 8002600:	40000800 	.word	0x40000800

08002604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_TIM_Base_MspInit+0xe0>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d116      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	4a32      	ldr	r2, [pc, #200]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6453      	str	r3, [r2, #68]	; 0x44
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2019      	movs	r0, #25
 8002638:	f001 fc77 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800263c:	2019      	movs	r0, #25
 800263e:	f001 fc90 	bl	8003f62 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002642:	e04a      	b.n	80026da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264c:	d116      	bne.n	800267c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201c      	movs	r0, #28
 8002670:	f001 fc5b 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002674:	201c      	movs	r0, #28
 8002676:	f001 fc74 	bl	8003f62 <HAL_NVIC_EnableIRQ>
}
 800267a:	e02e      	b.n	80026da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1a      	ldr	r2, [pc, #104]	; (80026ec <HAL_TIM_Base_MspInit+0xe8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d116      	bne.n	80026b4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201d      	movs	r0, #29
 80026a8:	f001 fc3f 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026ac:	201d      	movs	r0, #29
 80026ae:	f001 fc58 	bl	8003f62 <HAL_NVIC_EnableIRQ>
}
 80026b2:	e012      	b.n	80026da <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_TIM_Base_MspInit+0xec>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d10d      	bne.n	80026da <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_TIM_Base_MspInit+0xe4>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40010000 	.word	0x40010000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40000800 	.word	0x40000800
 80026f4:	00000000 	.word	0x00000000

080026f8 <HAL_TIM_PeriodElapsedCallback>:
	double Z_scaled;

	short int DECIMAL_POINT_Z_FLAG = 0;
	short int DECIMAL_POINT_TEMP_FLAG = 0;

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80026f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026fc:	b0a1      	sub	sp, #132	; 0x84
 80026fe:	af04      	add	r7, sp, #16
 8002700:	6078      	str	r0, [r7, #4]
		static int TimerCnt;
		static double number;

		// measure acceleration in Z axis
		// Add measurement to FIFO to be able to count average
		if (htim == &htim3) {
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a92      	ldr	r2, [pc, #584]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d154      	bne.n	80027b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
			Z = SPIRead(OUT_Z);
 800270a:	202d      	movs	r0, #45	; 0x2d
 800270c:	f7ff fbcc 	bl	8001ea8 <SPIRead>
 8002710:	4603      	mov	r3, r0
 8002712:	461a      	mov	r2, r3
 8002714:	4b8f      	ldr	r3, [pc, #572]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002716:	701a      	strb	r2, [r3, #0]
			Z_scaled = -1.65 + (3.47 * (double) Z / 255);
 8002718:	4b8e      	ldr	r3, [pc, #568]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fef9 	bl	8000514 <__aeabi_ui2d>
 8002722:	a37f      	add	r3, pc, #508	; (adr r3, 8002920 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002728:	f7fd ff6e 	bl	8000608 <__aeabi_dmul>
 800272c:	4603      	mov	r3, r0
 800272e:	460c      	mov	r4, r1
 8002730:	4618      	mov	r0, r3
 8002732:	4621      	mov	r1, r4
 8002734:	a37c      	add	r3, pc, #496	; (adr r3, 8002928 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f88f 	bl	800085c <__aeabi_ddiv>
 800273e:	4603      	mov	r3, r0
 8002740:	460c      	mov	r4, r1
 8002742:	4618      	mov	r0, r3
 8002744:	4621      	mov	r1, r4
 8002746:	a37a      	add	r3, pc, #488	; (adr r3, 8002930 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274c:	f7fd fda4 	bl	8000298 <__aeabi_dsub>
 8002750:	4603      	mov	r3, r0
 8002752:	460c      	mov	r4, r1
 8002754:	4a80      	ldr	r2, [pc, #512]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002756:	e9c2 3400 	strd	r3, r4, [r2]

			light_FIFO[next_measure_FIFO_input] = (int)(3.3 * (double)ADCDMABuff[0] / 4.095);
 800275a:	4b80      	ldr	r3, [pc, #512]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fed8 	bl	8000514 <__aeabi_ui2d>
 8002764:	a374      	add	r3, pc, #464	; (adr r3, 8002938 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fd ff4d 	bl	8000608 <__aeabi_dmul>
 800276e:	4603      	mov	r3, r0
 8002770:	460c      	mov	r4, r1
 8002772:	4618      	mov	r0, r3
 8002774:	4621      	mov	r1, r4
 8002776:	a372      	add	r3, pc, #456	; (adr r3, 8002940 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fe f86e 	bl	800085c <__aeabi_ddiv>
 8002780:	4603      	mov	r3, r0
 8002782:	460c      	mov	r4, r1
 8002784:	4619      	mov	r1, r3
 8002786:	4622      	mov	r2, r4
 8002788:	4b75      	ldr	r3, [pc, #468]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800278a:	681c      	ldr	r4, [r3, #0]
 800278c:	4608      	mov	r0, r1
 800278e:	4611      	mov	r1, r2
 8002790:	f7fe f9ea 	bl	8000b68 <__aeabi_d2iz>
 8002794:	4602      	mov	r2, r0
 8002796:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002798:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
			next_measure_FIFO_input++;
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	4a6f      	ldr	r2, [pc, #444]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80027a4:	6013      	str	r3, [r2, #0]
			if (next_measure_FIFO_input > 99) {
 80027a6:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b63      	cmp	r3, #99	; 0x63
 80027ac:	dd02      	ble.n	80027b4 <HAL_TIM_PeriodElapsedCallback+0xbc>
				next_measure_FIFO_input = 0;
 80027ae:	4b6c      	ldr	r3, [pc, #432]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
			}
		}


		// UART transfer callback
		if (htim == &htim2) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a6c      	ldr	r2, [pc, #432]	; (8002968 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d144      	bne.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x14e>
			if (start_transmission == 1) {
 80027bc:	4b6b      	ldr	r3, [pc, #428]	; (800296c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d140      	bne.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x14e>
			 uint16_t data[50];
			 uint16_t size = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			 uint16_t scaled;
			 size = sprintf(data, "%.3f [V] %.3f [C] %.3f [g]\n\r",
					 (3.3 * (double)ADCDMABuff[0] / 4095),
 80027ca:	4b64      	ldr	r3, [pc, #400]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd fea0 	bl	8000514 <__aeabi_ui2d>
 80027d4:	a358      	add	r3, pc, #352	; (adr r3, 8002938 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80027d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027da:	f7fd ff15 	bl	8000608 <__aeabi_dmul>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	4618      	mov	r0, r3
 80027e4:	4621      	mov	r1, r4
			 size = sprintf(data, "%.3f [V] %.3f [C] %.3f [g]\n\r",
 80027e6:	a358      	add	r3, pc, #352	; (adr r3, 8002948 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fe f836 	bl	800085c <__aeabi_ddiv>
 80027f0:	4603      	mov	r3, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	4698      	mov	r8, r3
 80027f6:	46a1      	mov	r9, r4
					 (double)temperature / 16,
 80027f8:	4b5d      	ldr	r3, [pc, #372]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe89 	bl	8000514 <__aeabi_ui2d>
			 size = sprintf(data, "%.3f [V] %.3f [C] %.3f [g]\n\r",
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002808:	f7fe f828 	bl	800085c <__aeabi_ddiv>
 800280c:	4603      	mov	r3, r0
 800280e:	460c      	mov	r4, r1
 8002810:	4619      	mov	r1, r3
 8002812:	4622      	mov	r2, r4
 8002814:	4b50      	ldr	r3, [pc, #320]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002816:	e9d3 3400 	ldrd	r3, r4, [r3]
 800281a:	f107 0008 	add.w	r0, r7, #8
 800281e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002822:	e9cd 1200 	strd	r1, r2, [sp]
 8002826:	4642      	mov	r2, r8
 8002828:	464b      	mov	r3, r9
 800282a:	4953      	ldr	r1, [pc, #332]	; (8002978 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800282c:	f005 fa04 	bl	8007c38 <siprintf>
 8002830:	4603      	mov	r3, r0
 8002832:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
					 Z_scaled);
			 HAL_UART_Transmit_IT(&huart2, data, size);
 8002836:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800283a:	f107 0308 	add.w	r3, r7, #8
 800283e:	4619      	mov	r1, r3
 8002840:	484e      	ldr	r0, [pc, #312]	; (800297c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002842:	f003 fc12 	bl	800606a <HAL_UART_Transmit_IT>
			}
		}

		// 7 - segment display
		if (htim == &htim1) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4d      	ldr	r2, [pc, #308]	; (8002980 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 8222 	bne.w	8002c94 <HAL_TIM_PeriodElapsedCallback+0x59c>
			// diode color
			get_color((double)temperature / 16);
 8002850:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe5d 	bl	8000514 <__aeabi_ui2d>
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	4b45      	ldr	r3, [pc, #276]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002860:	f7fd fffc 	bl	800085c <__aeabi_ddiv>
 8002864:	4603      	mov	r3, r0
 8002866:	460c      	mov	r4, r1
 8002868:	ec44 3b17 	vmov	d7, r3, r4
 800286c:	eeb0 0a47 	vmov.f32	s0, s14
 8002870:	eef0 0a67 	vmov.f32	s1, s15
 8002874:	f7fe fd1a 	bl	80012ac <get_color>

			TimerCnt++;
 8002878:	4b42      	ldr	r3, [pc, #264]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	4a41      	ldr	r2, [pc, #260]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002880:	6013      	str	r3, [r2, #0]
			if (TimerCnt >= 100) {
 8002882:	4b40      	ldr	r3, [pc, #256]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b63      	cmp	r3, #99	; 0x63
 8002888:	f340 80a1 	ble.w	80029ce <HAL_TIM_PeriodElapsedCallback+0x2d6>
				TimerCnt = 0;
 800288c:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
				// pick value to display
				switch(ButtonCnt) {
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d023      	beq.n	80028e2 <HAL_TIM_PeriodElapsedCallback+0x1ea>
 800289a:	2b02      	cmp	r3, #2
 800289c:	d07e      	beq.n	800299c <HAL_TIM_PeriodElapsedCallback+0x2a4>
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f040 8095 	bne.w	80029ce <HAL_TIM_PeriodElapsedCallback+0x2d6>
					case 0:
						number = (3.3 * (double)ADCDMABuff[0] / 4.095);
 80028a4:	4b2d      	ldr	r3, [pc, #180]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe33 	bl	8000514 <__aeabi_ui2d>
 80028ae:	a322      	add	r3, pc, #136	; (adr r3, 8002938 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fea8 	bl	8000608 <__aeabi_dmul>
 80028b8:	4603      	mov	r3, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	4618      	mov	r0, r3
 80028be:	4621      	mov	r1, r4
 80028c0:	a31f      	add	r3, pc, #124	; (adr r3, 8002940 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fd ffc9 	bl	800085c <__aeabi_ddiv>
 80028ca:	4603      	mov	r3, r0
 80028cc:	460c      	mov	r4, r1
 80028ce:	4a2f      	ldr	r2, [pc, #188]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x294>)
 80028d0:	e9c2 3400 	strd	r3, r4, [r2]
						DECIMAL_POINT_Z_FLAG = 0;
 80028d4:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	801a      	strh	r2, [r3, #0]
						DECIMAL_POINT_TEMP_FLAG = 0;
 80028da:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	801a      	strh	r2, [r3, #0]
						break;
 80028e0:	e075      	b.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x2d6>
					case 1:
						number = 100 * (double)temperature / 16;
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe14 	bl	8000514 <__aeabi_ui2d>
 80028ec:	f04f 0200 	mov.w	r2, #0
 80028f0:	4b29      	ldr	r3, [pc, #164]	; (8002998 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80028f2:	f7fd fe89 	bl	8000608 <__aeabi_dmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	4618      	mov	r0, r3
 80028fc:	4621      	mov	r1, r4
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002904:	f7fd ffaa 	bl	800085c <__aeabi_ddiv>
 8002908:	4603      	mov	r3, r0
 800290a:	460c      	mov	r4, r1
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_TIM_PeriodElapsedCallback+0x294>)
 800290e:	e9c2 3400 	strd	r3, r4, [r2]
						DECIMAL_POINT_Z_FLAG = 0;
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002914:	2200      	movs	r2, #0
 8002916:	801a      	strh	r2, [r3, #0]
						DECIMAL_POINT_TEMP_FLAG = 1;
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800291a:	2201      	movs	r2, #1
 800291c:	801a      	strh	r2, [r3, #0]
						break;
 800291e:	e056      	b.n	80029ce <HAL_TIM_PeriodElapsedCallback+0x2d6>
 8002920:	5c28f5c3 	.word	0x5c28f5c3
 8002924:	400bc28f 	.word	0x400bc28f
 8002928:	00000000 	.word	0x00000000
 800292c:	406fe000 	.word	0x406fe000
 8002930:	66666666 	.word	0x66666666
 8002934:	3ffa6666 	.word	0x3ffa6666
 8002938:	66666666 	.word	0x66666666
 800293c:	400a6666 	.word	0x400a6666
 8002940:	ae147ae1 	.word	0xae147ae1
 8002944:	40106147 	.word	0x40106147
 8002948:	00000000 	.word	0x00000000
 800294c:	40affe00 	.word	0x40affe00
 8002950:	200003b8 	.word	0x200003b8
 8002954:	200005d0 	.word	0x200005d0
 8002958:	20000588 	.word	0x20000588
 800295c:	200002e8 	.word	0x200002e8
 8002960:	20000200 	.word	0x20000200
 8002964:	200003f8 	.word	0x200003f8
 8002968:	200005d4 	.word	0x200005d4
 800296c:	20000370 	.word	0x20000370
 8002970:	200003b4 	.word	0x200003b4
 8002974:	40300000 	.word	0x40300000
 8002978:	0800af6c 	.word	0x0800af6c
 800297c:	200006d4 	.word	0x200006d4
 8002980:	20000590 	.word	0x20000590
 8002984:	20000208 	.word	0x20000208
 8002988:	200002e0 	.word	0x200002e0
 800298c:	20000210 	.word	0x20000210
 8002990:	20000204 	.word	0x20000204
 8002994:	20000206 	.word	0x20000206
 8002998:	40590000 	.word	0x40590000
					case 2:
						number = 1000 * fabs(Z_scaled);
 800299c:	4bc0      	ldr	r3, [pc, #768]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 800299e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029a2:	461d      	mov	r5, r3
 80029a4:	f024 4600 	bic.w	r6, r4, #2147483648	; 0x80000000
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	4bbd      	ldr	r3, [pc, #756]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80029ae:	4628      	mov	r0, r5
 80029b0:	4631      	mov	r1, r6
 80029b2:	f7fd fe29 	bl	8000608 <__aeabi_dmul>
 80029b6:	4603      	mov	r3, r0
 80029b8:	460c      	mov	r4, r1
 80029ba:	4abb      	ldr	r2, [pc, #748]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80029bc:	e9c2 3400 	strd	r3, r4, [r2]
						DECIMAL_POINT_Z_FLAG = 1;
 80029c0:	4bba      	ldr	r3, [pc, #744]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	801a      	strh	r2, [r3, #0]
						DECIMAL_POINT_TEMP_FLAG = 0;
 80029c6:	4bba      	ldr	r3, [pc, #744]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	801a      	strh	r2, [r3, #0]
						break;
 80029cc:	bf00      	nop
				}

			}
			thousand = (int) number / 1000;
 80029ce:	4bb6      	ldr	r3, [pc, #728]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80029d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029d4:	4618      	mov	r0, r3
 80029d6:	4621      	mov	r1, r4
 80029d8:	f7fe f8c6 	bl	8000b68 <__aeabi_d2iz>
 80029dc:	4603      	mov	r3, r0
 80029de:	4ab5      	ldr	r2, [pc, #724]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80029e0:	fb82 1203 	smull	r1, r2, r2, r3
 80029e4:	1192      	asrs	r2, r2, #6
 80029e6:	17db      	asrs	r3, r3, #31
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	4ab3      	ldr	r2, [pc, #716]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80029ec:	6013      	str	r3, [r2, #0]
			hundred  = (int) (number - thousand * 1000) / 100;
 80029ee:	4bae      	ldr	r3, [pc, #696]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 80029f0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029f4:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd97 	bl	8000534 <__aeabi_i2d>
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	4629      	mov	r1, r5
 8002a0e:	f7fd fc43 	bl	8000298 <__aeabi_dsub>
 8002a12:	4603      	mov	r3, r0
 8002a14:	460c      	mov	r4, r1
 8002a16:	4618      	mov	r0, r3
 8002a18:	4621      	mov	r1, r4
 8002a1a:	f7fe f8a5 	bl	8000b68 <__aeabi_d2iz>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4aa6      	ldr	r2, [pc, #664]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8002a22:	fb82 1203 	smull	r1, r2, r2, r3
 8002a26:	1152      	asrs	r2, r2, #5
 8002a28:	17db      	asrs	r3, r3, #31
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	4aa4      	ldr	r2, [pc, #656]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002a2e:	6013      	str	r3, [r2, #0]
			ten = (int) (number - thousand * 1000 - hundred * 100) / 10;
 8002a30:	4b9d      	ldr	r3, [pc, #628]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002a32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a36:	4ba0      	ldr	r3, [pc, #640]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fd76 	bl	8000534 <__aeabi_i2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	4629      	mov	r1, r5
 8002a50:	f7fd fc22 	bl	8000298 <__aeabi_dsub>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	4625      	mov	r5, r4
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4b98      	ldr	r3, [pc, #608]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2264      	movs	r2, #100	; 0x64
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fd fd64 	bl	8000534 <__aeabi_i2d>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4620      	mov	r0, r4
 8002a72:	4629      	mov	r1, r5
 8002a74:	f7fd fc10 	bl	8000298 <__aeabi_dsub>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	4621      	mov	r1, r4
 8002a80:	f7fe f872 	bl	8000b68 <__aeabi_d2iz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a8f      	ldr	r2, [pc, #572]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	1092      	asrs	r2, r2, #2
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	4a8d      	ldr	r2, [pc, #564]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002a94:	6013      	str	r3, [r2, #0]
			one = (int) (number - thousand * 1000 - hundred * 100 - ten * 10);
 8002a96:	4b84      	ldr	r3, [pc, #528]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002a98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a9c:	4b86      	ldr	r3, [pc, #536]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd43 	bl	8000534 <__aeabi_i2d>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fbef 	bl	8000298 <__aeabi_dsub>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	4625      	mov	r5, r4
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2264      	movs	r2, #100	; 0x64
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd31 	bl	8000534 <__aeabi_i2d>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fbdd 	bl	8000298 <__aeabi_dsub>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	460c      	mov	r4, r1
 8002ae2:	4625      	mov	r5, r4
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	4b78      	ldr	r3, [pc, #480]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd1e 	bl	8000534 <__aeabi_i2d>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fbca 	bl	8000298 <__aeabi_dsub>
 8002b04:	4603      	mov	r3, r0
 8002b06:	460c      	mov	r4, r1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	f7fe f82c 	bl	8000b68 <__aeabi_d2iz>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002b14:	601a      	str	r2, [r3, #0]

			segment++;
 8002b16:	4b6e      	ldr	r3, [pc, #440]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a6c      	ldr	r2, [pc, #432]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002b1e:	6013      	str	r3, [r2, #0]
			if (segment >= 4) {
 8002b20:	4b6b      	ldr	r3, [pc, #428]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	dd02      	ble.n	8002b2e <HAL_TIM_PeriodElapsedCallback+0x436>
				segment = 0;
 8002b28:	4b69      	ldr	r3, [pc, #420]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
			}

			switch(segment) {
 8002b2e:	4b68      	ldr	r3, [pc, #416]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	f200 80ae 	bhi.w	8002c94 <HAL_TIM_PeriodElapsedCallback+0x59c>
 8002b38:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8002b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3e:	bf00      	nop
 8002b40:	08002b51 	.word	0x08002b51
 8002b44:	08002bad 	.word	0x08002bad
 8002b48:	08002c09 	.word	0x08002c09
 8002b4c:	08002c4f 	.word	0x08002c4f
				case 0:
					digit(thousand);
 8002b50:	4b59      	ldr	r3, [pc, #356]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fd23 	bl	80015a0 <digit>
					if (DECIMAL_POINT_Z_FLAG == 1) {
 8002b5a:	4b54      	ldr	r3, [pc, #336]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0x478>
						HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_SET);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2180      	movs	r1, #128	; 0x80
 8002b68:	485a      	ldr	r0, [pc, #360]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002b6a:	f001 ff3f 	bl	80049ec <HAL_GPIO_WritePin>
 8002b6e:	e004      	b.n	8002b7a <HAL_TIM_PeriodElapsedCallback+0x482>
					} else {
						HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	4857      	ldr	r0, [pc, #348]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002b76:	f001 ff39 	bl	80049ec <HAL_GPIO_WritePin>
					}
					HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b80:	4854      	ldr	r0, [pc, #336]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002b82:	f001 ff33 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_SET);
 8002b86:	2201      	movs	r2, #1
 8002b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b8c:	4851      	ldr	r0, [pc, #324]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002b8e:	f001 ff2d 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_SET);
 8002b92:	2201      	movs	r2, #1
 8002b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b98:	484e      	ldr	r0, [pc, #312]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002b9a:	f001 ff27 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_SET);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba4:	484b      	ldr	r0, [pc, #300]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002ba6:	f001 ff21 	bl	80049ec <HAL_GPIO_WritePin>

					break;
 8002baa:	e073      	b.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x59c>
				case 1:
					digit(hundred);
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fe fcf5 	bl	80015a0 <digit>
					if (DECIMAL_POINT_TEMP_FLAG) {
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 8002bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_TIM_PeriodElapsedCallback+0x4d4>
						HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_SET);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	4843      	ldr	r0, [pc, #268]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002bc6:	f001 ff11 	bl	80049ec <HAL_GPIO_WritePin>
 8002bca:	e004      	b.n	8002bd6 <HAL_TIM_PeriodElapsedCallback+0x4de>
					} else {
						HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	4840      	ldr	r0, [pc, #256]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002bd2:	f001 ff0b 	bl	80049ec <HAL_GPIO_WritePin>
					}
					HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002bdc:	483d      	ldr	r0, [pc, #244]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002bde:	f001 ff05 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_RESET);
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be8:	483a      	ldr	r0, [pc, #232]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002bea:	f001 feff 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_SET);
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf4:	4837      	ldr	r0, [pc, #220]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002bf6:	f001 fef9 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_SET);
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c00:	4834      	ldr	r0, [pc, #208]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c02:	f001 fef3 	bl	80049ec <HAL_GPIO_WritePin>
					break;
 8002c06:	e045      	b.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x59c>
				case 2:
					HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	4831      	ldr	r0, [pc, #196]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c0e:	f001 feed 	bl	80049ec <HAL_GPIO_WritePin>
					digit(ten);
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fcc2 	bl	80015a0 <digit>
					HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_SET);
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c22:	482c      	ldr	r0, [pc, #176]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c24:	f001 fee2 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_SET);
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c2e:	4829      	ldr	r0, [pc, #164]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c30:	f001 fedc 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_RESET);
 8002c34:	2200      	movs	r2, #0
 8002c36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c3a:	4826      	ldr	r0, [pc, #152]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c3c:	f001 fed6 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_SET);
 8002c40:	2201      	movs	r2, #1
 8002c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c46:	4823      	ldr	r0, [pc, #140]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c48:	f001 fed0 	bl	80049ec <HAL_GPIO_WritePin>
					break;
 8002c4c:	e022      	b.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x59c>
				case 3:
					HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, GPIO_PIN_RESET);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	4820      	ldr	r0, [pc, #128]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c54:	f001 feca 	bl	80049ec <HAL_GPIO_WritePin>
					digit(one);
 8002c58:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fc9f 	bl	80015a0 <digit>
					HAL_GPIO_WritePin(COM1_GPIO_Port, COM1_Pin, GPIO_PIN_SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c68:	481a      	ldr	r0, [pc, #104]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c6a:	f001 febf 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM2_GPIO_Port, COM2_Pin, GPIO_PIN_SET);
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c74:	4817      	ldr	r0, [pc, #92]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c76:	f001 feb9 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM3_GPIO_Port, COM3_Pin, GPIO_PIN_SET);
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c80:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c82:	f001 feb3 	bl	80049ec <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COM4_GPIO_Port, COM4_Pin, GPIO_PIN_RESET);
 8002c86:	2200      	movs	r2, #0
 8002c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8c:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002c8e:	f001 fead 	bl	80049ec <HAL_GPIO_WritePin>
					break;
 8002c92:	bf00      	nop
			}
		}
	}
 8002c94:	bf00      	nop
 8002c96:	3774      	adds	r7, #116	; 0x74
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000588 	.word	0x20000588
 8002ca4:	408f4000 	.word	0x408f4000
 8002ca8:	20000210 	.word	0x20000210
 8002cac:	20000204 	.word	0x20000204
 8002cb0:	20000206 	.word	0x20000206
 8002cb4:	10624dd3 	.word	0x10624dd3
 8002cb8:	20000218 	.word	0x20000218
 8002cbc:	51eb851f 	.word	0x51eb851f
 8002cc0:	2000021c 	.word	0x2000021c
 8002cc4:	66666667 	.word	0x66666667
 8002cc8:	20000220 	.word	0x20000220
 8002ccc:	20000224 	.word	0x20000224
 8002cd0:	20000228 	.word	0x20000228
 8002cd4:	40020800 	.word	0x40020800

08002cd8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <MX_USART2_UART_Init+0x50>)
 8002ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002cfe:	220c      	movs	r2, #12
 8002d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_USART2_UART_Init+0x4c>)
 8002d10:	f003 f95e 	bl	8005fd0 <HAL_UART_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d1a:	f7fe ff9d 	bl	8001c58 <Error_Handler>
  }

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200006d4 	.word	0x200006d4
 8002d28:	40004400 	.word	0x40004400

08002d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a4b      	ldr	r2, [pc, #300]	; (8002e78 <HAL_UART_MspInit+0x14c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f040 8090 	bne.w	8002e70 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	4b49      	ldr	r3, [pc, #292]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	4a48      	ldr	r2, [pc, #288]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_UART_MspInit+0x150>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d88:	230c      	movs	r3, #12
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d94:	2303      	movs	r3, #3
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d98:	2307      	movs	r3, #7
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4837      	ldr	r0, [pc, #220]	; (8002e80 <HAL_UART_MspInit+0x154>)
 8002da4:	f001 fc88 	bl	80046b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002da8:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002daa:	4a37      	ldr	r2, [pc, #220]	; (8002e88 <HAL_UART_MspInit+0x15c>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002db0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dca:	4b2e      	ldr	r3, [pc, #184]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dd0:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ddc:	4b29      	ldr	r3, [pc, #164]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002de8:	4826      	ldr	r0, [pc, #152]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dea:	f001 f8d5 	bl	8003f98 <HAL_DMA_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002df4:	f7fe ff30 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dfe:	4a21      	ldr	r2, [pc, #132]	; (8002e84 <HAL_UART_MspInit+0x158>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e06:	4a22      	ldr	r2, [pc, #136]	; (8002e90 <HAL_UART_MspInit+0x164>)
 8002e08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e14:	2240      	movs	r2, #64	; 0x40
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e26:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2c:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e38:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3e:	4b13      	ldr	r3, [pc, #76]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e44:	4811      	ldr	r0, [pc, #68]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e46:	f001 f8a7 	bl	8003f98 <HAL_DMA_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8002e50:	f7fe ff02 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5a:	4a0c      	ldr	r2, [pc, #48]	; (8002e8c <HAL_UART_MspInit+0x160>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2100      	movs	r1, #0
 8002e64:	2026      	movs	r0, #38	; 0x26
 8002e66:	f001 f860 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e6a:	2026      	movs	r0, #38	; 0x26
 8002e6c:	f001 f879 	bl	8003f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40004400 	.word	0x40004400
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020000 	.word	0x40020000
 8002e84:	20000614 	.word	0x20000614
 8002e88:	40026088 	.word	0x40026088
 8002e8c:	20000674 	.word	0x20000674
 8002e90:	400260a0 	.word	0x400260a0

08002e94 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */
extern uint8_t Received;
extern int start_transmission;
extern int ButtonCnt;
extern int light_FIFO[LENGTH_OF_MEASURE_FIFO];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e94:	b5b0      	push	{r4, r5, r7, lr}
 8002e96:	b096      	sub	sp, #88	; 0x58
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
	uint8_t Data[50]; // Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; // Rozmiar wysylanej wiadomosci
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

	switch (Received) {
 8002ea2:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_UART_RxCpltCallback+0x208>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	3b30      	subs	r3, #48	; 0x30
 8002ea8:	2b23      	cmp	r3, #35	; 0x23
 8002eaa:	f200 80d8 	bhi.w	800305e <HAL_UART_RxCpltCallback+0x1ca>
 8002eae:	a201      	add	r2, pc, #4	; (adr r2, 8002eb4 <HAL_UART_RxCpltCallback+0x20>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002f45 	.word	0x08002f45
 8002eb8:	08002f71 	.word	0x08002f71
 8002ebc:	08002f9d 	.word	0x08002f9d
 8002ec0:	0800305f 	.word	0x0800305f
 8002ec4:	0800305f 	.word	0x0800305f
 8002ec8:	0800305f 	.word	0x0800305f
 8002ecc:	0800305f 	.word	0x0800305f
 8002ed0:	0800305f 	.word	0x0800305f
 8002ed4:	0800305f 	.word	0x0800305f
 8002ed8:	0800305f 	.word	0x0800305f
 8002edc:	0800305f 	.word	0x0800305f
 8002ee0:	0800305f 	.word	0x0800305f
 8002ee4:	0800305f 	.word	0x0800305f
 8002ee8:	0800305f 	.word	0x0800305f
 8002eec:	0800305f 	.word	0x0800305f
 8002ef0:	0800305f 	.word	0x0800305f
 8002ef4:	0800305f 	.word	0x0800305f
 8002ef8:	0800305f 	.word	0x0800305f
 8002efc:	0800305f 	.word	0x0800305f
 8002f00:	0800305f 	.word	0x0800305f
 8002f04:	0800305f 	.word	0x0800305f
 8002f08:	0800305f 	.word	0x0800305f
 8002f0c:	0800305f 	.word	0x0800305f
 8002f10:	0800305f 	.word	0x0800305f
 8002f14:	0800305f 	.word	0x0800305f
 8002f18:	0800305f 	.word	0x0800305f
 8002f1c:	0800305f 	.word	0x0800305f
 8002f20:	0800305f 	.word	0x0800305f
 8002f24:	0800305f 	.word	0x0800305f
 8002f28:	08003009 	.word	0x08003009
 8002f2c:	0800305f 	.word	0x0800305f
 8002f30:	0800305f 	.word	0x0800305f
 8002f34:	08002fbd 	.word	0x08002fbd
 8002f38:	0800305f 	.word	0x0800305f
 8002f3c:	0800305f 	.word	0x0800305f
 8002f40:	08002fdd 	.word	0x08002fdd
		case '0':
			ButtonCnt = 0;
 8002f44:	4b56      	ldr	r3, [pc, #344]	; (80030a0 <HAL_UART_RxCpltCallback+0x20c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
			size = sprintf(Data, "Display: Light value\n\r");
 8002f4a:	f107 030c 	add.w	r3, r7, #12
 8002f4e:	4a55      	ldr	r2, [pc, #340]	; (80030a4 <HAL_UART_RxCpltCallback+0x210>)
 8002f50:	461c      	mov	r4, r3
 8002f52:	4615      	mov	r5, r2
 8002f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f58:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f5c:	6020      	str	r0, [r4, #0]
 8002f5e:	3404      	adds	r4, #4
 8002f60:	8021      	strh	r1, [r4, #0]
 8002f62:	3402      	adds	r4, #2
 8002f64:	0c0b      	lsrs	r3, r1, #16
 8002f66:	7023      	strb	r3, [r4, #0]
 8002f68:	2316      	movs	r3, #22
 8002f6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			break;
 8002f6e:	e083      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>
		case '1':
			ButtonCnt = 1;
 8002f70:	4b4b      	ldr	r3, [pc, #300]	; (80030a0 <HAL_UART_RxCpltCallback+0x20c>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
			size = sprintf(Data, "Display: Temperature\n\r");
 8002f76:	f107 030c 	add.w	r3, r7, #12
 8002f7a:	4a4b      	ldr	r2, [pc, #300]	; (80030a8 <HAL_UART_RxCpltCallback+0x214>)
 8002f7c:	461c      	mov	r4, r3
 8002f7e:	4615      	mov	r5, r2
 8002f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002f88:	6020      	str	r0, [r4, #0]
 8002f8a:	3404      	adds	r4, #4
 8002f8c:	8021      	strh	r1, [r4, #0]
 8002f8e:	3402      	adds	r4, #2
 8002f90:	0c0b      	lsrs	r3, r1, #16
 8002f92:	7023      	strb	r3, [r4, #0]
 8002f94:	2316      	movs	r3, #22
 8002f96:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			break;
 8002f9a:	e06d      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>
		case '2':
			ButtonCnt = 2;
 8002f9c:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <HAL_UART_RxCpltCallback+0x20c>)
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
			size = sprintf(Data, "Display: Pressure\n\r");
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4a41      	ldr	r2, [pc, #260]	; (80030ac <HAL_UART_RxCpltCallback+0x218>)
 8002fa8:	461c      	mov	r4, r3
 8002faa:	4615      	mov	r5, r2
 8002fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fb0:	682b      	ldr	r3, [r5, #0]
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	2313      	movs	r3, #19
 8002fb6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			break;
 8002fba:	e05d      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>
		case 'P':
			size = sprintf(Data, "Transmission STOP\n\r");
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4a3b      	ldr	r2, [pc, #236]	; (80030b0 <HAL_UART_RxCpltCallback+0x21c>)
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	4615      	mov	r5, r2
 8002fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fca:	682b      	ldr	r3, [r5, #0]
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	2313      	movs	r3, #19
 8002fd0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			start_transmission = 0;
 8002fd4:	4b37      	ldr	r3, [pc, #220]	; (80030b4 <HAL_UART_RxCpltCallback+0x220>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
			break;
 8002fda:	e04d      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>
		case 'S':
			size = sprintf(Data, "Transmission STARTED\n\r");
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	4a35      	ldr	r2, [pc, #212]	; (80030b8 <HAL_UART_RxCpltCallback+0x224>)
 8002fe2:	461c      	mov	r4, r3
 8002fe4:	4615      	mov	r5, r2
 8002fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002fee:	6020      	str	r0, [r4, #0]
 8002ff0:	3404      	adds	r4, #4
 8002ff2:	8021      	strh	r1, [r4, #0]
 8002ff4:	3402      	adds	r4, #2
 8002ff6:	0c0b      	lsrs	r3, r1, #16
 8002ff8:	7023      	strb	r3, [r4, #0]
 8002ffa:	2316      	movs	r3, #22
 8002ffc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			start_transmission = 1;
 8003000:	4b2c      	ldr	r3, [pc, #176]	; (80030b4 <HAL_UART_RxCpltCallback+0x220>)
 8003002:	2201      	movs	r2, #1
 8003004:	601a      	str	r2, [r3, #0]
			break;
 8003006:	e037      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>
		case 'M':
			; // empty statement to get past "a label can only be part of a statement and a declaration is not a statement"
			int sum_light=0;
 8003008:	2300      	movs	r3, #0
 800300a:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i<LENGTH_OF_MEASURE_FIFO; i++) {
 800300c:	2300      	movs	r3, #0
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003010:	e009      	b.n	8003026 <HAL_UART_RxCpltCallback+0x192>
				sum_light = sum_light + light_FIFO[i];
 8003012:	4a2a      	ldr	r2, [pc, #168]	; (80030bc <HAL_UART_RxCpltCallback+0x228>)
 8003014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800301c:	4413      	add	r3, r2
 800301e:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i<LENGTH_OF_MEASURE_FIFO; i++) {
 8003020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003022:	3301      	adds	r3, #1
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	2b63      	cmp	r3, #99	; 0x63
 800302a:	ddf2      	ble.n	8003012 <HAL_UART_RxCpltCallback+0x17e>
			}
			double avg_light= (double) (sum_light / LENGTH_OF_MEASURE_FIFO);
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	4a24      	ldr	r2, [pc, #144]	; (80030c0 <HAL_UART_RxCpltCallback+0x22c>)
 8003030:	fb82 1203 	smull	r1, r2, r2, r3
 8003034:	1152      	asrs	r2, r2, #5
 8003036:	17db      	asrs	r3, r3, #31
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd fa7a 	bl	8000534 <__aeabi_i2d>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
			size = sprintf(Data, "Average lMmight value = %.3f\n\r", avg_light);
 8003048:	f107 000c 	add.w	r0, r7, #12
 800304c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003050:	491c      	ldr	r1, [pc, #112]	; (80030c4 <HAL_UART_RxCpltCallback+0x230>)
 8003052:	f004 fdf1 	bl	8007c38 <siprintf>
 8003056:	4603      	mov	r3, r0
 8003058:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			break;
 800305c:	e00c      	b.n	8003078 <HAL_UART_RxCpltCallback+0x1e4>

		default:
			size = sprintf(Data, "Unknown char received: %c\n\r", Received);
 800305e:	4b0f      	ldr	r3, [pc, #60]	; (800309c <HAL_UART_RxCpltCallback+0x208>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4917      	ldr	r1, [pc, #92]	; (80030c8 <HAL_UART_RxCpltCallback+0x234>)
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fde4 	bl	8007c38 <siprintf>
 8003070:	4603      	mov	r3, r0
 8003072:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			break;
 8003076:	bf00      	nop
	}
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)Data, size);
 8003078:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	4619      	mov	r1, r3
 8003082:	4812      	ldr	r0, [pc, #72]	; (80030cc <HAL_UART_RxCpltCallback+0x238>)
 8003084:	f002 fff1 	bl	800606a <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, &Received, 1);
 8003088:	2201      	movs	r2, #1
 800308a:	4904      	ldr	r1, [pc, #16]	; (800309c <HAL_UART_RxCpltCallback+0x208>)
 800308c:	480f      	ldr	r0, [pc, #60]	; (80030cc <HAL_UART_RxCpltCallback+0x238>)
 800308e:	f003 f831 	bl	80060f4 <HAL_UART_Receive_IT>
}
 8003092:	bf00      	nop
 8003094:	3758      	adds	r7, #88	; 0x58
 8003096:	46bd      	mov	sp, r7
 8003098:	bdb0      	pop	{r4, r5, r7, pc}
 800309a:	bf00      	nop
 800309c:	200002e4 	.word	0x200002e4
 80030a0:	200002e0 	.word	0x200002e0
 80030a4:	0800af8c 	.word	0x0800af8c
 80030a8:	0800afa4 	.word	0x0800afa4
 80030ac:	0800afbc 	.word	0x0800afbc
 80030b0:	0800afd0 	.word	0x0800afd0
 80030b4:	20000370 	.word	0x20000370
 80030b8:	0800afe4 	.word	0x0800afe4
 80030bc:	200003f8 	.word	0x200003f8
 80030c0:	51eb851f 	.word	0x51eb851f
 80030c4:	0800affc 	.word	0x0800affc
 80030c8:	0800b01c 	.word	0x0800b01c
 80030cc:	200006d4 	.word	0x200006d4

080030d0 <Reset_Handler>:
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopFillZerobss+0x14>
 80030d4:	2100      	movs	r1, #0
 80030d6:	e003      	b.n	80030e0 <LoopCopyDataInit>

080030d8 <CopyDataInit>:
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <LoopFillZerobss+0x18>)
 80030da:	585b      	ldr	r3, [r3, r1]
 80030dc:	5043      	str	r3, [r0, r1]
 80030de:	3104      	adds	r1, #4

080030e0 <LoopCopyDataInit>:
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <LoopFillZerobss+0x1c>)
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <LoopFillZerobss+0x20>)
 80030e4:	1842      	adds	r2, r0, r1
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3f6      	bcc.n	80030d8 <CopyDataInit>
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <LoopFillZerobss+0x24>)
 80030ec:	e002      	b.n	80030f4 <LoopFillZerobss>

080030ee <FillZerobss>:
 80030ee:	2300      	movs	r3, #0
 80030f0:	f842 3b04 	str.w	r3, [r2], #4

080030f4 <LoopFillZerobss>:
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <LoopFillZerobss+0x28>)
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d3f9      	bcc.n	80030ee <FillZerobss>
 80030fa:	f7ff f933 	bl	8002364 <SystemInit>
 80030fe:	f003 fe07 	bl	8006d10 <__libc_init_array>
 8003102:	f7fe fcad 	bl	8001a60 <main>
 8003106:	4770      	bx	lr
 8003108:	20020000 	.word	0x20020000
 800310c:	0800b388 	.word	0x0800b388
 8003110:	20000000 	.word	0x20000000
 8003114:	200001dc 	.word	0x200001dc
 8003118:	200001e0 	.word	0x200001e0
 800311c:	2000071c 	.word	0x2000071c

08003120 <DMA1_Stream0_IRQHandler>:
 8003120:	e7fe      	b.n	8003120 <DMA1_Stream0_IRQHandler>
	...

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_Init+0x40>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0d      	ldr	r2, [pc, #52]	; (8003164 <HAL_Init+0x40>)
 800312e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HAL_Init+0x40>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <HAL_Init+0x40>)
 800313a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003140:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HAL_Init+0x40>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_Init+0x40>)
 8003146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314c:	2003      	movs	r0, #3
 800314e:	f000 fee1 	bl	8003f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f808 	bl	8003168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003158:	f7fe ffa6 	bl	80020a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023c00 	.word	0x40023c00

08003168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003170:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_InitTick+0x54>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_InitTick+0x58>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003182:	fbb2 f3f3 	udiv	r3, r2, r3
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fef9 	bl	8003f7e <HAL_SYSTICK_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e00e      	b.n	80031b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0f      	cmp	r3, #15
 800319a:	d80a      	bhi.n	80031b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800319c:	2200      	movs	r2, #0
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f000 fec1 	bl	8003f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a8:	4a06      	ldr	r2, [pc, #24]	; (80031c4 <HAL_InitTick+0x5c>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	20000000 	.word	0x20000000
 80031c0:	20000008 	.word	0x20000008
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <HAL_IncTick+0x20>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b06      	ldr	r3, [pc, #24]	; (80031ec <HAL_IncTick+0x24>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4413      	add	r3, r2
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_IncTick+0x24>)
 80031da:	6013      	str	r3, [r2, #0]
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000008 	.word	0x20000008
 80031ec:	20000714 	.word	0x20000714

080031f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return uwTick;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_GetTick+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000714 	.word	0x20000714

08003208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7ff ffee 	bl	80031f0 <HAL_GetTick>
 8003214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d005      	beq.n	800322e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003222:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_Delay+0x40>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322e:	bf00      	nop
 8003230:	f7ff ffde 	bl	80031f0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d8f7      	bhi.n	8003230 <HAL_Delay+0x28>
  {
  }
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000008 	.word	0x20000008

0800324c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e033      	b.n	80032ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd ff26 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	2b00      	cmp	r3, #0
 8003288:	d118      	bne.n	80032bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003292:	f023 0302 	bic.w	r3, r3, #2
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fbe0 	bl	8003a64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f023 0303 	bic.w	r3, r3, #3
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
 80032ba:	e001      	b.n	80032c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f003 0320 	and.w	r3, r3, #32
 8003302:	2b20      	cmp	r3, #32
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d049      	beq.n	80033a8 <HAL_ADC_IRQHandler+0xd6>
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d046      	beq.n	80033a8 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d105      	bne.n	8003332 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d12b      	bne.n	8003398 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003344:	2b00      	cmp	r3, #0
 8003346:	d127      	bne.n	8003398 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003360:	2b00      	cmp	r3, #0
 8003362:	d119      	bne.n	8003398 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0220 	bic.w	r2, r2, #32
 8003372:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0201 	orr.w	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd ff11 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f06f 0212 	mvn.w	r2, #18
 80033a6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	2b80      	cmp	r3, #128	; 0x80
 80033ca:	bf0c      	ite	eq
 80033cc:	2301      	moveq	r3, #1
 80033ce:	2300      	movne	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d057      	beq.n	800348a <HAL_ADC_IRQHandler+0x1b8>
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d054      	beq.n	800348a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d105      	bne.n	80033f8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d139      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800341e:	2b00      	cmp	r3, #0
 8003420:	d12b      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d124      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11d      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003454:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d105      	bne.n	800347a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0201 	orr.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fc70 	bl	8003d60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 020c 	mvn.w	r2, #12
 8003488:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b01      	cmp	r3, #1
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d017      	beq.n	80034ec <HAL_ADC_IRQHandler+0x21a>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d014      	beq.n	80034ec <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10d      	bne.n	80034ec <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fe fbad 	bl	8001c3c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0201 	mvn.w	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800350c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d015      	beq.n	800354c <HAL_ADC_IRQHandler+0x27a>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d012      	beq.n	800354c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0220 	mvn.w	r2, #32
 800353a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f8f4 	bl	800372a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f06f 0220 	mvn.w	r2, #32
 800354a:	601a      	str	r2, [r3, #0]
  }
}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_ADC_Start_DMA+0x1e>
 800356e:	2302      	movs	r3, #2
 8003570:	e0b1      	b.n	80036d6 <HAL_ADC_Start_DMA+0x182>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b01      	cmp	r3, #1
 8003586:	d018      	beq.n	80035ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003598:	4b51      	ldr	r3, [pc, #324]	; (80036e0 <HAL_ADC_Start_DMA+0x18c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a51      	ldr	r2, [pc, #324]	; (80036e4 <HAL_ADC_Start_DMA+0x190>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	0c9a      	lsrs	r2, r3, #18
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035ac:	e002      	b.n	80035b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f9      	bne.n	80035ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 8085 	bne.w	80036d4 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d007      	beq.n	80035fc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d106      	bne.n	8003618 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f023 0206 	bic.w	r2, r3, #6
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
 8003616:	e002      	b.n	800361e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003626:	4b30      	ldr	r3, [pc, #192]	; (80036e8 <HAL_ADC_Start_DMA+0x194>)
 8003628:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_ADC_Start_DMA+0x198>)
 8003630:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	4a2e      	ldr	r2, [pc, #184]	; (80036f0 <HAL_ADC_Start_DMA+0x19c>)
 8003638:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	4a2d      	ldr	r2, [pc, #180]	; (80036f4 <HAL_ADC_Start_DMA+0x1a0>)
 8003640:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800364a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800365a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	334c      	adds	r3, #76	; 0x4c
 8003676:	4619      	mov	r1, r3
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f000 fd3a 	bl	80040f4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 031f 	and.w	r3, r3, #31
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10f      	bne.n	80036ac <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11c      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	e013      	b.n	80036d4 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a11      	ldr	r2, [pc, #68]	; (80036f8 <HAL_ADC_Start_DMA+0x1a4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d10e      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x180>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d107      	bne.n	80036d4 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036d2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000000 	.word	0x20000000
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	40012300 	.word	0x40012300
 80036ec:	08003c5d 	.word	0x08003c5d
 80036f0:	08003d17 	.word	0x08003d17
 80036f4:	08003d33 	.word	0x08003d33
 80036f8:	40012000 	.word	0x40012000

080036fc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800370a:	4618      	mov	r0, r3
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800374a:	2300      	movs	r3, #0
 800374c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_ADC_ConfigChannel+0x1c>
 8003758:	2302      	movs	r3, #2
 800375a:	e113      	b.n	8003984 <HAL_ADC_ConfigChannel+0x244>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b09      	cmp	r3, #9
 800376a:	d925      	bls.n	80037b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68d9      	ldr	r1, [r3, #12]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	b29b      	uxth	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	3b1e      	subs	r3, #30
 8003782:	2207      	movs	r2, #7
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	43da      	mvns	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	400a      	ands	r2, r1
 8003790:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68d9      	ldr	r1, [r3, #12]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	4603      	mov	r3, r0
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4403      	add	r3, r0
 80037aa:	3b1e      	subs	r3, #30
 80037ac:	409a      	lsls	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	e022      	b.n	80037fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	2207      	movs	r2, #7
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	43da      	mvns	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	400a      	ands	r2, r1
 80037da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6919      	ldr	r1, [r3, #16]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	4618      	mov	r0, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4403      	add	r3, r0
 80037f4:	409a      	lsls	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d824      	bhi.n	8003850 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	3b05      	subs	r3, #5
 8003818:	221f      	movs	r2, #31
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43da      	mvns	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	400a      	ands	r2, r1
 8003826:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b29b      	uxth	r3, r3
 8003834:	4618      	mov	r0, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4413      	add	r3, r2
 8003840:	3b05      	subs	r3, #5
 8003842:	fa00 f203 	lsl.w	r2, r0, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
 800384e:	e04c      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	d824      	bhi.n	80038a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	3b23      	subs	r3, #35	; 0x23
 800386a:	221f      	movs	r2, #31
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	b29b      	uxth	r3, r3
 8003886:	4618      	mov	r0, r3
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3b23      	subs	r3, #35	; 0x23
 8003894:	fa00 f203 	lsl.w	r2, r0, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
 80038a0:	e023      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b41      	subs	r3, #65	; 0x41
 80038b4:	221f      	movs	r2, #31
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43da      	mvns	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	400a      	ands	r2, r1
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	3b41      	subs	r3, #65	; 0x41
 80038de:	fa00 f203 	lsl.w	r2, r0, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ea:	4b29      	ldr	r3, [pc, #164]	; (8003990 <HAL_ADC_ConfigChannel+0x250>)
 80038ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a28      	ldr	r2, [pc, #160]	; (8003994 <HAL_ADC_ConfigChannel+0x254>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d10f      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1d8>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b12      	cmp	r3, #18
 80038fe:	d10b      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a1d      	ldr	r2, [pc, #116]	; (8003994 <HAL_ADC_ConfigChannel+0x254>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d12b      	bne.n	800397a <HAL_ADC_ConfigChannel+0x23a>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a1c      	ldr	r2, [pc, #112]	; (8003998 <HAL_ADC_ConfigChannel+0x258>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <HAL_ADC_ConfigChannel+0x1f4>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b11      	cmp	r3, #17
 8003932:	d122      	bne.n	800397a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <HAL_ADC_ConfigChannel+0x258>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d111      	bne.n	800397a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <HAL_ADC_ConfigChannel+0x25c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <HAL_ADC_ConfigChannel+0x260>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	0c9a      	lsrs	r2, r3, #18
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800396c:	e002      	b.n	8003974 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	3b01      	subs	r3, #1
 8003972:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f9      	bne.n	800396e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40012300 	.word	0x40012300
 8003994:	40012000 	.word	0x40012000
 8003998:	10000012 	.word	0x10000012
 800399c:	20000000 	.word	0x20000000
 80039a0:	431bde83 	.word	0x431bde83

080039a4 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_ADC_AnalogWDGConfig+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e04d      	b.n	8003a58 <HAL_ADC_AnalogWDGConfig+0xb4>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7c1b      	ldrb	r3, [r3, #16]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d108      	bne.n	80039de <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	e007      	b.n	80039ee <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ec:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80039fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a00:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	6852      	ldr	r2, [r2, #4]
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	6892      	ldr	r2, [r2, #8]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 021f 	bic.w	r2, r2, #31
 8003a36:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	4619      	mov	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a6c:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <ADC_Init+0x1f0>)
 8003a6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	021a      	lsls	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003abc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ade:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	4a58      	ldr	r2, [pc, #352]	; (8003c58 <ADC_Init+0x1f4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d022      	beq.n	8003b42 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b0a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6899      	ldr	r1, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	e00f      	b.n	8003b62 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0202 	bic.w	r2, r2, #2
 8003b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7e1b      	ldrb	r3, [r3, #24]
 8003b7c:	005a      	lsls	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01b      	beq.n	8003bc8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	035a      	lsls	r2, r3, #13
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e007      	b.n	8003bd8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	051a      	lsls	r2, r3, #20
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6899      	ldr	r1, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c1a:	025a      	lsls	r2, r3, #9
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	029a      	lsls	r2, r3, #10
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
}
 8003c48:	bf00      	nop
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40012300 	.word	0x40012300
 8003c58:	0f000001 	.word	0x0f000001

08003c5c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d13c      	bne.n	8003cf0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d12b      	bne.n	8003ce8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d127      	bne.n	8003ce8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d006      	beq.n	8003cb4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d119      	bne.n	8003ce8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0220 	bic.w	r2, r2, #32
 8003cc2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7fd fa69 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cee:	e00e      	b.n	8003d0e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fd14 	bl	800372a <HAL_ADC_ErrorCallback>
}
 8003d02:	e004      	b.n	8003d0e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
}
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f7ff fcf6 	bl	8003716 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2a:	bf00      	nop
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2240      	movs	r2, #64	; 0x40
 8003d44:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f043 0204 	orr.w	r2, r3, #4
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f7ff fce9 	bl	800372a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d58:	bf00      	nop
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <__NVIC_SetPriorityGrouping+0x44>)
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d90:	4013      	ands	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003da6:	4a04      	ldr	r2, [pc, #16]	; (8003db8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	60d3      	str	r3, [r2, #12]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000ed00 	.word	0xe000ed00

08003dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dc0:	4b04      	ldr	r3, [pc, #16]	; (8003dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	0a1b      	lsrs	r3, r3, #8
 8003dc6:	f003 0307 	and.w	r3, r3, #7
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000ed00 	.word	0xe000ed00

08003dd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db0b      	blt.n	8003e02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <__NVIC_EnableIRQ+0x38>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2001      	movs	r0, #1
 8003dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db0a      	blt.n	8003e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	490c      	ldr	r1, [pc, #48]	; (8003e60 <__NVIC_SetPriority+0x4c>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	440b      	add	r3, r1
 8003e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e3c:	e00a      	b.n	8003e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <__NVIC_SetPriority+0x50>)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	440b      	add	r3, r1
 8003e52:	761a      	strb	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000e100 	.word	0xe000e100
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f1c3 0307 	rsb	r3, r3, #7
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	bf28      	it	cs
 8003e86:	2304      	movcs	r3, #4
 8003e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d902      	bls.n	8003e98 <NVIC_EncodePriority+0x30>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3b03      	subs	r3, #3
 8003e96:	e000      	b.n	8003e9a <NVIC_EncodePriority+0x32>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	43d9      	mvns	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	4313      	orrs	r3, r2
         );
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee0:	d301      	bcc.n	8003ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00f      	b.n	8003f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <SysTick_Config+0x40>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eee:	210f      	movs	r1, #15
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f7ff ff8e 	bl	8003e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <SysTick_Config+0x40>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <SysTick_Config+0x40>)
 8003f00:	2207      	movs	r2, #7
 8003f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000e010 	.word	0xe000e010

08003f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ff29 	bl	8003d74 <__NVIC_SetPriorityGrouping>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3c:	f7ff ff3e 	bl	8003dbc <__NVIC_GetPriorityGrouping>
 8003f40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	6978      	ldr	r0, [r7, #20]
 8003f48:	f7ff ff8e 	bl	8003e68 <NVIC_EncodePriority>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ff5d 	bl	8003e14 <__NVIC_SetPriority>
}
 8003f5a:	bf00      	nop
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff31 	bl	8003dd8 <__NVIC_EnableIRQ>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b082      	sub	sp, #8
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ffa2 	bl	8003ed0 <SysTick_Config>
 8003f8c:	4603      	mov	r3, r0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fa4:	f7ff f924 	bl	80031f0 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e099      	b.n	80040e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd4:	e00f      	b.n	8003ff6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fd6:	f7ff f90b 	bl	80031f0 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d908      	bls.n	8003ff6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e078      	b.n	80040e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e8      	bne.n	8003fd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_DMA_Init+0x158>)
 8004010:	4013      	ands	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004022:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800402e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b04      	cmp	r3, #4
 800404e:	d107      	bne.n	8004060 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	4313      	orrs	r3, r2
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	2b04      	cmp	r3, #4
 8004088:	d117      	bne.n	80040ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	4313      	orrs	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fa91 	bl	80045c4 <DMA_CheckFifoParam>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2240      	movs	r2, #64	; 0x40
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040b6:	2301      	movs	r3, #1
 80040b8:	e016      	b.n	80040e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa48 	bl	8004558 <DMA_CalcBaseAndBitshift>
 80040c8:	4603      	mov	r3, r0
 80040ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d0:	223f      	movs	r2, #63	; 0x3f
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	f010803f 	.word	0xf010803f

080040f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_DMA_Start_IT+0x26>
 8004116:	2302      	movs	r3, #2
 8004118:	e040      	b.n	800419c <HAL_DMA_Start_IT+0xa8>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d12f      	bne.n	800418e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68b9      	ldr	r1, [r7, #8]
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f9da 	bl	80044fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414c:	223f      	movs	r2, #63	; 0x3f
 800414e:	409a      	lsls	r2, r3
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0216 	orr.w	r2, r2, #22
 8004162:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d007      	beq.n	800417c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0208 	orr.w	r2, r2, #8
 800417a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e005      	b.n	800419a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004196:	2302      	movs	r3, #2
 8004198:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800419a:	7dfb      	ldrb	r3, [r7, #23]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d004      	beq.n	80041c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e00c      	b.n	80041dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2205      	movs	r2, #5
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0201 	bic.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041f4:	4b92      	ldr	r3, [pc, #584]	; (8004440 <HAL_DMA_IRQHandler+0x258>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a92      	ldr	r2, [pc, #584]	; (8004444 <HAL_DMA_IRQHandler+0x25c>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a9b      	lsrs	r3, r3, #10
 8004200:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004212:	2208      	movs	r2, #8
 8004214:	409a      	lsls	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4013      	ands	r3, r2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01a      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0204 	bic.w	r2, r2, #4
 800423a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	2208      	movs	r2, #8
 8004242:	409a      	lsls	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	2201      	movs	r2, #1
 800425a:	409a      	lsls	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d012      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004282:	f043 0202 	orr.w	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2204      	movs	r2, #4
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d012      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2204      	movs	r2, #4
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2210      	movs	r2, #16
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d043      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03c      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2210      	movs	r2, #16
 80042e4:	409a      	lsls	r2, r3
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d108      	bne.n	8004318 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d024      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
 8004316:	e01f      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	4798      	blx	r3
 8004328:	e016      	b.n	8004358 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d107      	bne.n	8004348 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0208 	bic.w	r2, r2, #8
 8004346:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2220      	movs	r2, #32
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 808e 	beq.w	8004486 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	f000 8086 	beq.w	8004486 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437e:	2220      	movs	r2, #32
 8004380:	409a      	lsls	r2, r3
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b05      	cmp	r3, #5
 8004390:	d136      	bne.n	8004400 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0216 	bic.w	r2, r2, #22
 80043a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x1da>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0208 	bic.w	r2, r2, #8
 80043d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	223f      	movs	r2, #63	; 0x3f
 80043d8:	409a      	lsls	r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d07d      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
        }
        return;
 80043fe:	e078      	b.n	80044f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01c      	beq.n	8004448 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	2b00      	cmp	r3, #0
 8004422:	d030      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e02b      	b.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
 800443e:	e022      	b.n	8004486 <HAL_DMA_IRQHandler+0x29e>
 8004440:	20000000 	.word	0x20000000
 8004444:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0210 	bic.w	r2, r2, #16
 8004464:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d032      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2205      	movs	r2, #5
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0201 	bic.w	r2, r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60bb      	str	r3, [r7, #8]
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d307      	bcc.n	80044ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f2      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x2ca>
 80044cc:	e000      	b.n	80044d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80044ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e000      	b.n	80044f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80044f2:	bf00      	nop
    }
  }
}
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d108      	bne.n	800453c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800453a:	e007      	b.n	800454c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	60da      	str	r2, [r3, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	3b10      	subs	r3, #16
 8004568:	4a14      	ldr	r2, [pc, #80]	; (80045bc <DMA_CalcBaseAndBitshift+0x64>)
 800456a:	fba2 2303 	umull	r2, r3, r2, r3
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <DMA_CalcBaseAndBitshift+0x68>)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d909      	bls.n	800459a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	1d1a      	adds	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
 8004598:	e007      	b.n	80045aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	aaaaaaab 	.word	0xaaaaaaab
 80045c0:	0800b050 	.word	0x0800b050

080045c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11f      	bne.n	800461e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d855      	bhi.n	8004690 <DMA_CheckFifoParam+0xcc>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <DMA_CheckFifoParam+0x28>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460f 	.word	0x0800460f
 80045f4:	080045fd 	.word	0x080045fd
 80045f8:	08004691 	.word	0x08004691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d045      	beq.n	8004694 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460c:	e042      	b.n	8004694 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004616:	d13f      	bne.n	8004698 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461c:	e03c      	b.n	8004698 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004626:	d121      	bne.n	800466c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d836      	bhi.n	800469c <DMA_CheckFifoParam+0xd8>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <DMA_CheckFifoParam+0x70>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004645 	.word	0x08004645
 8004638:	0800464b 	.word	0x0800464b
 800463c:	08004645 	.word	0x08004645
 8004640:	0800465d 	.word	0x0800465d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      break;
 8004648:	e02f      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d024      	beq.n	80046a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e021      	b.n	80046a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004664:	d11e      	bne.n	80046a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800466a:	e01b      	b.n	80046a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d902      	bls.n	8004678 <DMA_CheckFifoParam+0xb4>
 8004672:	2b03      	cmp	r3, #3
 8004674:	d003      	beq.n	800467e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004676:	e018      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e015      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00e      	beq.n	80046a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	73fb      	strb	r3, [r7, #15]
      break;
 800468e:	e00b      	b.n	80046a8 <DMA_CheckFifoParam+0xe4>
      break;
 8004690:	bf00      	nop
 8004692:	e00a      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 8004694:	bf00      	nop
 8004696:	e008      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 8004698:	bf00      	nop
 800469a:	e006      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 800469c:	bf00      	nop
 800469e:	e004      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;   
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <DMA_CheckFifoParam+0xe6>
      break;
 80046a8:	bf00      	nop
    }
  } 
  
  return status; 
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e159      	b.n	8004988 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d4:	2201      	movs	r2, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f040 8148 	bne.w	8004982 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d00b      	beq.n	8004712 <HAL_GPIO_Init+0x5a>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d007      	beq.n	8004712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004706:	2b11      	cmp	r3, #17
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b12      	cmp	r3, #18
 8004710:	d130      	bne.n	8004774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	2203      	movs	r2, #3
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	43db      	mvns	r3, r3
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	4013      	ands	r3, r2
 8004728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004748:	2201      	movs	r2, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0201 	and.w	r2, r3, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4313      	orrs	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	2203      	movs	r2, #3
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d003      	beq.n	80047b4 <HAL_GPIO_Init+0xfc>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b12      	cmp	r3, #18
 80047b2:	d123      	bne.n	80047fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0203 	and.w	r2, r3, #3
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a2 	beq.w	8004982 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4b56      	ldr	r3, [pc, #344]	; (800499c <HAL_GPIO_Init+0x2e4>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	4a55      	ldr	r2, [pc, #340]	; (800499c <HAL_GPIO_Init+0x2e4>)
 8004848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800484c:	6453      	str	r3, [r2, #68]	; 0x44
 800484e:	4b53      	ldr	r3, [pc, #332]	; (800499c <HAL_GPIO_Init+0x2e4>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485a:	4a51      	ldr	r2, [pc, #324]	; (80049a0 <HAL_GPIO_Init+0x2e8>)
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	089b      	lsrs	r3, r3, #2
 8004860:	3302      	adds	r3, #2
 8004862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <HAL_GPIO_Init+0x2ec>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_Init+0x202>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a47      	ldr	r2, [pc, #284]	; (80049a8 <HAL_GPIO_Init+0x2f0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_Init+0x1fe>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a46      	ldr	r2, [pc, #280]	; (80049ac <HAL_GPIO_Init+0x2f4>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_Init+0x1fa>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a45      	ldr	r2, [pc, #276]	; (80049b0 <HAL_GPIO_Init+0x2f8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_Init+0x1f6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a44      	ldr	r2, [pc, #272]	; (80049b4 <HAL_GPIO_Init+0x2fc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_Init+0x1f2>
 80048a6:	2304      	movs	r3, #4
 80048a8:	e008      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048aa:	2307      	movs	r3, #7
 80048ac:	e006      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048ae:	2303      	movs	r3, #3
 80048b0:	e004      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e002      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048b6:	2301      	movs	r3, #1
 80048b8:	e000      	b.n	80048bc <HAL_GPIO_Init+0x204>
 80048ba:	2300      	movs	r3, #0
 80048bc:	69fa      	ldr	r2, [r7, #28]
 80048be:	f002 0203 	and.w	r2, r2, #3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4093      	lsls	r3, r2
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048cc:	4934      	ldr	r1, [pc, #208]	; (80049a0 <HAL_GPIO_Init+0x2e8>)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	089b      	lsrs	r3, r3, #2
 80048d2:	3302      	adds	r3, #2
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_GPIO_Init+0x300>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048fe:	4a2e      	ldr	r2, [pc, #184]	; (80049b8 <HAL_GPIO_Init+0x300>)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004904:	4b2c      	ldr	r3, [pc, #176]	; (80049b8 <HAL_GPIO_Init+0x300>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004928:	4a23      	ldr	r2, [pc, #140]	; (80049b8 <HAL_GPIO_Init+0x300>)
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800492e:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <HAL_GPIO_Init+0x300>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	43db      	mvns	r3, r3
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004952:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_GPIO_Init+0x300>)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004958:	4b17      	ldr	r3, [pc, #92]	; (80049b8 <HAL_GPIO_Init+0x300>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	43db      	mvns	r3, r3
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d003      	beq.n	800497c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800497c:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <HAL_GPIO_Init+0x300>)
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	3301      	adds	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b0f      	cmp	r3, #15
 800498c:	f67f aea2 	bls.w	80046d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004990:	bf00      	nop
 8004992:	3724      	adds	r7, #36	; 0x24
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40023800 	.word	0x40023800
 80049a0:	40013800 	.word	0x40013800
 80049a4:	40020000 	.word	0x40020000
 80049a8:	40020400 	.word	0x40020400
 80049ac:	40020800 	.word	0x40020800
 80049b0:	40020c00 	.word	0x40020c00
 80049b4:	40021000 	.word	0x40021000
 80049b8:	40013c00 	.word	0x40013c00

080049bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e001      	b.n	80049de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
 80049f8:	4613      	mov	r3, r2
 80049fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a08:	e003      	b.n	8004a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	041a      	lsls	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	619a      	str	r2, [r3, #24]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a36:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc ff3c 	bl	80018bc <HAL_GPIO_EXTI_Callback>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40013c00 	.word	0x40013c00

08004a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e25b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d075      	beq.n	8004b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a6e:	4ba3      	ldr	r3, [pc, #652]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d00c      	beq.n	8004a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7a:	4ba0      	ldr	r3, [pc, #640]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a82:	2b08      	cmp	r3, #8
 8004a84:	d112      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a86:	4b9d      	ldr	r3, [pc, #628]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a92:	d10b      	bne.n	8004aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	4b99      	ldr	r3, [pc, #612]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05b      	beq.n	8004b58 <HAL_RCC_OscConfig+0x108>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d157      	bne.n	8004b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e236      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab4:	d106      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x74>
 8004ab6:	4b91      	ldr	r3, [pc, #580]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a90      	ldr	r2, [pc, #576]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac0:	6013      	str	r3, [r2, #0]
 8004ac2:	e01d      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x98>
 8004ace:	4b8b      	ldr	r3, [pc, #556]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a8a      	ldr	r2, [pc, #552]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b88      	ldr	r3, [pc, #544]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a87      	ldr	r2, [pc, #540]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e00b      	b.n	8004b00 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	4b84      	ldr	r3, [pc, #528]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a83      	ldr	r2, [pc, #524]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	4b81      	ldr	r3, [pc, #516]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a80      	ldr	r2, [pc, #512]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d013      	beq.n	8004b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fe fb72 	bl	80031f0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b10:	f7fe fb6e 	bl	80031f0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b64      	cmp	r3, #100	; 0x64
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1fb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b22:	4b76      	ldr	r3, [pc, #472]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	e014      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fe fb5e 	bl	80031f0 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fe fb5a 	bl	80031f0 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	; 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e1e7      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4a:	4b6c      	ldr	r3, [pc, #432]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f0      	bne.n	8004b38 <HAL_RCC_OscConfig+0xe8>
 8004b56:	e000      	b.n	8004b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d063      	beq.n	8004c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b66:	4b65      	ldr	r3, [pc, #404]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b72:	4b62      	ldr	r3, [pc, #392]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d11c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d116      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e1bb      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ba2:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4952      	ldr	r1, [pc, #328]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb6:	e03a      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bc0:	4b4f      	ldr	r3, [pc, #316]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc6:	f7fe fb13 	bl	80031f0 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bce:	f7fe fb0f 	bl	80031f0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e19c      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be0:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b43      	ldr	r3, [pc, #268]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4940      	ldr	r1, [pc, #256]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	600b      	str	r3, [r1, #0]
 8004c00:	e015      	b.n	8004c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c02:	4b3f      	ldr	r3, [pc, #252]	; (8004d00 <HAL_RCC_OscConfig+0x2b0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fe faf2 	bl	80031f0 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c10:	f7fe faee 	bl	80031f0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e17b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c22:	4b36      	ldr	r3, [pc, #216]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0308 	and.w	r3, r3, #8
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d030      	beq.n	8004c9c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c48:	f7fe fad2 	bl	80031f0 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c50:	f7fe face 	bl	80031f0 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e15b      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c62:	4b26      	ldr	r3, [pc, #152]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x200>
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c70:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_OscConfig+0x2b4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fe fabb 	bl	80031f0 <HAL_GetTick>
 8004c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fe fab7 	bl	80031f0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e144      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80a0 	beq.w	8004dea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004caa:	2300      	movs	r3, #0
 8004cac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cae:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d10f      	bne.n	8004cda <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	4a0e      	ldr	r2, [pc, #56]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd2:	60bb      	str	r3, [r7, #8]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d121      	bne.n	8004d2a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ce6:	4b08      	ldr	r3, [pc, #32]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a07      	ldr	r2, [pc, #28]	; (8004d08 <HAL_RCC_OscConfig+0x2b8>)
 8004cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf2:	f7fe fa7d 	bl	80031f0 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cf8:	e011      	b.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	42470000 	.word	0x42470000
 8004d04:	42470e80 	.word	0x42470e80
 8004d08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d0c:	f7fe fa70 	bl	80031f0 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e0fd      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	4b81      	ldr	r3, [pc, #516]	; (8004f24 <HAL_RCC_OscConfig+0x4d4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <HAL_RCC_OscConfig+0x2f0>
 8004d32:	4b7d      	ldr	r3, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a7c      	ldr	r2, [pc, #496]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	f043 0301 	orr.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e01c      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b05      	cmp	r3, #5
 8004d46:	d10c      	bne.n	8004d62 <HAL_RCC_OscConfig+0x312>
 8004d48:	4b77      	ldr	r3, [pc, #476]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	4a76      	ldr	r2, [pc, #472]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d4e:	f043 0304 	orr.w	r3, r3, #4
 8004d52:	6713      	str	r3, [r2, #112]	; 0x70
 8004d54:	4b74      	ldr	r3, [pc, #464]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d58:	4a73      	ldr	r2, [pc, #460]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d60:	e00b      	b.n	8004d7a <HAL_RCC_OscConfig+0x32a>
 8004d62:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a70      	ldr	r2, [pc, #448]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a6d      	ldr	r2, [pc, #436]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fe fa35 	bl	80031f0 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fe fa31 	bl	80031f0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e0bc      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b61      	ldr	r3, [pc, #388]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ee      	beq.n	8004d8a <HAL_RCC_OscConfig+0x33a>
 8004dac:	e014      	b.n	8004dd8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fe fa1f 	bl	80031f0 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db4:	e00a      	b.n	8004dcc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fe fa1b 	bl	80031f0 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e0a6      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	4b56      	ldr	r3, [pc, #344]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1ee      	bne.n	8004db6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd8:	7dfb      	ldrb	r3, [r7, #23]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d105      	bne.n	8004dea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dde:	4b52      	ldr	r3, [pc, #328]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	4a51      	ldr	r2, [pc, #324]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8092 	beq.w	8004f18 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004df4:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d05c      	beq.n	8004eba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d141      	bne.n	8004e8c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e08:	4b48      	ldr	r3, [pc, #288]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0e:	f7fe f9ef 	bl	80031f0 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fe f9eb 	bl	80031f0 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e078      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e28:	4b3f      	ldr	r3, [pc, #252]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	019b      	lsls	r3, r3, #6
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	4933      	ldr	r1, [pc, #204]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fe f9c4 	bl	80031f0 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fe f9c0 	bl	80031f0 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e04d      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7e:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0x41c>
 8004e8a:	e045      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b27      	ldr	r3, [pc, #156]	; (8004f2c <HAL_RCC_OscConfig+0x4dc>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e92:	f7fe f9ad 	bl	80031f0 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fe f9a9 	bl	80031f0 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e036      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eac:	4b1e      	ldr	r3, [pc, #120]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x44a>
 8004eb8:	e02e      	b.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e029      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec6:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <HAL_RCC_OscConfig+0x4d8>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d115      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004eee:	4013      	ands	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d106      	bne.n	8004f14 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d001      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40007000 	.word	0x40007000
 8004f28:	40023800 	.word	0x40023800
 8004f2c:	42470060 	.word	0x42470060

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0cc      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f44:	4b68      	ldr	r3, [pc, #416]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90c      	bls.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b65      	ldr	r3, [pc, #404]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b63      	ldr	r3, [pc, #396]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0b8      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d020      	beq.n	8004fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f84:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f9c:	4b53      	ldr	r3, [pc, #332]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	4a52      	ldr	r2, [pc, #328]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa8:	4b50      	ldr	r3, [pc, #320]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	494d      	ldr	r1, [pc, #308]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d044      	beq.n	8005050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fce:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d119      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e07f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d003      	beq.n	8004fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d109      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e06f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffe:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e067      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 0203 	bic.w	r2, r3, #3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4934      	ldr	r1, [pc, #208]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005020:	f7fe f8e6 	bl	80031f0 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005026:	e00a      	b.n	800503e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005028:	f7fe f8e2 	bl	80031f0 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	; 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e04f      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800503e:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f003 020c 	and.w	r2, r3, #12
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	429a      	cmp	r2, r3
 800504e:	d1eb      	bne.n	8005028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005050:	4b25      	ldr	r3, [pc, #148]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20c      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b22      	ldr	r3, [pc, #136]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005066:	4b20      	ldr	r3, [pc, #128]	; (80050e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d001      	beq.n	8005078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e032      	b.n	80050de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d008      	beq.n	8005096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005084:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	4916      	ldr	r1, [pc, #88]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d009      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	490e      	ldr	r1, [pc, #56]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050b6:	f000 f821 	bl	80050fc <HAL_RCC_GetSysClockFreq>
 80050ba:	4601      	mov	r1, r0
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a0a      	ldr	r2, [pc, #40]	; (80050f0 <HAL_RCC_ClockConfig+0x1c0>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	fa21 f303 	lsr.w	r3, r1, r3
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fe f846 	bl	8003168 <HAL_InitTick>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40023c00 	.word	0x40023c00
 80050ec:	40023800 	.word	0x40023800
 80050f0:	0800b038 	.word	0x0800b038
 80050f4:	20000000 	.word	0x20000000
 80050f8:	20000004 	.word	0x20000004

080050fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005112:	4b50      	ldr	r3, [pc, #320]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 030c 	and.w	r3, r3, #12
 800511a:	2b04      	cmp	r3, #4
 800511c:	d007      	beq.n	800512e <HAL_RCC_GetSysClockFreq+0x32>
 800511e:	2b08      	cmp	r3, #8
 8005120:	d008      	beq.n	8005134 <HAL_RCC_GetSysClockFreq+0x38>
 8005122:	2b00      	cmp	r3, #0
 8005124:	f040 808d 	bne.w	8005242 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005128:	4b4b      	ldr	r3, [pc, #300]	; (8005258 <HAL_RCC_GetSysClockFreq+0x15c>)
 800512a:	60bb      	str	r3, [r7, #8]
       break;
 800512c:	e08c      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512e:	4b4b      	ldr	r3, [pc, #300]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005130:	60bb      	str	r3, [r7, #8]
      break;
 8005132:	e089      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800513c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800513e:	4b45      	ldr	r3, [pc, #276]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d023      	beq.n	8005192 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514a:	4b42      	ldr	r3, [pc, #264]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	099b      	lsrs	r3, r3, #6
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea03 0501 	and.w	r5, r3, r1
 8005160:	ea04 0602 	and.w	r6, r4, r2
 8005164:	4a3d      	ldr	r2, [pc, #244]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005166:	fb02 f106 	mul.w	r1, r2, r6
 800516a:	2200      	movs	r2, #0
 800516c:	fb02 f205 	mul.w	r2, r2, r5
 8005170:	440a      	add	r2, r1
 8005172:	493a      	ldr	r1, [pc, #232]	; (800525c <HAL_RCC_GetSysClockFreq+0x160>)
 8005174:	fba5 0101 	umull	r0, r1, r5, r1
 8005178:	1853      	adds	r3, r2, r1
 800517a:	4619      	mov	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f04f 0400 	mov.w	r4, #0
 8005182:	461a      	mov	r2, r3
 8005184:	4623      	mov	r3, r4
 8005186:	f7fb fd87 	bl	8000c98 <__aeabi_uldivmod>
 800518a:	4603      	mov	r3, r0
 800518c:	460c      	mov	r4, r1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e049      	b.n	8005226 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005192:	4b30      	ldr	r3, [pc, #192]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	099b      	lsrs	r3, r3, #6
 8005198:	f04f 0400 	mov.w	r4, #0
 800519c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	ea03 0501 	and.w	r5, r3, r1
 80051a8:	ea04 0602 	and.w	r6, r4, r2
 80051ac:	4629      	mov	r1, r5
 80051ae:	4632      	mov	r2, r6
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	f04f 0400 	mov.w	r4, #0
 80051b8:	0154      	lsls	r4, r2, #5
 80051ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051be:	014b      	lsls	r3, r1, #5
 80051c0:	4619      	mov	r1, r3
 80051c2:	4622      	mov	r2, r4
 80051c4:	1b49      	subs	r1, r1, r5
 80051c6:	eb62 0206 	sbc.w	r2, r2, r6
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	0194      	lsls	r4, r2, #6
 80051d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051d8:	018b      	lsls	r3, r1, #6
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	eb64 0402 	sbc.w	r4, r4, r2
 80051e0:	f04f 0100 	mov.w	r1, #0
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	00e2      	lsls	r2, r4, #3
 80051ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051ee:	00d9      	lsls	r1, r3, #3
 80051f0:	460b      	mov	r3, r1
 80051f2:	4614      	mov	r4, r2
 80051f4:	195b      	adds	r3, r3, r5
 80051f6:	eb44 0406 	adc.w	r4, r4, r6
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	02a2      	lsls	r2, r4, #10
 8005204:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005208:	0299      	lsls	r1, r3, #10
 800520a:	460b      	mov	r3, r1
 800520c:	4614      	mov	r4, r2
 800520e:	4618      	mov	r0, r3
 8005210:	4621      	mov	r1, r4
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f04f 0400 	mov.w	r4, #0
 8005218:	461a      	mov	r2, r3
 800521a:	4623      	mov	r3, r4
 800521c:	f7fb fd3c 	bl	8000c98 <__aeabi_uldivmod>
 8005220:	4603      	mov	r3, r0
 8005222:	460c      	mov	r4, r1
 8005224:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005226:	4b0b      	ldr	r3, [pc, #44]	; (8005254 <HAL_RCC_GetSysClockFreq+0x158>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	3301      	adds	r3, #1
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	fbb2 f3f3 	udiv	r3, r2, r3
 800523e:	60bb      	str	r3, [r7, #8]
      break;
 8005240:	e002      	b.n	8005248 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005244:	60bb      	str	r3, [r7, #8]
      break;
 8005246:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005248:	68bb      	ldr	r3, [r7, #8]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005252:	bf00      	nop
 8005254:	40023800 	.word	0x40023800
 8005258:	00f42400 	.word	0x00f42400
 800525c:	017d7840 	.word	0x017d7840

08005260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005260:	b480      	push	{r7}
 8005262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005264:	4b03      	ldr	r3, [pc, #12]	; (8005274 <HAL_RCC_GetHCLKFreq+0x14>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000000 	.word	0x20000000

08005278 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800527c:	f7ff fff0 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 8005280:	4601      	mov	r1, r0
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0a9b      	lsrs	r3, r3, #10
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <HAL_RCC_GetPCLK1Freq+0x24>)
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40023800 	.word	0x40023800
 800529c:	0800b048 	.word	0x0800b048

080052a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052a4:	f7ff ffdc 	bl	8005260 <HAL_RCC_GetHCLKFreq>
 80052a8:	4601      	mov	r1, r0
 80052aa:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	0b5b      	lsrs	r3, r3, #13
 80052b0:	f003 0307 	and.w	r3, r3, #7
 80052b4:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052b6:	5cd3      	ldrb	r3, [r2, r3]
 80052b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40023800 	.word	0x40023800
 80052c4:	0800b048 	.word	0x0800b048

080052c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e056      	b.n	8005388 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fc fe6f 	bl	8001fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	431a      	orrs	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	431a      	orrs	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	ea42 0103 	orr.w	r1, r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	0c1b      	lsrs	r3, r3, #16
 8005358:	f003 0104 	and.w	r1, r3, #4
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b08c      	sub	sp, #48	; 0x30
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800539e:	2301      	movs	r3, #1
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d101      	bne.n	80053b6 <HAL_SPI_TransmitReceive+0x26>
 80053b2:	2302      	movs	r3, #2
 80053b4:	e18a      	b.n	80056cc <HAL_SPI_TransmitReceive+0x33c>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053be:	f7fd ff17 	bl	80031f0 <HAL_GetTick>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053d4:	887b      	ldrh	r3, [r7, #2]
 80053d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d00f      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x70>
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053e6:	d107      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d103      	bne.n	80053f8 <HAL_SPI_TransmitReceive+0x68>
 80053f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d003      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80053fe:	e15b      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x82>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <HAL_SPI_TransmitReceive+0x82>
 800540c:	887b      	ldrh	r3, [r7, #2]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005418:	e14e      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b04      	cmp	r3, #4
 8005424:	d003      	beq.n	800542e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2205      	movs	r2, #5
 800542a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	887a      	ldrh	r2, [r7, #2]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	887a      	ldrh	r2, [r7, #2]
 8005444:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	887a      	ldrh	r2, [r7, #2]
 8005456:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d007      	beq.n	8005482 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548a:	d178      	bne.n	800557e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_TransmitReceive+0x10a>
 8005494:	8b7b      	ldrh	r3, [r7, #26]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d166      	bne.n	8005568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	881a      	ldrh	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	1c9a      	adds	r2, r3, #2
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054be:	e053      	b.n	8005568 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d11b      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x176>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d016      	beq.n	8005506 <HAL_SPI_TransmitReceive+0x176>
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d113      	bne.n	8005506 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	1c9a      	adds	r2, r3, #2
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d119      	bne.n	8005548 <HAL_SPI_TransmitReceive+0x1b8>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d014      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	b292      	uxth	r2, r2
 800552a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	1c9a      	adds	r2, r3, #2
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005544:	2301      	movs	r3, #1
 8005546:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005548:	f7fd fe52 	bl	80031f0 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005554:	429a      	cmp	r2, r3
 8005556:	d807      	bhi.n	8005568 <HAL_SPI_TransmitReceive+0x1d8>
 8005558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555e:	d003      	beq.n	8005568 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005566:	e0a7      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1a6      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x130>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1a1      	bne.n	80054c0 <HAL_SPI_TransmitReceive+0x130>
 800557c:	e07c      	b.n	8005678 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d002      	beq.n	800558c <HAL_SPI_TransmitReceive+0x1fc>
 8005586:	8b7b      	ldrh	r3, [r7, #26]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d16b      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	330c      	adds	r3, #12
 8005596:	7812      	ldrb	r2, [r2, #0]
 8005598:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055b2:	e057      	b.n	8005664 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11c      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x26c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d017      	beq.n	80055fc <HAL_SPI_TransmitReceive+0x26c>
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d114      	bne.n	80055fc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	7812      	ldrb	r2, [r2, #0]
 80055de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d119      	bne.n	800563e <HAL_SPI_TransmitReceive+0x2ae>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d014      	beq.n	800563e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68da      	ldr	r2, [r3, #12]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29a      	uxth	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800563a:	2301      	movs	r3, #1
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800563e:	f7fd fdd7 	bl	80031f0 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800564a:	429a      	cmp	r2, r3
 800564c:	d803      	bhi.n	8005656 <HAL_SPI_TransmitReceive+0x2c6>
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d102      	bne.n	800565c <HAL_SPI_TransmitReceive+0x2cc>
 8005656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005662:	e029      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1a2      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x224>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d19d      	bne.n	80055b4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 f893 	bl	80057a8 <SPI_EndRxTxTransaction>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005694:	e010      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10b      	bne.n	80056b6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	e000      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3730      	adds	r7, #48	; 0x30
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056e4:	e04c      	b.n	8005780 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d048      	beq.n	8005780 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80056ee:	f7fd fd7f 	bl	80031f0 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d902      	bls.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x30>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d13d      	bne.n	8005780 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005712:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571c:	d111      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005726:	d004      	beq.n	8005732 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d107      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005740:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800574a:	d10f      	bne.n	800576c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800576a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e00f      	b.n	80057a0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	429a      	cmp	r2, r3
 800579c:	d1a3      	bne.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057b4:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <SPI_EndRxTxTransaction+0x7c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <SPI_EndRxTxTransaction+0x80>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0d5b      	lsrs	r3, r3, #21
 80057c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d2:	d112      	bne.n	80057fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2200      	movs	r2, #0
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f7ff ff78 	bl	80056d4 <SPI_WaitFlagStateUntilTimeout>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f043 0220 	orr.w	r2, r3, #32
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e00f      	b.n	800581a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3b01      	subs	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d0f2      	beq.n	80057fa <SPI_EndRxTxTransaction+0x52>
 8005814:	e000      	b.n	8005818 <SPI_EndRxTxTransaction+0x70>
        break;
 8005816:	bf00      	nop
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000000 	.word	0x20000000
 8005828:	165e9f81 	.word	0x165e9f81

0800582c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e01d      	b.n	800587a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d106      	bne.n	8005858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fc fed6 	bl	8002604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3304      	adds	r3, #4
 8005868:	4619      	mov	r1, r3
 800586a:	4610      	mov	r0, r2
 800586c:	f000 fa14 	bl	8005c98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d007      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d122      	bne.n	8005926 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d11b      	bne.n	8005926 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f06f 0202 	mvn.w	r2, #2
 80058f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9a5 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 8005912:	e005      	b.n	8005920 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f997 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 f9a8 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b04      	cmp	r3, #4
 8005932:	d122      	bne.n	800597a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b04      	cmp	r3, #4
 8005940:	d11b      	bne.n	800597a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f06f 0204 	mvn.w	r2, #4
 800594a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f97b 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 8005966:	e005      	b.n	8005974 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f96d 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f97e 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b08      	cmp	r3, #8
 8005986:	d122      	bne.n	80059ce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b08      	cmp	r3, #8
 8005994:	d11b      	bne.n	80059ce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f06f 0208 	mvn.w	r2, #8
 800599e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2204      	movs	r2, #4
 80059a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69db      	ldr	r3, [r3, #28]
 80059ac:	f003 0303 	and.w	r3, r3, #3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f951 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 80059ba:	e005      	b.n	80059c8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f943 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f954 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d122      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d11b      	bne.n	8005a22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f06f 0210 	mvn.w	r2, #16
 80059f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2208      	movs	r2, #8
 80059f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f927 	bl	8005c5c <HAL_TIM_IC_CaptureCallback>
 8005a0e:	e005      	b.n	8005a1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f919 	bl	8005c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f92a 	bl	8005c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10e      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f06f 0201 	mvn.w	r2, #1
 8005a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7fc fe55 	bl	80026f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a58:	2b80      	cmp	r3, #128	; 0x80
 8005a5a:	d10e      	bne.n	8005a7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a66:	2b80      	cmp	r3, #128	; 0x80
 8005a68:	d107      	bne.n	8005a7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 faa1 	bl	8005fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d10e      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d107      	bne.n	8005aa6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f8ef 	bl	8005c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d107      	bne.n	8005ad2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f06f 0220 	mvn.w	r2, #32
 8005aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fa6b 	bl	8005fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_TIM_ConfigClockSource+0x18>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e0a6      	b.n	8005c40 <HAL_TIM_ConfigClockSource+0x166>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b10:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b18:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b40      	cmp	r3, #64	; 0x40
 8005b28:	d067      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x120>
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d80b      	bhi.n	8005b46 <HAL_TIM_ConfigClockSource+0x6c>
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d073      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x140>
 8005b32:	2b10      	cmp	r3, #16
 8005b34:	d802      	bhi.n	8005b3c <HAL_TIM_ConfigClockSource+0x62>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d06f      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b3a:	e078      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d06c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x140>
 8005b40:	2b30      	cmp	r3, #48	; 0x30
 8005b42:	d06a      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b44:	e073      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b46:	2b70      	cmp	r3, #112	; 0x70
 8005b48:	d00d      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0x8c>
 8005b4a:	2b70      	cmp	r3, #112	; 0x70
 8005b4c:	d804      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x7e>
 8005b4e:	2b50      	cmp	r3, #80	; 0x50
 8005b50:	d033      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0xe0>
 8005b52:	2b60      	cmp	r3, #96	; 0x60
 8005b54:	d041      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b56:	e06a      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5c:	d066      	beq.n	8005c2c <HAL_TIM_ConfigClockSource+0x152>
 8005b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b62:	d017      	beq.n	8005b94 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b64:	e063      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f000 f989 	bl	8005e8c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	609a      	str	r2, [r3, #8]
      break;
 8005b92:	e04c      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f000 f972 	bl	8005e8c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb6:	609a      	str	r2, [r3, #8]
      break;
 8005bb8:	e039      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f8e6 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2150      	movs	r1, #80	; 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f93f 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e029      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 f905 	bl	8005df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2160      	movs	r1, #96	; 0x60
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f92f 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e019      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 f8c6 	bl	8005d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f91f 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005c18:	e009      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 f916 	bl	8005e56 <TIM_ITRx_SetConfig>
      break;
 8005c2a:	e000      	b.n	8005c2e <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a34      	ldr	r2, [pc, #208]	; (8005d7c <TIM_Base_SetConfig+0xe4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a31      	ldr	r2, [pc, #196]	; (8005d80 <TIM_Base_SetConfig+0xe8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a30      	ldr	r2, [pc, #192]	; (8005d84 <TIM_Base_SetConfig+0xec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_Base_SetConfig+0x38>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <TIM_Base_SetConfig+0xf0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d108      	bne.n	8005ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a25      	ldr	r2, [pc, #148]	; (8005d7c <TIM_Base_SetConfig+0xe4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d01b      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf0:	d017      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <TIM_Base_SetConfig+0xe8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d013      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a21      	ldr	r2, [pc, #132]	; (8005d84 <TIM_Base_SetConfig+0xec>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00f      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <TIM_Base_SetConfig+0xf0>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d00b      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <TIM_Base_SetConfig+0xf4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d007      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <TIM_Base_SetConfig+0xf8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d003      	beq.n	8005d22 <TIM_Base_SetConfig+0x8a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	; (8005d94 <TIM_Base_SetConfig+0xfc>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d108      	bne.n	8005d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a08      	ldr	r2, [pc, #32]	; (8005d7c <TIM_Base_SetConfig+0xe4>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d103      	bne.n	8005d68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	615a      	str	r2, [r3, #20]
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40014000 	.word	0x40014000
 8005d90:	40014400 	.word	0x40014400
 8005d94:	40014800 	.word	0x40014800

08005d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f023 0201 	bic.w	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b087      	sub	sp, #28
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	f023 0210 	bic.w	r2, r3, #16
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	031b      	lsls	r3, r3, #12
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b085      	sub	sp, #20
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f043 0307 	orr.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d101      	bne.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	e050      	b.n	8005f86 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d018      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d013      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00e      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d009      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d004      	beq.n	8005f5a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a13      	ldr	r2, [pc, #76]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10c      	bne.n	8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40014000 	.word	0x40014000

08005fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e03f      	b.n	8006062 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fe98 	bl	8002d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2224      	movs	r2, #36	; 0x24
 8006000:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006012:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 faf9 	bl	800660c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691a      	ldr	r2, [r3, #16]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006028:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695a      	ldr	r2, [r3, #20]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006038:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006048:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	4613      	mov	r3, r2
 8006076:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b20      	cmp	r3, #32
 8006082:	d130      	bne.n	80060e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_UART_Transmit_IT+0x26>
 800608a:	88fb      	ldrh	r3, [r7, #6]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e029      	b.n	80060e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609a:	2b01      	cmp	r3, #1
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Transmit_IT+0x38>
 800609e:	2302      	movs	r3, #2
 80060a0:	e022      	b.n	80060e8 <HAL_UART_Transmit_IT+0x7e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	88fa      	ldrh	r2, [r7, #6]
 80060b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	88fa      	ldrh	r2, [r7, #6]
 80060ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2221      	movs	r2, #33	; 0x21
 80060c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	e000      	b.n	80060e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
  }
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d140      	bne.n	8006190 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_UART_Receive_IT+0x26>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e039      	b.n	8006192 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_UART_Receive_IT+0x38>
 8006128:	2302      	movs	r3, #2
 800612a:	e032      	b.n	8006192 <HAL_UART_Receive_IT+0x9e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	88fa      	ldrh	r2, [r7, #6]
 800613e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	88fa      	ldrh	r2, [r7, #6]
 8006144:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2222      	movs	r2, #34	; 0x22
 8006150:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68da      	ldr	r2, [r3, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695a      	ldr	r2, [r3, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0220 	orr.w	r2, r2, #32
 800618a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800618c:	2300      	movs	r3, #0
 800618e:	e000      	b.n	8006192 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006190:	2302      	movs	r3, #2
  }
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10d      	bne.n	80061f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d008      	beq.n	80061f2 <HAL_UART_IRQHandler+0x52>
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f003 0320 	and.w	r3, r3, #32
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f98c 	bl	8006508 <UART_Receive_IT>
      return;
 80061f0:	e0d1      	b.n	8006396 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80b0 	beq.w	800635a <HAL_UART_IRQHandler+0x1ba>
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b00      	cmp	r3, #0
 8006202:	d105      	bne.n	8006210 <HAL_UART_IRQHandler+0x70>
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80a5 	beq.w	800635a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_UART_IRQHandler+0x90>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	f043 0201 	orr.w	r2, r3, #1
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f003 0304 	and.w	r3, r3, #4
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_UART_IRQHandler+0xb0>
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006248:	f043 0202 	orr.w	r2, r3, #2
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <HAL_UART_IRQHandler+0xd0>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	f043 0204 	orr.w	r2, r3, #4
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00f      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_UART_IRQHandler+0xee>
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006292:	f043 0208 	orr.w	r2, r3, #8
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d078      	beq.n	8006394 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_UART_IRQHandler+0x11c>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f926 	bl	8006508 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <HAL_UART_IRQHandler+0x144>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d031      	beq.n	8006348 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f86f 	bl	80063c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d123      	bne.n	8006340 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006306:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630c:	2b00      	cmp	r3, #0
 800630e:	d013      	beq.n	8006338 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_UART_IRQHandler+0x1fc>)
 8006316:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631c:	4618      	mov	r0, r3
 800631e:	f7fd ff41 	bl	80041a4 <HAL_DMA_Abort_IT>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d016      	beq.n	8006356 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006332:	4610      	mov	r0, r2
 8006334:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006336:	e00e      	b.n	8006356 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f83b 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633e:	e00a      	b.n	8006356 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f837 	bl	80063b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006346:	e006      	b.n	8006356 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f833 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006354:	e01e      	b.n	8006394 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006356:	bf00      	nop
    return;
 8006358:	e01c      	b.n	8006394 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006360:	2b00      	cmp	r3, #0
 8006362:	d008      	beq.n	8006376 <HAL_UART_IRQHandler+0x1d6>
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f85c 	bl	800642c <UART_Transmit_IT>
    return;
 8006374:	e00f      	b.n	8006396 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00a      	beq.n	8006396 <HAL_UART_IRQHandler+0x1f6>
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f8a4 	bl	80064d8 <UART_EndTransmit_IT>
    return;
 8006390:	bf00      	nop
 8006392:	e000      	b.n	8006396 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006394:	bf00      	nop
  }
}
 8006396:	3720      	adds	r7, #32
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	08006405 	.word	0x08006405

080063a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063de:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff ffc8 	bl	80063b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b21      	cmp	r3, #33	; 0x21
 800643e:	d144      	bne.n	80064ca <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006448:	d11a      	bne.n	8006480 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800645e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	1c9a      	adds	r2, r3, #2
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	621a      	str	r2, [r3, #32]
 8006472:	e00e      	b.n	8006492 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	621a      	str	r2, [r3, #32]
 800647e:	e008      	b.n	8006492 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	1c59      	adds	r1, r3, #1
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	6211      	str	r1, [r2, #32]
 800648a:	781a      	ldrb	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006496:	b29b      	uxth	r3, r3
 8006498:	3b01      	subs	r3, #1
 800649a:	b29b      	uxth	r3, r3
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4619      	mov	r1, r3
 80064a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10f      	bne.n	80064c6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	e000      	b.n	80064cc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064ca:	2302      	movs	r3, #2
  }
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff51 	bl	80063a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b22      	cmp	r3, #34	; 0x22
 800651a:	d171      	bne.n	8006600 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006524:	d123      	bne.n	800656e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10e      	bne.n	8006552 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	b29b      	uxth	r3, r3
 800653c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654a:	1c9a      	adds	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
 8006550:	e029      	b.n	80065a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	b29b      	uxth	r3, r3
 800655a:	b2db      	uxtb	r3, r3
 800655c:	b29a      	uxth	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	; 0x28
 800656c:	e01b      	b.n	80065a6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10a      	bne.n	800658c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6858      	ldr	r0, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6291      	str	r1, [r2, #40]	; 0x28
 8006586:	b2c2      	uxtb	r2, r0
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	e00c      	b.n	80065a6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	1c58      	adds	r0, r3, #1
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	6288      	str	r0, [r1, #40]	; 0x28
 800659e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	4619      	mov	r1, r3
 80065b4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d120      	bne.n	80065fc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0220 	bic.w	r2, r2, #32
 80065c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc fc4e 	bl	8002e94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e002      	b.n	8006602 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e000      	b.n	8006602 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006600:	2302      	movs	r3, #2
  }
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	b085      	sub	sp, #20
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	431a      	orrs	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800664e:	f023 030c 	bic.w	r3, r3, #12
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6812      	ldr	r2, [r2, #0]
 8006656:	68f9      	ldr	r1, [r7, #12]
 8006658:	430b      	orrs	r3, r1
 800665a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800667a:	f040 818b 	bne.w	8006994 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4ac1      	ldr	r2, [pc, #772]	; (8006988 <UART_SetConfig+0x37c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d005      	beq.n	8006694 <UART_SetConfig+0x88>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4abf      	ldr	r2, [pc, #764]	; (800698c <UART_SetConfig+0x380>)
 800668e:	4293      	cmp	r3, r2
 8006690:	f040 80bd 	bne.w	800680e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe fe04 	bl	80052a0 <HAL_RCC_GetPCLK2Freq>
 8006698:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	461d      	mov	r5, r3
 800669e:	f04f 0600 	mov.w	r6, #0
 80066a2:	46a8      	mov	r8, r5
 80066a4:	46b1      	mov	r9, r6
 80066a6:	eb18 0308 	adds.w	r3, r8, r8
 80066aa:	eb49 0409 	adc.w	r4, r9, r9
 80066ae:	4698      	mov	r8, r3
 80066b0:	46a1      	mov	r9, r4
 80066b2:	eb18 0805 	adds.w	r8, r8, r5
 80066b6:	eb49 0906 	adc.w	r9, r9, r6
 80066ba:	f04f 0100 	mov.w	r1, #0
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80066c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80066ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066ce:	4688      	mov	r8, r1
 80066d0:	4691      	mov	r9, r2
 80066d2:	eb18 0005 	adds.w	r0, r8, r5
 80066d6:	eb49 0106 	adc.w	r1, r9, r6
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	461d      	mov	r5, r3
 80066e0:	f04f 0600 	mov.w	r6, #0
 80066e4:	196b      	adds	r3, r5, r5
 80066e6:	eb46 0406 	adc.w	r4, r6, r6
 80066ea:	461a      	mov	r2, r3
 80066ec:	4623      	mov	r3, r4
 80066ee:	f7fa fad3 	bl	8000c98 <__aeabi_uldivmod>
 80066f2:	4603      	mov	r3, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	461a      	mov	r2, r3
 80066f8:	4ba5      	ldr	r3, [pc, #660]	; (8006990 <UART_SetConfig+0x384>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	461d      	mov	r5, r3
 8006708:	f04f 0600 	mov.w	r6, #0
 800670c:	46a9      	mov	r9, r5
 800670e:	46b2      	mov	sl, r6
 8006710:	eb19 0309 	adds.w	r3, r9, r9
 8006714:	eb4a 040a 	adc.w	r4, sl, sl
 8006718:	4699      	mov	r9, r3
 800671a:	46a2      	mov	sl, r4
 800671c:	eb19 0905 	adds.w	r9, r9, r5
 8006720:	eb4a 0a06 	adc.w	sl, sl, r6
 8006724:	f04f 0100 	mov.w	r1, #0
 8006728:	f04f 0200 	mov.w	r2, #0
 800672c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006730:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006734:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006738:	4689      	mov	r9, r1
 800673a:	4692      	mov	sl, r2
 800673c:	eb19 0005 	adds.w	r0, r9, r5
 8006740:	eb4a 0106 	adc.w	r1, sl, r6
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	461d      	mov	r5, r3
 800674a:	f04f 0600 	mov.w	r6, #0
 800674e:	196b      	adds	r3, r5, r5
 8006750:	eb46 0406 	adc.w	r4, r6, r6
 8006754:	461a      	mov	r2, r3
 8006756:	4623      	mov	r3, r4
 8006758:	f7fa fa9e 	bl	8000c98 <__aeabi_uldivmod>
 800675c:	4603      	mov	r3, r0
 800675e:	460c      	mov	r4, r1
 8006760:	461a      	mov	r2, r3
 8006762:	4b8b      	ldr	r3, [pc, #556]	; (8006990 <UART_SetConfig+0x384>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	2164      	movs	r1, #100	; 0x64
 800676c:	fb01 f303 	mul.w	r3, r1, r3
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3332      	adds	r3, #50	; 0x32
 8006776:	4a86      	ldr	r2, [pc, #536]	; (8006990 <UART_SetConfig+0x384>)
 8006778:	fba2 2303 	umull	r2, r3, r2, r3
 800677c:	095b      	lsrs	r3, r3, #5
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006784:	4498      	add	r8, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	461d      	mov	r5, r3
 800678a:	f04f 0600 	mov.w	r6, #0
 800678e:	46a9      	mov	r9, r5
 8006790:	46b2      	mov	sl, r6
 8006792:	eb19 0309 	adds.w	r3, r9, r9
 8006796:	eb4a 040a 	adc.w	r4, sl, sl
 800679a:	4699      	mov	r9, r3
 800679c:	46a2      	mov	sl, r4
 800679e:	eb19 0905 	adds.w	r9, r9, r5
 80067a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ba:	4689      	mov	r9, r1
 80067bc:	4692      	mov	sl, r2
 80067be:	eb19 0005 	adds.w	r0, r9, r5
 80067c2:	eb4a 0106 	adc.w	r1, sl, r6
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	461d      	mov	r5, r3
 80067cc:	f04f 0600 	mov.w	r6, #0
 80067d0:	196b      	adds	r3, r5, r5
 80067d2:	eb46 0406 	adc.w	r4, r6, r6
 80067d6:	461a      	mov	r2, r3
 80067d8:	4623      	mov	r3, r4
 80067da:	f7fa fa5d 	bl	8000c98 <__aeabi_uldivmod>
 80067de:	4603      	mov	r3, r0
 80067e0:	460c      	mov	r4, r1
 80067e2:	461a      	mov	r2, r3
 80067e4:	4b6a      	ldr	r3, [pc, #424]	; (8006990 <UART_SetConfig+0x384>)
 80067e6:	fba3 1302 	umull	r1, r3, r3, r2
 80067ea:	095b      	lsrs	r3, r3, #5
 80067ec:	2164      	movs	r1, #100	; 0x64
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	3332      	adds	r3, #50	; 0x32
 80067f8:	4a65      	ldr	r2, [pc, #404]	; (8006990 <UART_SetConfig+0x384>)
 80067fa:	fba2 2303 	umull	r2, r3, r2, r3
 80067fe:	095b      	lsrs	r3, r3, #5
 8006800:	f003 0207 	and.w	r2, r3, #7
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4442      	add	r2, r8
 800680a:	609a      	str	r2, [r3, #8]
 800680c:	e26f      	b.n	8006cee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800680e:	f7fe fd33 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8006812:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	461d      	mov	r5, r3
 8006818:	f04f 0600 	mov.w	r6, #0
 800681c:	46a8      	mov	r8, r5
 800681e:	46b1      	mov	r9, r6
 8006820:	eb18 0308 	adds.w	r3, r8, r8
 8006824:	eb49 0409 	adc.w	r4, r9, r9
 8006828:	4698      	mov	r8, r3
 800682a:	46a1      	mov	r9, r4
 800682c:	eb18 0805 	adds.w	r8, r8, r5
 8006830:	eb49 0906 	adc.w	r9, r9, r6
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006840:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006844:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006848:	4688      	mov	r8, r1
 800684a:	4691      	mov	r9, r2
 800684c:	eb18 0005 	adds.w	r0, r8, r5
 8006850:	eb49 0106 	adc.w	r1, r9, r6
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	461d      	mov	r5, r3
 800685a:	f04f 0600 	mov.w	r6, #0
 800685e:	196b      	adds	r3, r5, r5
 8006860:	eb46 0406 	adc.w	r4, r6, r6
 8006864:	461a      	mov	r2, r3
 8006866:	4623      	mov	r3, r4
 8006868:	f7fa fa16 	bl	8000c98 <__aeabi_uldivmod>
 800686c:	4603      	mov	r3, r0
 800686e:	460c      	mov	r4, r1
 8006870:	461a      	mov	r2, r3
 8006872:	4b47      	ldr	r3, [pc, #284]	; (8006990 <UART_SetConfig+0x384>)
 8006874:	fba3 2302 	umull	r2, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	461d      	mov	r5, r3
 8006882:	f04f 0600 	mov.w	r6, #0
 8006886:	46a9      	mov	r9, r5
 8006888:	46b2      	mov	sl, r6
 800688a:	eb19 0309 	adds.w	r3, r9, r9
 800688e:	eb4a 040a 	adc.w	r4, sl, sl
 8006892:	4699      	mov	r9, r3
 8006894:	46a2      	mov	sl, r4
 8006896:	eb19 0905 	adds.w	r9, r9, r5
 800689a:	eb4a 0a06 	adc.w	sl, sl, r6
 800689e:	f04f 0100 	mov.w	r1, #0
 80068a2:	f04f 0200 	mov.w	r2, #0
 80068a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068b2:	4689      	mov	r9, r1
 80068b4:	4692      	mov	sl, r2
 80068b6:	eb19 0005 	adds.w	r0, r9, r5
 80068ba:	eb4a 0106 	adc.w	r1, sl, r6
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	461d      	mov	r5, r3
 80068c4:	f04f 0600 	mov.w	r6, #0
 80068c8:	196b      	adds	r3, r5, r5
 80068ca:	eb46 0406 	adc.w	r4, r6, r6
 80068ce:	461a      	mov	r2, r3
 80068d0:	4623      	mov	r3, r4
 80068d2:	f7fa f9e1 	bl	8000c98 <__aeabi_uldivmod>
 80068d6:	4603      	mov	r3, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	461a      	mov	r2, r3
 80068dc:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <UART_SetConfig+0x384>)
 80068de:	fba3 1302 	umull	r1, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2164      	movs	r1, #100	; 0x64
 80068e6:	fb01 f303 	mul.w	r3, r1, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	3332      	adds	r3, #50	; 0x32
 80068f0:	4a27      	ldr	r2, [pc, #156]	; (8006990 <UART_SetConfig+0x384>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068fe:	4498      	add	r8, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	461d      	mov	r5, r3
 8006904:	f04f 0600 	mov.w	r6, #0
 8006908:	46a9      	mov	r9, r5
 800690a:	46b2      	mov	sl, r6
 800690c:	eb19 0309 	adds.w	r3, r9, r9
 8006910:	eb4a 040a 	adc.w	r4, sl, sl
 8006914:	4699      	mov	r9, r3
 8006916:	46a2      	mov	sl, r4
 8006918:	eb19 0905 	adds.w	r9, r9, r5
 800691c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006920:	f04f 0100 	mov.w	r1, #0
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800692c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006930:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006934:	4689      	mov	r9, r1
 8006936:	4692      	mov	sl, r2
 8006938:	eb19 0005 	adds.w	r0, r9, r5
 800693c:	eb4a 0106 	adc.w	r1, sl, r6
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	461d      	mov	r5, r3
 8006946:	f04f 0600 	mov.w	r6, #0
 800694a:	196b      	adds	r3, r5, r5
 800694c:	eb46 0406 	adc.w	r4, r6, r6
 8006950:	461a      	mov	r2, r3
 8006952:	4623      	mov	r3, r4
 8006954:	f7fa f9a0 	bl	8000c98 <__aeabi_uldivmod>
 8006958:	4603      	mov	r3, r0
 800695a:	460c      	mov	r4, r1
 800695c:	461a      	mov	r2, r3
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <UART_SetConfig+0x384>)
 8006960:	fba3 1302 	umull	r1, r3, r3, r2
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	2164      	movs	r1, #100	; 0x64
 8006968:	fb01 f303 	mul.w	r3, r1, r3
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	3332      	adds	r3, #50	; 0x32
 8006972:	4a07      	ldr	r2, [pc, #28]	; (8006990 <UART_SetConfig+0x384>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	095b      	lsrs	r3, r3, #5
 800697a:	f003 0207 	and.w	r2, r3, #7
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4442      	add	r2, r8
 8006984:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006986:	e1b2      	b.n	8006cee <UART_SetConfig+0x6e2>
 8006988:	40011000 	.word	0x40011000
 800698c:	40011400 	.word	0x40011400
 8006990:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4ad7      	ldr	r2, [pc, #860]	; (8006cf8 <UART_SetConfig+0x6ec>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d005      	beq.n	80069aa <UART_SetConfig+0x39e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4ad6      	ldr	r2, [pc, #856]	; (8006cfc <UART_SetConfig+0x6f0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	f040 80d1 	bne.w	8006b4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069aa:	f7fe fc79 	bl	80052a0 <HAL_RCC_GetPCLK2Freq>
 80069ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	469a      	mov	sl, r3
 80069b4:	f04f 0b00 	mov.w	fp, #0
 80069b8:	46d0      	mov	r8, sl
 80069ba:	46d9      	mov	r9, fp
 80069bc:	eb18 0308 	adds.w	r3, r8, r8
 80069c0:	eb49 0409 	adc.w	r4, r9, r9
 80069c4:	4698      	mov	r8, r3
 80069c6:	46a1      	mov	r9, r4
 80069c8:	eb18 080a 	adds.w	r8, r8, sl
 80069cc:	eb49 090b 	adc.w	r9, r9, fp
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80069dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80069e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80069e4:	4688      	mov	r8, r1
 80069e6:	4691      	mov	r9, r2
 80069e8:	eb1a 0508 	adds.w	r5, sl, r8
 80069ec:	eb4b 0609 	adc.w	r6, fp, r9
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	4619      	mov	r1, r3
 80069f6:	f04f 0200 	mov.w	r2, #0
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	f04f 0400 	mov.w	r4, #0
 8006a02:	0094      	lsls	r4, r2, #2
 8006a04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a08:	008b      	lsls	r3, r1, #2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4623      	mov	r3, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	4631      	mov	r1, r6
 8006a12:	f7fa f941 	bl	8000c98 <__aeabi_uldivmod>
 8006a16:	4603      	mov	r3, r0
 8006a18:	460c      	mov	r4, r1
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4bb8      	ldr	r3, [pc, #736]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	469b      	mov	fp, r3
 8006a2c:	f04f 0c00 	mov.w	ip, #0
 8006a30:	46d9      	mov	r9, fp
 8006a32:	46e2      	mov	sl, ip
 8006a34:	eb19 0309 	adds.w	r3, r9, r9
 8006a38:	eb4a 040a 	adc.w	r4, sl, sl
 8006a3c:	4699      	mov	r9, r3
 8006a3e:	46a2      	mov	sl, r4
 8006a40:	eb19 090b 	adds.w	r9, r9, fp
 8006a44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a5c:	4689      	mov	r9, r1
 8006a5e:	4692      	mov	sl, r2
 8006a60:	eb1b 0509 	adds.w	r5, fp, r9
 8006a64:	eb4c 060a 	adc.w	r6, ip, sl
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	f04f 0400 	mov.w	r4, #0
 8006a7a:	0094      	lsls	r4, r2, #2
 8006a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a80:	008b      	lsls	r3, r1, #2
 8006a82:	461a      	mov	r2, r3
 8006a84:	4623      	mov	r3, r4
 8006a86:	4628      	mov	r0, r5
 8006a88:	4631      	mov	r1, r6
 8006a8a:	f7fa f905 	bl	8000c98 <__aeabi_uldivmod>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	461a      	mov	r2, r3
 8006a94:	4b9a      	ldr	r3, [pc, #616]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006a96:	fba3 1302 	umull	r1, r3, r3, r2
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	2164      	movs	r1, #100	; 0x64
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	3332      	adds	r3, #50	; 0x32
 8006aa8:	4a95      	ldr	r2, [pc, #596]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8006aae:	095b      	lsrs	r3, r3, #5
 8006ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ab4:	4498      	add	r8, r3
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	469b      	mov	fp, r3
 8006aba:	f04f 0c00 	mov.w	ip, #0
 8006abe:	46d9      	mov	r9, fp
 8006ac0:	46e2      	mov	sl, ip
 8006ac2:	eb19 0309 	adds.w	r3, r9, r9
 8006ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8006aca:	4699      	mov	r9, r3
 8006acc:	46a2      	mov	sl, r4
 8006ace:	eb19 090b 	adds.w	r9, r9, fp
 8006ad2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ad6:	f04f 0100 	mov.w	r1, #0
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006aea:	4689      	mov	r9, r1
 8006aec:	4692      	mov	sl, r2
 8006aee:	eb1b 0509 	adds.w	r5, fp, r9
 8006af2:	eb4c 060a 	adc.w	r6, ip, sl
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	4619      	mov	r1, r3
 8006afc:	f04f 0200 	mov.w	r2, #0
 8006b00:	f04f 0300 	mov.w	r3, #0
 8006b04:	f04f 0400 	mov.w	r4, #0
 8006b08:	0094      	lsls	r4, r2, #2
 8006b0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b0e:	008b      	lsls	r3, r1, #2
 8006b10:	461a      	mov	r2, r3
 8006b12:	4623      	mov	r3, r4
 8006b14:	4628      	mov	r0, r5
 8006b16:	4631      	mov	r1, r6
 8006b18:	f7fa f8be 	bl	8000c98 <__aeabi_uldivmod>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	461a      	mov	r2, r3
 8006b22:	4b77      	ldr	r3, [pc, #476]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006b24:	fba3 1302 	umull	r1, r3, r3, r2
 8006b28:	095b      	lsrs	r3, r3, #5
 8006b2a:	2164      	movs	r1, #100	; 0x64
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	3332      	adds	r3, #50	; 0x32
 8006b36:	4a72      	ldr	r2, [pc, #456]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006b38:	fba2 2303 	umull	r2, r3, r2, r3
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4442      	add	r2, r8
 8006b48:	609a      	str	r2, [r3, #8]
 8006b4a:	e0d0      	b.n	8006cee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fe fb94 	bl	8005278 <HAL_RCC_GetPCLK1Freq>
 8006b50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	469a      	mov	sl, r3
 8006b56:	f04f 0b00 	mov.w	fp, #0
 8006b5a:	46d0      	mov	r8, sl
 8006b5c:	46d9      	mov	r9, fp
 8006b5e:	eb18 0308 	adds.w	r3, r8, r8
 8006b62:	eb49 0409 	adc.w	r4, r9, r9
 8006b66:	4698      	mov	r8, r3
 8006b68:	46a1      	mov	r9, r4
 8006b6a:	eb18 080a 	adds.w	r8, r8, sl
 8006b6e:	eb49 090b 	adc.w	r9, r9, fp
 8006b72:	f04f 0100 	mov.w	r1, #0
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006b7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006b82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006b86:	4688      	mov	r8, r1
 8006b88:	4691      	mov	r9, r2
 8006b8a:	eb1a 0508 	adds.w	r5, sl, r8
 8006b8e:	eb4b 0609 	adc.w	r6, fp, r9
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	f04f 0200 	mov.w	r2, #0
 8006b9c:	f04f 0300 	mov.w	r3, #0
 8006ba0:	f04f 0400 	mov.w	r4, #0
 8006ba4:	0094      	lsls	r4, r2, #2
 8006ba6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006baa:	008b      	lsls	r3, r1, #2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4623      	mov	r3, r4
 8006bb0:	4628      	mov	r0, r5
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	f7fa f870 	bl	8000c98 <__aeabi_uldivmod>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b50      	ldr	r3, [pc, #320]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8006bc4:	095b      	lsrs	r3, r3, #5
 8006bc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	469b      	mov	fp, r3
 8006bce:	f04f 0c00 	mov.w	ip, #0
 8006bd2:	46d9      	mov	r9, fp
 8006bd4:	46e2      	mov	sl, ip
 8006bd6:	eb19 0309 	adds.w	r3, r9, r9
 8006bda:	eb4a 040a 	adc.w	r4, sl, sl
 8006bde:	4699      	mov	r9, r3
 8006be0:	46a2      	mov	sl, r4
 8006be2:	eb19 090b 	adds.w	r9, r9, fp
 8006be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bea:	f04f 0100 	mov.w	r1, #0
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bfe:	4689      	mov	r9, r1
 8006c00:	4692      	mov	sl, r2
 8006c02:	eb1b 0509 	adds.w	r5, fp, r9
 8006c06:	eb4c 060a 	adc.w	r6, ip, sl
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	0094      	lsls	r4, r2, #2
 8006c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c22:	008b      	lsls	r3, r1, #2
 8006c24:	461a      	mov	r2, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	f7fa f834 	bl	8000c98 <__aeabi_uldivmod>
 8006c30:	4603      	mov	r3, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b32      	ldr	r3, [pc, #200]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006c38:	fba3 1302 	umull	r1, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	2164      	movs	r1, #100	; 0x64
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	3332      	adds	r3, #50	; 0x32
 8006c4a:	4a2d      	ldr	r2, [pc, #180]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	095b      	lsrs	r3, r3, #5
 8006c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c56:	4498      	add	r8, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	469b      	mov	fp, r3
 8006c5c:	f04f 0c00 	mov.w	ip, #0
 8006c60:	46d9      	mov	r9, fp
 8006c62:	46e2      	mov	sl, ip
 8006c64:	eb19 0309 	adds.w	r3, r9, r9
 8006c68:	eb4a 040a 	adc.w	r4, sl, sl
 8006c6c:	4699      	mov	r9, r3
 8006c6e:	46a2      	mov	sl, r4
 8006c70:	eb19 090b 	adds.w	r9, r9, fp
 8006c74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c78:	f04f 0100 	mov.w	r1, #0
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c8c:	4689      	mov	r9, r1
 8006c8e:	4692      	mov	sl, r2
 8006c90:	eb1b 0509 	adds.w	r5, fp, r9
 8006c94:	eb4c 060a 	adc.w	r6, ip, sl
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	f04f 0400 	mov.w	r4, #0
 8006caa:	0094      	lsls	r4, r2, #2
 8006cac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006cb0:	008b      	lsls	r3, r1, #2
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4623      	mov	r3, r4
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	4631      	mov	r1, r6
 8006cba:	f7f9 ffed 	bl	8000c98 <__aeabi_uldivmod>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	460c      	mov	r4, r1
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2164      	movs	r1, #100	; 0x64
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	011b      	lsls	r3, r3, #4
 8006cd6:	3332      	adds	r3, #50	; 0x32
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <UART_SetConfig+0x6f4>)
 8006cda:	fba2 2303 	umull	r2, r3, r2, r3
 8006cde:	095b      	lsrs	r3, r3, #5
 8006ce0:	f003 020f 	and.w	r2, r3, #15
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4442      	add	r2, r8
 8006cea:	609a      	str	r2, [r3, #8]
}
 8006cec:	e7ff      	b.n	8006cee <UART_SetConfig+0x6e2>
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf8:	40011000 	.word	0x40011000
 8006cfc:	40011400 	.word	0x40011400
 8006d00:	51eb851f 	.word	0x51eb851f

08006d04 <__errno>:
 8006d04:	4b01      	ldr	r3, [pc, #4]	; (8006d0c <__errno+0x8>)
 8006d06:	6818      	ldr	r0, [r3, #0]
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	2000000c 	.word	0x2000000c

08006d10 <__libc_init_array>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4e0d      	ldr	r6, [pc, #52]	; (8006d48 <__libc_init_array+0x38>)
 8006d14:	4c0d      	ldr	r4, [pc, #52]	; (8006d4c <__libc_init_array+0x3c>)
 8006d16:	1ba4      	subs	r4, r4, r6
 8006d18:	10a4      	asrs	r4, r4, #2
 8006d1a:	2500      	movs	r5, #0
 8006d1c:	42a5      	cmp	r5, r4
 8006d1e:	d109      	bne.n	8006d34 <__libc_init_array+0x24>
 8006d20:	4e0b      	ldr	r6, [pc, #44]	; (8006d50 <__libc_init_array+0x40>)
 8006d22:	4c0c      	ldr	r4, [pc, #48]	; (8006d54 <__libc_init_array+0x44>)
 8006d24:	f004 f904 	bl	800af30 <_init>
 8006d28:	1ba4      	subs	r4, r4, r6
 8006d2a:	10a4      	asrs	r4, r4, #2
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	42a5      	cmp	r5, r4
 8006d30:	d105      	bne.n	8006d3e <__libc_init_array+0x2e>
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d38:	4798      	blx	r3
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	e7ee      	b.n	8006d1c <__libc_init_array+0xc>
 8006d3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d42:	4798      	blx	r3
 8006d44:	3501      	adds	r5, #1
 8006d46:	e7f2      	b.n	8006d2e <__libc_init_array+0x1e>
 8006d48:	0800b380 	.word	0x0800b380
 8006d4c:	0800b380 	.word	0x0800b380
 8006d50:	0800b380 	.word	0x0800b380
 8006d54:	0800b384 	.word	0x0800b384

08006d58 <malloc>:
 8006d58:	4b02      	ldr	r3, [pc, #8]	; (8006d64 <malloc+0xc>)
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	f000 b859 	b.w	8006e14 <_malloc_r>
 8006d62:	bf00      	nop
 8006d64:	2000000c 	.word	0x2000000c

08006d68 <memset>:
 8006d68:	4402      	add	r2, r0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d100      	bne.n	8006d72 <memset+0xa>
 8006d70:	4770      	bx	lr
 8006d72:	f803 1b01 	strb.w	r1, [r3], #1
 8006d76:	e7f9      	b.n	8006d6c <memset+0x4>

08006d78 <_free_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	2900      	cmp	r1, #0
 8006d7e:	d045      	beq.n	8006e0c <_free_r+0x94>
 8006d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d84:	1f0c      	subs	r4, r1, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb8      	it	lt
 8006d8a:	18e4      	addlt	r4, r4, r3
 8006d8c:	f003 fa5d 	bl	800a24a <__malloc_lock>
 8006d90:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <_free_r+0x98>)
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	4610      	mov	r0, r2
 8006d96:	b933      	cbnz	r3, 8006da6 <_free_r+0x2e>
 8006d98:	6063      	str	r3, [r4, #4]
 8006d9a:	6014      	str	r4, [r2, #0]
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da2:	f003 ba53 	b.w	800a24c <__malloc_unlock>
 8006da6:	42a3      	cmp	r3, r4
 8006da8:	d90c      	bls.n	8006dc4 <_free_r+0x4c>
 8006daa:	6821      	ldr	r1, [r4, #0]
 8006dac:	1862      	adds	r2, r4, r1
 8006dae:	4293      	cmp	r3, r2
 8006db0:	bf04      	itt	eq
 8006db2:	681a      	ldreq	r2, [r3, #0]
 8006db4:	685b      	ldreq	r3, [r3, #4]
 8006db6:	6063      	str	r3, [r4, #4]
 8006db8:	bf04      	itt	eq
 8006dba:	1852      	addeq	r2, r2, r1
 8006dbc:	6022      	streq	r2, [r4, #0]
 8006dbe:	6004      	str	r4, [r0, #0]
 8006dc0:	e7ec      	b.n	8006d9c <_free_r+0x24>
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	b10a      	cbz	r2, 8006dcc <_free_r+0x54>
 8006dc8:	42a2      	cmp	r2, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x4a>
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	1858      	adds	r0, r3, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x74>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1858      	adds	r0, r3, r1
 8006dda:	4282      	cmp	r2, r0
 8006ddc:	6019      	str	r1, [r3, #0]
 8006dde:	d1dd      	bne.n	8006d9c <_free_r+0x24>
 8006de0:	6810      	ldr	r0, [r2, #0]
 8006de2:	6852      	ldr	r2, [r2, #4]
 8006de4:	605a      	str	r2, [r3, #4]
 8006de6:	4401      	add	r1, r0
 8006de8:	6019      	str	r1, [r3, #0]
 8006dea:	e7d7      	b.n	8006d9c <_free_r+0x24>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x7c>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d3      	b.n	8006d9c <_free_r+0x24>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428a      	cmp	r2, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6811      	ldreq	r1, [r2, #0]
 8006dfe:	6852      	ldreq	r2, [r2, #4]
 8006e00:	6062      	str	r2, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	605c      	str	r4, [r3, #4]
 8006e0a:	e7c7      	b.n	8006d9c <_free_r+0x24>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	2000022c 	.word	0x2000022c

08006e14 <_malloc_r>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	1ccd      	adds	r5, r1, #3
 8006e18:	f025 0503 	bic.w	r5, r5, #3
 8006e1c:	3508      	adds	r5, #8
 8006e1e:	2d0c      	cmp	r5, #12
 8006e20:	bf38      	it	cc
 8006e22:	250c      	movcc	r5, #12
 8006e24:	2d00      	cmp	r5, #0
 8006e26:	4606      	mov	r6, r0
 8006e28:	db01      	blt.n	8006e2e <_malloc_r+0x1a>
 8006e2a:	42a9      	cmp	r1, r5
 8006e2c:	d903      	bls.n	8006e36 <_malloc_r+0x22>
 8006e2e:	230c      	movs	r3, #12
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	2000      	movs	r0, #0
 8006e34:	bd70      	pop	{r4, r5, r6, pc}
 8006e36:	f003 fa08 	bl	800a24a <__malloc_lock>
 8006e3a:	4a21      	ldr	r2, [pc, #132]	; (8006ec0 <_malloc_r+0xac>)
 8006e3c:	6814      	ldr	r4, [r2, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	b991      	cbnz	r1, 8006e68 <_malloc_r+0x54>
 8006e42:	4c20      	ldr	r4, [pc, #128]	; (8006ec4 <_malloc_r+0xb0>)
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	b91b      	cbnz	r3, 8006e50 <_malloc_r+0x3c>
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fedf 	bl	8007c0c <_sbrk_r>
 8006e4e:	6020      	str	r0, [r4, #0]
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 feda 	bl	8007c0c <_sbrk_r>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d124      	bne.n	8006ea6 <_malloc_r+0x92>
 8006e5c:	230c      	movs	r3, #12
 8006e5e:	6033      	str	r3, [r6, #0]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f003 f9f3 	bl	800a24c <__malloc_unlock>
 8006e66:	e7e4      	b.n	8006e32 <_malloc_r+0x1e>
 8006e68:	680b      	ldr	r3, [r1, #0]
 8006e6a:	1b5b      	subs	r3, r3, r5
 8006e6c:	d418      	bmi.n	8006ea0 <_malloc_r+0x8c>
 8006e6e:	2b0b      	cmp	r3, #11
 8006e70:	d90f      	bls.n	8006e92 <_malloc_r+0x7e>
 8006e72:	600b      	str	r3, [r1, #0]
 8006e74:	50cd      	str	r5, [r1, r3]
 8006e76:	18cc      	adds	r4, r1, r3
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f003 f9e7 	bl	800a24c <__malloc_unlock>
 8006e7e:	f104 000b 	add.w	r0, r4, #11
 8006e82:	1d23      	adds	r3, r4, #4
 8006e84:	f020 0007 	bic.w	r0, r0, #7
 8006e88:	1ac3      	subs	r3, r0, r3
 8006e8a:	d0d3      	beq.n	8006e34 <_malloc_r+0x20>
 8006e8c:	425a      	negs	r2, r3
 8006e8e:	50e2      	str	r2, [r4, r3]
 8006e90:	e7d0      	b.n	8006e34 <_malloc_r+0x20>
 8006e92:	428c      	cmp	r4, r1
 8006e94:	684b      	ldr	r3, [r1, #4]
 8006e96:	bf16      	itet	ne
 8006e98:	6063      	strne	r3, [r4, #4]
 8006e9a:	6013      	streq	r3, [r2, #0]
 8006e9c:	460c      	movne	r4, r1
 8006e9e:	e7eb      	b.n	8006e78 <_malloc_r+0x64>
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	6849      	ldr	r1, [r1, #4]
 8006ea4:	e7cc      	b.n	8006e40 <_malloc_r+0x2c>
 8006ea6:	1cc4      	adds	r4, r0, #3
 8006ea8:	f024 0403 	bic.w	r4, r4, #3
 8006eac:	42a0      	cmp	r0, r4
 8006eae:	d005      	beq.n	8006ebc <_malloc_r+0xa8>
 8006eb0:	1a21      	subs	r1, r4, r0
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f000 feaa 	bl	8007c0c <_sbrk_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d0cf      	beq.n	8006e5c <_malloc_r+0x48>
 8006ebc:	6025      	str	r5, [r4, #0]
 8006ebe:	e7db      	b.n	8006e78 <_malloc_r+0x64>
 8006ec0:	2000022c 	.word	0x2000022c
 8006ec4:	20000230 	.word	0x20000230

08006ec8 <__cvt>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	ec55 4b10 	vmov	r4, r5, d0
 8006ed0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006ed2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	460e      	mov	r6, r1
 8006eda:	4691      	mov	r9, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	bfb8      	it	lt
 8006ee0:	4622      	movlt	r2, r4
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	f027 0720 	bic.w	r7, r7, #32
 8006ee8:	bfbb      	ittet	lt
 8006eea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eee:	461d      	movlt	r5, r3
 8006ef0:	2300      	movge	r3, #0
 8006ef2:	232d      	movlt	r3, #45	; 0x2d
 8006ef4:	bfb8      	it	lt
 8006ef6:	4614      	movlt	r4, r2
 8006ef8:	2f46      	cmp	r7, #70	; 0x46
 8006efa:	700b      	strb	r3, [r1, #0]
 8006efc:	d004      	beq.n	8006f08 <__cvt+0x40>
 8006efe:	2f45      	cmp	r7, #69	; 0x45
 8006f00:	d100      	bne.n	8006f04 <__cvt+0x3c>
 8006f02:	3601      	adds	r6, #1
 8006f04:	2102      	movs	r1, #2
 8006f06:	e000      	b.n	8006f0a <__cvt+0x42>
 8006f08:	2103      	movs	r1, #3
 8006f0a:	ab03      	add	r3, sp, #12
 8006f0c:	9301      	str	r3, [sp, #4]
 8006f0e:	ab02      	add	r3, sp, #8
 8006f10:	9300      	str	r3, [sp, #0]
 8006f12:	4632      	mov	r2, r6
 8006f14:	4653      	mov	r3, sl
 8006f16:	ec45 4b10 	vmov	d0, r4, r5
 8006f1a:	f001 fea9 	bl	8008c70 <_dtoa_r>
 8006f1e:	2f47      	cmp	r7, #71	; 0x47
 8006f20:	4680      	mov	r8, r0
 8006f22:	d102      	bne.n	8006f2a <__cvt+0x62>
 8006f24:	f019 0f01 	tst.w	r9, #1
 8006f28:	d026      	beq.n	8006f78 <__cvt+0xb0>
 8006f2a:	2f46      	cmp	r7, #70	; 0x46
 8006f2c:	eb08 0906 	add.w	r9, r8, r6
 8006f30:	d111      	bne.n	8006f56 <__cvt+0x8e>
 8006f32:	f898 3000 	ldrb.w	r3, [r8]
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d10a      	bne.n	8006f50 <__cvt+0x88>
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	4620      	mov	r0, r4
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f46:	b918      	cbnz	r0, 8006f50 <__cvt+0x88>
 8006f48:	f1c6 0601 	rsb	r6, r6, #1
 8006f4c:	f8ca 6000 	str.w	r6, [sl]
 8006f50:	f8da 3000 	ldr.w	r3, [sl]
 8006f54:	4499      	add	r9, r3
 8006f56:	2200      	movs	r2, #0
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f62:	b938      	cbnz	r0, 8006f74 <__cvt+0xac>
 8006f64:	2230      	movs	r2, #48	; 0x30
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	454b      	cmp	r3, r9
 8006f6a:	d205      	bcs.n	8006f78 <__cvt+0xb0>
 8006f6c:	1c59      	adds	r1, r3, #1
 8006f6e:	9103      	str	r1, [sp, #12]
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	e7f8      	b.n	8006f66 <__cvt+0x9e>
 8006f74:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f7c:	eba3 0308 	sub.w	r3, r3, r8
 8006f80:	4640      	mov	r0, r8
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	b004      	add	sp, #16
 8006f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f8a <__exponent>:
 8006f8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	4604      	mov	r4, r0
 8006f90:	bfba      	itte	lt
 8006f92:	4249      	neglt	r1, r1
 8006f94:	232d      	movlt	r3, #45	; 0x2d
 8006f96:	232b      	movge	r3, #43	; 0x2b
 8006f98:	2909      	cmp	r1, #9
 8006f9a:	f804 2b02 	strb.w	r2, [r4], #2
 8006f9e:	7043      	strb	r3, [r0, #1]
 8006fa0:	dd20      	ble.n	8006fe4 <__exponent+0x5a>
 8006fa2:	f10d 0307 	add.w	r3, sp, #7
 8006fa6:	461f      	mov	r7, r3
 8006fa8:	260a      	movs	r6, #10
 8006faa:	fb91 f5f6 	sdiv	r5, r1, r6
 8006fae:	fb06 1115 	mls	r1, r6, r5, r1
 8006fb2:	3130      	adds	r1, #48	; 0x30
 8006fb4:	2d09      	cmp	r5, #9
 8006fb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fba:	f103 32ff 	add.w	r2, r3, #4294967295
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	dc09      	bgt.n	8006fd6 <__exponent+0x4c>
 8006fc2:	3130      	adds	r1, #48	; 0x30
 8006fc4:	3b02      	subs	r3, #2
 8006fc6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fca:	42bb      	cmp	r3, r7
 8006fcc:	4622      	mov	r2, r4
 8006fce:	d304      	bcc.n	8006fda <__exponent+0x50>
 8006fd0:	1a10      	subs	r0, r2, r0
 8006fd2:	b003      	add	sp, #12
 8006fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	e7e7      	b.n	8006faa <__exponent+0x20>
 8006fda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fde:	f804 2b01 	strb.w	r2, [r4], #1
 8006fe2:	e7f2      	b.n	8006fca <__exponent+0x40>
 8006fe4:	2330      	movs	r3, #48	; 0x30
 8006fe6:	4419      	add	r1, r3
 8006fe8:	7083      	strb	r3, [r0, #2]
 8006fea:	1d02      	adds	r2, r0, #4
 8006fec:	70c1      	strb	r1, [r0, #3]
 8006fee:	e7ef      	b.n	8006fd0 <__exponent+0x46>

08006ff0 <_printf_float>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	b08d      	sub	sp, #52	; 0x34
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	461f      	mov	r7, r3
 8007000:	4605      	mov	r5, r0
 8007002:	f003 f893 	bl	800a12c <_localeconv_r>
 8007006:	6803      	ldr	r3, [r0, #0]
 8007008:	9304      	str	r3, [sp, #16]
 800700a:	4618      	mov	r0, r3
 800700c:	f7f9 f8e8 	bl	80001e0 <strlen>
 8007010:	2300      	movs	r3, #0
 8007012:	930a      	str	r3, [sp, #40]	; 0x28
 8007014:	f8d8 3000 	ldr.w	r3, [r8]
 8007018:	9005      	str	r0, [sp, #20]
 800701a:	3307      	adds	r3, #7
 800701c:	f023 0307 	bic.w	r3, r3, #7
 8007020:	f103 0208 	add.w	r2, r3, #8
 8007024:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007028:	f8d4 b000 	ldr.w	fp, [r4]
 800702c:	f8c8 2000 	str.w	r2, [r8]
 8007030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007038:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800703c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	f8cd 8018 	str.w	r8, [sp, #24]
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	4ba7      	ldr	r3, [pc, #668]	; (80072e8 <_printf_float+0x2f8>)
 800704c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007050:	f7f9 fd74 	bl	8000b3c <__aeabi_dcmpun>
 8007054:	bb70      	cbnz	r0, 80070b4 <_printf_float+0xc4>
 8007056:	f04f 32ff 	mov.w	r2, #4294967295
 800705a:	4ba3      	ldr	r3, [pc, #652]	; (80072e8 <_printf_float+0x2f8>)
 800705c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007060:	f7f9 fd4e 	bl	8000b00 <__aeabi_dcmple>
 8007064:	bb30      	cbnz	r0, 80070b4 <_printf_float+0xc4>
 8007066:	2200      	movs	r2, #0
 8007068:	2300      	movs	r3, #0
 800706a:	4640      	mov	r0, r8
 800706c:	4649      	mov	r1, r9
 800706e:	f7f9 fd3d 	bl	8000aec <__aeabi_dcmplt>
 8007072:	b110      	cbz	r0, 800707a <_printf_float+0x8a>
 8007074:	232d      	movs	r3, #45	; 0x2d
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707a:	4a9c      	ldr	r2, [pc, #624]	; (80072ec <_printf_float+0x2fc>)
 800707c:	4b9c      	ldr	r3, [pc, #624]	; (80072f0 <_printf_float+0x300>)
 800707e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007082:	bf8c      	ite	hi
 8007084:	4690      	movhi	r8, r2
 8007086:	4698      	movls	r8, r3
 8007088:	2303      	movs	r3, #3
 800708a:	f02b 0204 	bic.w	r2, fp, #4
 800708e:	6123      	str	r3, [r4, #16]
 8007090:	6022      	str	r2, [r4, #0]
 8007092:	f04f 0900 	mov.w	r9, #0
 8007096:	9700      	str	r7, [sp, #0]
 8007098:	4633      	mov	r3, r6
 800709a:	aa0b      	add	r2, sp, #44	; 0x2c
 800709c:	4621      	mov	r1, r4
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 f9e6 	bl	8007470 <_printf_common>
 80070a4:	3001      	adds	r0, #1
 80070a6:	f040 808d 	bne.w	80071c4 <_printf_float+0x1d4>
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	b00d      	add	sp, #52	; 0x34
 80070b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fd3e 	bl	8000b3c <__aeabi_dcmpun>
 80070c0:	b110      	cbz	r0, 80070c8 <_printf_float+0xd8>
 80070c2:	4a8c      	ldr	r2, [pc, #560]	; (80072f4 <_printf_float+0x304>)
 80070c4:	4b8c      	ldr	r3, [pc, #560]	; (80072f8 <_printf_float+0x308>)
 80070c6:	e7da      	b.n	800707e <_printf_float+0x8e>
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	1c4b      	adds	r3, r1, #1
 80070cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80070d0:	a80a      	add	r0, sp, #40	; 0x28
 80070d2:	d13e      	bne.n	8007152 <_printf_float+0x162>
 80070d4:	2306      	movs	r3, #6
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	2300      	movs	r3, #0
 80070da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80070de:	ab09      	add	r3, sp, #36	; 0x24
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	ec49 8b10 	vmov	d0, r8, r9
 80070e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070ea:	6022      	str	r2, [r4, #0]
 80070ec:	f8cd a004 	str.w	sl, [sp, #4]
 80070f0:	6861      	ldr	r1, [r4, #4]
 80070f2:	4628      	mov	r0, r5
 80070f4:	f7ff fee8 	bl	8006ec8 <__cvt>
 80070f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80070fc:	2b47      	cmp	r3, #71	; 0x47
 80070fe:	4680      	mov	r8, r0
 8007100:	d109      	bne.n	8007116 <_printf_float+0x126>
 8007102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007104:	1cd8      	adds	r0, r3, #3
 8007106:	db02      	blt.n	800710e <_printf_float+0x11e>
 8007108:	6862      	ldr	r2, [r4, #4]
 800710a:	4293      	cmp	r3, r2
 800710c:	dd47      	ble.n	800719e <_printf_float+0x1ae>
 800710e:	f1aa 0a02 	sub.w	sl, sl, #2
 8007112:	fa5f fa8a 	uxtb.w	sl, sl
 8007116:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800711a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800711c:	d824      	bhi.n	8007168 <_printf_float+0x178>
 800711e:	3901      	subs	r1, #1
 8007120:	4652      	mov	r2, sl
 8007122:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007126:	9109      	str	r1, [sp, #36]	; 0x24
 8007128:	f7ff ff2f 	bl	8006f8a <__exponent>
 800712c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800712e:	1813      	adds	r3, r2, r0
 8007130:	2a01      	cmp	r2, #1
 8007132:	4681      	mov	r9, r0
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	dc02      	bgt.n	800713e <_printf_float+0x14e>
 8007138:	6822      	ldr	r2, [r4, #0]
 800713a:	07d1      	lsls	r1, r2, #31
 800713c:	d501      	bpl.n	8007142 <_printf_float+0x152>
 800713e:	3301      	adds	r3, #1
 8007140:	6123      	str	r3, [r4, #16]
 8007142:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007146:	2b00      	cmp	r3, #0
 8007148:	d0a5      	beq.n	8007096 <_printf_float+0xa6>
 800714a:	232d      	movs	r3, #45	; 0x2d
 800714c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007150:	e7a1      	b.n	8007096 <_printf_float+0xa6>
 8007152:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007156:	f000 8177 	beq.w	8007448 <_printf_float+0x458>
 800715a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800715e:	d1bb      	bne.n	80070d8 <_printf_float+0xe8>
 8007160:	2900      	cmp	r1, #0
 8007162:	d1b9      	bne.n	80070d8 <_printf_float+0xe8>
 8007164:	2301      	movs	r3, #1
 8007166:	e7b6      	b.n	80070d6 <_printf_float+0xe6>
 8007168:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800716c:	d119      	bne.n	80071a2 <_printf_float+0x1b2>
 800716e:	2900      	cmp	r1, #0
 8007170:	6863      	ldr	r3, [r4, #4]
 8007172:	dd0c      	ble.n	800718e <_printf_float+0x19e>
 8007174:	6121      	str	r1, [r4, #16]
 8007176:	b913      	cbnz	r3, 800717e <_printf_float+0x18e>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	07d2      	lsls	r2, r2, #31
 800717c:	d502      	bpl.n	8007184 <_printf_float+0x194>
 800717e:	3301      	adds	r3, #1
 8007180:	440b      	add	r3, r1
 8007182:	6123      	str	r3, [r4, #16]
 8007184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007186:	65a3      	str	r3, [r4, #88]	; 0x58
 8007188:	f04f 0900 	mov.w	r9, #0
 800718c:	e7d9      	b.n	8007142 <_printf_float+0x152>
 800718e:	b913      	cbnz	r3, 8007196 <_printf_float+0x1a6>
 8007190:	6822      	ldr	r2, [r4, #0]
 8007192:	07d0      	lsls	r0, r2, #31
 8007194:	d501      	bpl.n	800719a <_printf_float+0x1aa>
 8007196:	3302      	adds	r3, #2
 8007198:	e7f3      	b.n	8007182 <_printf_float+0x192>
 800719a:	2301      	movs	r3, #1
 800719c:	e7f1      	b.n	8007182 <_printf_float+0x192>
 800719e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80071a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071a6:	4293      	cmp	r3, r2
 80071a8:	db05      	blt.n	80071b6 <_printf_float+0x1c6>
 80071aa:	6822      	ldr	r2, [r4, #0]
 80071ac:	6123      	str	r3, [r4, #16]
 80071ae:	07d1      	lsls	r1, r2, #31
 80071b0:	d5e8      	bpl.n	8007184 <_printf_float+0x194>
 80071b2:	3301      	adds	r3, #1
 80071b4:	e7e5      	b.n	8007182 <_printf_float+0x192>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	bfd4      	ite	le
 80071ba:	f1c3 0302 	rsble	r3, r3, #2
 80071be:	2301      	movgt	r3, #1
 80071c0:	4413      	add	r3, r2
 80071c2:	e7de      	b.n	8007182 <_printf_float+0x192>
 80071c4:	6823      	ldr	r3, [r4, #0]
 80071c6:	055a      	lsls	r2, r3, #21
 80071c8:	d407      	bmi.n	80071da <_printf_float+0x1ea>
 80071ca:	6923      	ldr	r3, [r4, #16]
 80071cc:	4642      	mov	r2, r8
 80071ce:	4631      	mov	r1, r6
 80071d0:	4628      	mov	r0, r5
 80071d2:	47b8      	blx	r7
 80071d4:	3001      	adds	r0, #1
 80071d6:	d12b      	bne.n	8007230 <_printf_float+0x240>
 80071d8:	e767      	b.n	80070aa <_printf_float+0xba>
 80071da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80071de:	f240 80dc 	bls.w	800739a <_printf_float+0x3aa>
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071ea:	f7f9 fc75 	bl	8000ad8 <__aeabi_dcmpeq>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d033      	beq.n	800725a <_printf_float+0x26a>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4a41      	ldr	r2, [pc, #260]	; (80072fc <_printf_float+0x30c>)
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f af54 	beq.w	80070aa <_printf_float+0xba>
 8007202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007206:	429a      	cmp	r2, r3
 8007208:	db02      	blt.n	8007210 <_printf_float+0x220>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	07d8      	lsls	r0, r3, #31
 800720e:	d50f      	bpl.n	8007230 <_printf_float+0x240>
 8007210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007214:	4631      	mov	r1, r6
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	f43f af45 	beq.w	80070aa <_printf_float+0xba>
 8007220:	f04f 0800 	mov.w	r8, #0
 8007224:	f104 091a 	add.w	r9, r4, #26
 8007228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722a:	3b01      	subs	r3, #1
 800722c:	4543      	cmp	r3, r8
 800722e:	dc09      	bgt.n	8007244 <_printf_float+0x254>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	079b      	lsls	r3, r3, #30
 8007234:	f100 8103 	bmi.w	800743e <_printf_float+0x44e>
 8007238:	68e0      	ldr	r0, [r4, #12]
 800723a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800723c:	4298      	cmp	r0, r3
 800723e:	bfb8      	it	lt
 8007240:	4618      	movlt	r0, r3
 8007242:	e734      	b.n	80070ae <_printf_float+0xbe>
 8007244:	2301      	movs	r3, #1
 8007246:	464a      	mov	r2, r9
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f af2b 	beq.w	80070aa <_printf_float+0xba>
 8007254:	f108 0801 	add.w	r8, r8, #1
 8007258:	e7e6      	b.n	8007228 <_printf_float+0x238>
 800725a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc2b      	bgt.n	80072b8 <_printf_float+0x2c8>
 8007260:	2301      	movs	r3, #1
 8007262:	4a26      	ldr	r2, [pc, #152]	; (80072fc <_printf_float+0x30c>)
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	f43f af1d 	beq.w	80070aa <_printf_float+0xba>
 8007270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007272:	b923      	cbnz	r3, 800727e <_printf_float+0x28e>
 8007274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007276:	b913      	cbnz	r3, 800727e <_printf_float+0x28e>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07d9      	lsls	r1, r3, #31
 800727c:	d5d8      	bpl.n	8007230 <_printf_float+0x240>
 800727e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007282:	4631      	mov	r1, r6
 8007284:	4628      	mov	r0, r5
 8007286:	47b8      	blx	r7
 8007288:	3001      	adds	r0, #1
 800728a:	f43f af0e 	beq.w	80070aa <_printf_float+0xba>
 800728e:	f04f 0900 	mov.w	r9, #0
 8007292:	f104 0a1a 	add.w	sl, r4, #26
 8007296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007298:	425b      	negs	r3, r3
 800729a:	454b      	cmp	r3, r9
 800729c:	dc01      	bgt.n	80072a2 <_printf_float+0x2b2>
 800729e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a0:	e794      	b.n	80071cc <_printf_float+0x1dc>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4652      	mov	r2, sl
 80072a6:	4631      	mov	r1, r6
 80072a8:	4628      	mov	r0, r5
 80072aa:	47b8      	blx	r7
 80072ac:	3001      	adds	r0, #1
 80072ae:	f43f aefc 	beq.w	80070aa <_printf_float+0xba>
 80072b2:	f109 0901 	add.w	r9, r9, #1
 80072b6:	e7ee      	b.n	8007296 <_printf_float+0x2a6>
 80072b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072bc:	429a      	cmp	r2, r3
 80072be:	bfa8      	it	ge
 80072c0:	461a      	movge	r2, r3
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	4691      	mov	r9, r2
 80072c6:	dd07      	ble.n	80072d8 <_printf_float+0x2e8>
 80072c8:	4613      	mov	r3, r2
 80072ca:	4631      	mov	r1, r6
 80072cc:	4642      	mov	r2, r8
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	f43f aee9 	beq.w	80070aa <_printf_float+0xba>
 80072d8:	f104 031a 	add.w	r3, r4, #26
 80072dc:	f04f 0b00 	mov.w	fp, #0
 80072e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e4:	9306      	str	r3, [sp, #24]
 80072e6:	e015      	b.n	8007314 <_printf_float+0x324>
 80072e8:	7fefffff 	.word	0x7fefffff
 80072ec:	0800b060 	.word	0x0800b060
 80072f0:	0800b05c 	.word	0x0800b05c
 80072f4:	0800b068 	.word	0x0800b068
 80072f8:	0800b064 	.word	0x0800b064
 80072fc:	0800b06c 	.word	0x0800b06c
 8007300:	2301      	movs	r3, #1
 8007302:	9a06      	ldr	r2, [sp, #24]
 8007304:	4631      	mov	r1, r6
 8007306:	4628      	mov	r0, r5
 8007308:	47b8      	blx	r7
 800730a:	3001      	adds	r0, #1
 800730c:	f43f aecd 	beq.w	80070aa <_printf_float+0xba>
 8007310:	f10b 0b01 	add.w	fp, fp, #1
 8007314:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007318:	ebaa 0309 	sub.w	r3, sl, r9
 800731c:	455b      	cmp	r3, fp
 800731e:	dcef      	bgt.n	8007300 <_printf_float+0x310>
 8007320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007324:	429a      	cmp	r2, r3
 8007326:	44d0      	add	r8, sl
 8007328:	db15      	blt.n	8007356 <_printf_float+0x366>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	07da      	lsls	r2, r3, #31
 800732e:	d412      	bmi.n	8007356 <_printf_float+0x366>
 8007330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007334:	eba3 020a 	sub.w	r2, r3, sl
 8007338:	eba3 0a01 	sub.w	sl, r3, r1
 800733c:	4592      	cmp	sl, r2
 800733e:	bfa8      	it	ge
 8007340:	4692      	movge	sl, r2
 8007342:	f1ba 0f00 	cmp.w	sl, #0
 8007346:	dc0e      	bgt.n	8007366 <_printf_float+0x376>
 8007348:	f04f 0800 	mov.w	r8, #0
 800734c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007350:	f104 091a 	add.w	r9, r4, #26
 8007354:	e019      	b.n	800738a <_printf_float+0x39a>
 8007356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800735a:	4631      	mov	r1, r6
 800735c:	4628      	mov	r0, r5
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	d1e5      	bne.n	8007330 <_printf_float+0x340>
 8007364:	e6a1      	b.n	80070aa <_printf_float+0xba>
 8007366:	4653      	mov	r3, sl
 8007368:	4642      	mov	r2, r8
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	d1e9      	bne.n	8007348 <_printf_float+0x358>
 8007374:	e699      	b.n	80070aa <_printf_float+0xba>
 8007376:	2301      	movs	r3, #1
 8007378:	464a      	mov	r2, r9
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	f43f ae92 	beq.w	80070aa <_printf_float+0xba>
 8007386:	f108 0801 	add.w	r8, r8, #1
 800738a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	eba3 030a 	sub.w	r3, r3, sl
 8007394:	4543      	cmp	r3, r8
 8007396:	dcee      	bgt.n	8007376 <_printf_float+0x386>
 8007398:	e74a      	b.n	8007230 <_printf_float+0x240>
 800739a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739c:	2a01      	cmp	r2, #1
 800739e:	dc01      	bgt.n	80073a4 <_printf_float+0x3b4>
 80073a0:	07db      	lsls	r3, r3, #31
 80073a2:	d53a      	bpl.n	800741a <_printf_float+0x42a>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4642      	mov	r2, r8
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f ae7b 	beq.w	80070aa <_printf_float+0xba>
 80073b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f108 0801 	add.w	r8, r8, #1
 80073c4:	f43f ae71 	beq.w	80070aa <_printf_float+0xba>
 80073c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ca:	2200      	movs	r2, #0
 80073cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80073d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073d4:	2300      	movs	r3, #0
 80073d6:	f7f9 fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 80073da:	b9c8      	cbnz	r0, 8007410 <_printf_float+0x420>
 80073dc:	4653      	mov	r3, sl
 80073de:	4642      	mov	r2, r8
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b8      	blx	r7
 80073e6:	3001      	adds	r0, #1
 80073e8:	d10e      	bne.n	8007408 <_printf_float+0x418>
 80073ea:	e65e      	b.n	80070aa <_printf_float+0xba>
 80073ec:	2301      	movs	r3, #1
 80073ee:	4652      	mov	r2, sl
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f ae57 	beq.w	80070aa <_printf_float+0xba>
 80073fc:	f108 0801 	add.w	r8, r8, #1
 8007400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007402:	3b01      	subs	r3, #1
 8007404:	4543      	cmp	r3, r8
 8007406:	dcf1      	bgt.n	80073ec <_printf_float+0x3fc>
 8007408:	464b      	mov	r3, r9
 800740a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800740e:	e6de      	b.n	80071ce <_printf_float+0x1de>
 8007410:	f04f 0800 	mov.w	r8, #0
 8007414:	f104 0a1a 	add.w	sl, r4, #26
 8007418:	e7f2      	b.n	8007400 <_printf_float+0x410>
 800741a:	2301      	movs	r3, #1
 800741c:	e7df      	b.n	80073de <_printf_float+0x3ee>
 800741e:	2301      	movs	r3, #1
 8007420:	464a      	mov	r2, r9
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae3e 	beq.w	80070aa <_printf_float+0xba>
 800742e:	f108 0801 	add.w	r8, r8, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007436:	1a9b      	subs	r3, r3, r2
 8007438:	4543      	cmp	r3, r8
 800743a:	dcf0      	bgt.n	800741e <_printf_float+0x42e>
 800743c:	e6fc      	b.n	8007238 <_printf_float+0x248>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 0919 	add.w	r9, r4, #25
 8007446:	e7f4      	b.n	8007432 <_printf_float+0x442>
 8007448:	2900      	cmp	r1, #0
 800744a:	f43f ae8b 	beq.w	8007164 <_printf_float+0x174>
 800744e:	2300      	movs	r3, #0
 8007450:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007454:	ab09      	add	r3, sp, #36	; 0x24
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	ec49 8b10 	vmov	d0, r8, r9
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	f8cd a004 	str.w	sl, [sp, #4]
 8007462:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007466:	4628      	mov	r0, r5
 8007468:	f7ff fd2e 	bl	8006ec8 <__cvt>
 800746c:	4680      	mov	r8, r0
 800746e:	e648      	b.n	8007102 <_printf_float+0x112>

08007470 <_printf_common>:
 8007470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	4691      	mov	r9, r2
 8007476:	461f      	mov	r7, r3
 8007478:	688a      	ldr	r2, [r1, #8]
 800747a:	690b      	ldr	r3, [r1, #16]
 800747c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007480:	4293      	cmp	r3, r2
 8007482:	bfb8      	it	lt
 8007484:	4613      	movlt	r3, r2
 8007486:	f8c9 3000 	str.w	r3, [r9]
 800748a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800748e:	4606      	mov	r6, r0
 8007490:	460c      	mov	r4, r1
 8007492:	b112      	cbz	r2, 800749a <_printf_common+0x2a>
 8007494:	3301      	adds	r3, #1
 8007496:	f8c9 3000 	str.w	r3, [r9]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80074a4:	3302      	addmi	r3, #2
 80074a6:	f8c9 3000 	strmi.w	r3, [r9]
 80074aa:	6825      	ldr	r5, [r4, #0]
 80074ac:	f015 0506 	ands.w	r5, r5, #6
 80074b0:	d107      	bne.n	80074c2 <_printf_common+0x52>
 80074b2:	f104 0a19 	add.w	sl, r4, #25
 80074b6:	68e3      	ldr	r3, [r4, #12]
 80074b8:	f8d9 2000 	ldr.w	r2, [r9]
 80074bc:	1a9b      	subs	r3, r3, r2
 80074be:	42ab      	cmp	r3, r5
 80074c0:	dc28      	bgt.n	8007514 <_printf_common+0xa4>
 80074c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80074c6:	6822      	ldr	r2, [r4, #0]
 80074c8:	3300      	adds	r3, #0
 80074ca:	bf18      	it	ne
 80074cc:	2301      	movne	r3, #1
 80074ce:	0692      	lsls	r2, r2, #26
 80074d0:	d42d      	bmi.n	800752e <_printf_common+0xbe>
 80074d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d6:	4639      	mov	r1, r7
 80074d8:	4630      	mov	r0, r6
 80074da:	47c0      	blx	r8
 80074dc:	3001      	adds	r0, #1
 80074de:	d020      	beq.n	8007522 <_printf_common+0xb2>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	68e5      	ldr	r5, [r4, #12]
 80074e4:	f8d9 2000 	ldr.w	r2, [r9]
 80074e8:	f003 0306 	and.w	r3, r3, #6
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	bf08      	it	eq
 80074f0:	1aad      	subeq	r5, r5, r2
 80074f2:	68a3      	ldr	r3, [r4, #8]
 80074f4:	6922      	ldr	r2, [r4, #16]
 80074f6:	bf0c      	ite	eq
 80074f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074fc:	2500      	movne	r5, #0
 80074fe:	4293      	cmp	r3, r2
 8007500:	bfc4      	itt	gt
 8007502:	1a9b      	subgt	r3, r3, r2
 8007504:	18ed      	addgt	r5, r5, r3
 8007506:	f04f 0900 	mov.w	r9, #0
 800750a:	341a      	adds	r4, #26
 800750c:	454d      	cmp	r5, r9
 800750e:	d11a      	bne.n	8007546 <_printf_common+0xd6>
 8007510:	2000      	movs	r0, #0
 8007512:	e008      	b.n	8007526 <_printf_common+0xb6>
 8007514:	2301      	movs	r3, #1
 8007516:	4652      	mov	r2, sl
 8007518:	4639      	mov	r1, r7
 800751a:	4630      	mov	r0, r6
 800751c:	47c0      	blx	r8
 800751e:	3001      	adds	r0, #1
 8007520:	d103      	bne.n	800752a <_printf_common+0xba>
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752a:	3501      	adds	r5, #1
 800752c:	e7c3      	b.n	80074b6 <_printf_common+0x46>
 800752e:	18e1      	adds	r1, r4, r3
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	2030      	movs	r0, #48	; 0x30
 8007534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007538:	4422      	add	r2, r4
 800753a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800753e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007542:	3302      	adds	r3, #2
 8007544:	e7c5      	b.n	80074d2 <_printf_common+0x62>
 8007546:	2301      	movs	r3, #1
 8007548:	4622      	mov	r2, r4
 800754a:	4639      	mov	r1, r7
 800754c:	4630      	mov	r0, r6
 800754e:	47c0      	blx	r8
 8007550:	3001      	adds	r0, #1
 8007552:	d0e6      	beq.n	8007522 <_printf_common+0xb2>
 8007554:	f109 0901 	add.w	r9, r9, #1
 8007558:	e7d8      	b.n	800750c <_printf_common+0x9c>
	...

0800755c <_printf_i>:
 800755c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007564:	460c      	mov	r4, r1
 8007566:	7e09      	ldrb	r1, [r1, #24]
 8007568:	b085      	sub	sp, #20
 800756a:	296e      	cmp	r1, #110	; 0x6e
 800756c:	4617      	mov	r7, r2
 800756e:	4606      	mov	r6, r0
 8007570:	4698      	mov	r8, r3
 8007572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007574:	f000 80b3 	beq.w	80076de <_printf_i+0x182>
 8007578:	d822      	bhi.n	80075c0 <_printf_i+0x64>
 800757a:	2963      	cmp	r1, #99	; 0x63
 800757c:	d036      	beq.n	80075ec <_printf_i+0x90>
 800757e:	d80a      	bhi.n	8007596 <_printf_i+0x3a>
 8007580:	2900      	cmp	r1, #0
 8007582:	f000 80b9 	beq.w	80076f8 <_printf_i+0x19c>
 8007586:	2958      	cmp	r1, #88	; 0x58
 8007588:	f000 8083 	beq.w	8007692 <_printf_i+0x136>
 800758c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007594:	e032      	b.n	80075fc <_printf_i+0xa0>
 8007596:	2964      	cmp	r1, #100	; 0x64
 8007598:	d001      	beq.n	800759e <_printf_i+0x42>
 800759a:	2969      	cmp	r1, #105	; 0x69
 800759c:	d1f6      	bne.n	800758c <_printf_i+0x30>
 800759e:	6820      	ldr	r0, [r4, #0]
 80075a0:	6813      	ldr	r3, [r2, #0]
 80075a2:	0605      	lsls	r5, r0, #24
 80075a4:	f103 0104 	add.w	r1, r3, #4
 80075a8:	d52a      	bpl.n	8007600 <_printf_i+0xa4>
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6011      	str	r1, [r2, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da03      	bge.n	80075ba <_printf_i+0x5e>
 80075b2:	222d      	movs	r2, #45	; 0x2d
 80075b4:	425b      	negs	r3, r3
 80075b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80075ba:	486f      	ldr	r0, [pc, #444]	; (8007778 <_printf_i+0x21c>)
 80075bc:	220a      	movs	r2, #10
 80075be:	e039      	b.n	8007634 <_printf_i+0xd8>
 80075c0:	2973      	cmp	r1, #115	; 0x73
 80075c2:	f000 809d 	beq.w	8007700 <_printf_i+0x1a4>
 80075c6:	d808      	bhi.n	80075da <_printf_i+0x7e>
 80075c8:	296f      	cmp	r1, #111	; 0x6f
 80075ca:	d020      	beq.n	800760e <_printf_i+0xb2>
 80075cc:	2970      	cmp	r1, #112	; 0x70
 80075ce:	d1dd      	bne.n	800758c <_printf_i+0x30>
 80075d0:	6823      	ldr	r3, [r4, #0]
 80075d2:	f043 0320 	orr.w	r3, r3, #32
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	e003      	b.n	80075e2 <_printf_i+0x86>
 80075da:	2975      	cmp	r1, #117	; 0x75
 80075dc:	d017      	beq.n	800760e <_printf_i+0xb2>
 80075de:	2978      	cmp	r1, #120	; 0x78
 80075e0:	d1d4      	bne.n	800758c <_printf_i+0x30>
 80075e2:	2378      	movs	r3, #120	; 0x78
 80075e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075e8:	4864      	ldr	r0, [pc, #400]	; (800777c <_printf_i+0x220>)
 80075ea:	e055      	b.n	8007698 <_printf_i+0x13c>
 80075ec:	6813      	ldr	r3, [r2, #0]
 80075ee:	1d19      	adds	r1, r3, #4
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6011      	str	r1, [r2, #0]
 80075f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075fc:	2301      	movs	r3, #1
 80075fe:	e08c      	b.n	800771a <_printf_i+0x1be>
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6011      	str	r1, [r2, #0]
 8007604:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007608:	bf18      	it	ne
 800760a:	b21b      	sxthne	r3, r3
 800760c:	e7cf      	b.n	80075ae <_printf_i+0x52>
 800760e:	6813      	ldr	r3, [r2, #0]
 8007610:	6825      	ldr	r5, [r4, #0]
 8007612:	1d18      	adds	r0, r3, #4
 8007614:	6010      	str	r0, [r2, #0]
 8007616:	0628      	lsls	r0, r5, #24
 8007618:	d501      	bpl.n	800761e <_printf_i+0xc2>
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	e002      	b.n	8007624 <_printf_i+0xc8>
 800761e:	0668      	lsls	r0, r5, #25
 8007620:	d5fb      	bpl.n	800761a <_printf_i+0xbe>
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	4854      	ldr	r0, [pc, #336]	; (8007778 <_printf_i+0x21c>)
 8007626:	296f      	cmp	r1, #111	; 0x6f
 8007628:	bf14      	ite	ne
 800762a:	220a      	movne	r2, #10
 800762c:	2208      	moveq	r2, #8
 800762e:	2100      	movs	r1, #0
 8007630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007634:	6865      	ldr	r5, [r4, #4]
 8007636:	60a5      	str	r5, [r4, #8]
 8007638:	2d00      	cmp	r5, #0
 800763a:	f2c0 8095 	blt.w	8007768 <_printf_i+0x20c>
 800763e:	6821      	ldr	r1, [r4, #0]
 8007640:	f021 0104 	bic.w	r1, r1, #4
 8007644:	6021      	str	r1, [r4, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d13d      	bne.n	80076c6 <_printf_i+0x16a>
 800764a:	2d00      	cmp	r5, #0
 800764c:	f040 808e 	bne.w	800776c <_printf_i+0x210>
 8007650:	4665      	mov	r5, ip
 8007652:	2a08      	cmp	r2, #8
 8007654:	d10b      	bne.n	800766e <_printf_i+0x112>
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d508      	bpl.n	800766e <_printf_i+0x112>
 800765c:	6923      	ldr	r3, [r4, #16]
 800765e:	6862      	ldr	r2, [r4, #4]
 8007660:	429a      	cmp	r2, r3
 8007662:	bfde      	ittt	le
 8007664:	2330      	movle	r3, #48	; 0x30
 8007666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800766a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800766e:	ebac 0305 	sub.w	r3, ip, r5
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f8cd 8000 	str.w	r8, [sp]
 8007678:	463b      	mov	r3, r7
 800767a:	aa03      	add	r2, sp, #12
 800767c:	4621      	mov	r1, r4
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff fef6 	bl	8007470 <_printf_common>
 8007684:	3001      	adds	r0, #1
 8007686:	d14d      	bne.n	8007724 <_printf_i+0x1c8>
 8007688:	f04f 30ff 	mov.w	r0, #4294967295
 800768c:	b005      	add	sp, #20
 800768e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007692:	4839      	ldr	r0, [pc, #228]	; (8007778 <_printf_i+0x21c>)
 8007694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007698:	6813      	ldr	r3, [r2, #0]
 800769a:	6821      	ldr	r1, [r4, #0]
 800769c:	1d1d      	adds	r5, r3, #4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6015      	str	r5, [r2, #0]
 80076a2:	060a      	lsls	r2, r1, #24
 80076a4:	d50b      	bpl.n	80076be <_printf_i+0x162>
 80076a6:	07ca      	lsls	r2, r1, #31
 80076a8:	bf44      	itt	mi
 80076aa:	f041 0120 	orrmi.w	r1, r1, #32
 80076ae:	6021      	strmi	r1, [r4, #0]
 80076b0:	b91b      	cbnz	r3, 80076ba <_printf_i+0x15e>
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	f022 0220 	bic.w	r2, r2, #32
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	2210      	movs	r2, #16
 80076bc:	e7b7      	b.n	800762e <_printf_i+0xd2>
 80076be:	064d      	lsls	r5, r1, #25
 80076c0:	bf48      	it	mi
 80076c2:	b29b      	uxthmi	r3, r3
 80076c4:	e7ef      	b.n	80076a6 <_printf_i+0x14a>
 80076c6:	4665      	mov	r5, ip
 80076c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80076cc:	fb02 3311 	mls	r3, r2, r1, r3
 80076d0:	5cc3      	ldrb	r3, [r0, r3]
 80076d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80076d6:	460b      	mov	r3, r1
 80076d8:	2900      	cmp	r1, #0
 80076da:	d1f5      	bne.n	80076c8 <_printf_i+0x16c>
 80076dc:	e7b9      	b.n	8007652 <_printf_i+0xf6>
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	6961      	ldr	r1, [r4, #20]
 80076e4:	1d18      	adds	r0, r3, #4
 80076e6:	6010      	str	r0, [r2, #0]
 80076e8:	0628      	lsls	r0, r5, #24
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	d501      	bpl.n	80076f2 <_printf_i+0x196>
 80076ee:	6019      	str	r1, [r3, #0]
 80076f0:	e002      	b.n	80076f8 <_printf_i+0x19c>
 80076f2:	066a      	lsls	r2, r5, #25
 80076f4:	d5fb      	bpl.n	80076ee <_printf_i+0x192>
 80076f6:	8019      	strh	r1, [r3, #0]
 80076f8:	2300      	movs	r3, #0
 80076fa:	6123      	str	r3, [r4, #16]
 80076fc:	4665      	mov	r5, ip
 80076fe:	e7b9      	b.n	8007674 <_printf_i+0x118>
 8007700:	6813      	ldr	r3, [r2, #0]
 8007702:	1d19      	adds	r1, r3, #4
 8007704:	6011      	str	r1, [r2, #0]
 8007706:	681d      	ldr	r5, [r3, #0]
 8007708:	6862      	ldr	r2, [r4, #4]
 800770a:	2100      	movs	r1, #0
 800770c:	4628      	mov	r0, r5
 800770e:	f7f8 fd6f 	bl	80001f0 <memchr>
 8007712:	b108      	cbz	r0, 8007718 <_printf_i+0x1bc>
 8007714:	1b40      	subs	r0, r0, r5
 8007716:	6060      	str	r0, [r4, #4]
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	6123      	str	r3, [r4, #16]
 800771c:	2300      	movs	r3, #0
 800771e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007722:	e7a7      	b.n	8007674 <_printf_i+0x118>
 8007724:	6923      	ldr	r3, [r4, #16]
 8007726:	462a      	mov	r2, r5
 8007728:	4639      	mov	r1, r7
 800772a:	4630      	mov	r0, r6
 800772c:	47c0      	blx	r8
 800772e:	3001      	adds	r0, #1
 8007730:	d0aa      	beq.n	8007688 <_printf_i+0x12c>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	079b      	lsls	r3, r3, #30
 8007736:	d413      	bmi.n	8007760 <_printf_i+0x204>
 8007738:	68e0      	ldr	r0, [r4, #12]
 800773a:	9b03      	ldr	r3, [sp, #12]
 800773c:	4298      	cmp	r0, r3
 800773e:	bfb8      	it	lt
 8007740:	4618      	movlt	r0, r3
 8007742:	e7a3      	b.n	800768c <_printf_i+0x130>
 8007744:	2301      	movs	r3, #1
 8007746:	464a      	mov	r2, r9
 8007748:	4639      	mov	r1, r7
 800774a:	4630      	mov	r0, r6
 800774c:	47c0      	blx	r8
 800774e:	3001      	adds	r0, #1
 8007750:	d09a      	beq.n	8007688 <_printf_i+0x12c>
 8007752:	3501      	adds	r5, #1
 8007754:	68e3      	ldr	r3, [r4, #12]
 8007756:	9a03      	ldr	r2, [sp, #12]
 8007758:	1a9b      	subs	r3, r3, r2
 800775a:	42ab      	cmp	r3, r5
 800775c:	dcf2      	bgt.n	8007744 <_printf_i+0x1e8>
 800775e:	e7eb      	b.n	8007738 <_printf_i+0x1dc>
 8007760:	2500      	movs	r5, #0
 8007762:	f104 0919 	add.w	r9, r4, #25
 8007766:	e7f5      	b.n	8007754 <_printf_i+0x1f8>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1ac      	bne.n	80076c6 <_printf_i+0x16a>
 800776c:	7803      	ldrb	r3, [r0, #0]
 800776e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007776:	e76c      	b.n	8007652 <_printf_i+0xf6>
 8007778:	0800b06e 	.word	0x0800b06e
 800777c:	0800b07f 	.word	0x0800b07f

08007780 <_scanf_float>:
 8007780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	469a      	mov	sl, r3
 8007786:	688b      	ldr	r3, [r1, #8]
 8007788:	4616      	mov	r6, r2
 800778a:	1e5a      	subs	r2, r3, #1
 800778c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007790:	b087      	sub	sp, #28
 8007792:	bf83      	ittte	hi
 8007794:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007798:	189b      	addhi	r3, r3, r2
 800779a:	9301      	strhi	r3, [sp, #4]
 800779c:	2300      	movls	r3, #0
 800779e:	bf86      	itte	hi
 80077a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077a4:	608b      	strhi	r3, [r1, #8]
 80077a6:	9301      	strls	r3, [sp, #4]
 80077a8:	680b      	ldr	r3, [r1, #0]
 80077aa:	4688      	mov	r8, r1
 80077ac:	f04f 0b00 	mov.w	fp, #0
 80077b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80077b4:	f848 3b1c 	str.w	r3, [r8], #28
 80077b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80077bc:	4607      	mov	r7, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	4645      	mov	r5, r8
 80077c2:	465a      	mov	r2, fp
 80077c4:	46d9      	mov	r9, fp
 80077c6:	f8cd b008 	str.w	fp, [sp, #8]
 80077ca:	68a1      	ldr	r1, [r4, #8]
 80077cc:	b181      	cbz	r1, 80077f0 <_scanf_float+0x70>
 80077ce:	6833      	ldr	r3, [r6, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b49      	cmp	r3, #73	; 0x49
 80077d4:	d071      	beq.n	80078ba <_scanf_float+0x13a>
 80077d6:	d84d      	bhi.n	8007874 <_scanf_float+0xf4>
 80077d8:	2b39      	cmp	r3, #57	; 0x39
 80077da:	d840      	bhi.n	800785e <_scanf_float+0xde>
 80077dc:	2b31      	cmp	r3, #49	; 0x31
 80077de:	f080 8088 	bcs.w	80078f2 <_scanf_float+0x172>
 80077e2:	2b2d      	cmp	r3, #45	; 0x2d
 80077e4:	f000 8090 	beq.w	8007908 <_scanf_float+0x188>
 80077e8:	d815      	bhi.n	8007816 <_scanf_float+0x96>
 80077ea:	2b2b      	cmp	r3, #43	; 0x2b
 80077ec:	f000 808c 	beq.w	8007908 <_scanf_float+0x188>
 80077f0:	f1b9 0f00 	cmp.w	r9, #0
 80077f4:	d003      	beq.n	80077fe <_scanf_float+0x7e>
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	3a01      	subs	r2, #1
 8007800:	2a01      	cmp	r2, #1
 8007802:	f200 80ea 	bhi.w	80079da <_scanf_float+0x25a>
 8007806:	4545      	cmp	r5, r8
 8007808:	f200 80dc 	bhi.w	80079c4 <_scanf_float+0x244>
 800780c:	2601      	movs	r6, #1
 800780e:	4630      	mov	r0, r6
 8007810:	b007      	add	sp, #28
 8007812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007816:	2b2e      	cmp	r3, #46	; 0x2e
 8007818:	f000 809f 	beq.w	800795a <_scanf_float+0x1da>
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d1e7      	bne.n	80077f0 <_scanf_float+0x70>
 8007820:	6820      	ldr	r0, [r4, #0]
 8007822:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007826:	d064      	beq.n	80078f2 <_scanf_float+0x172>
 8007828:	9b01      	ldr	r3, [sp, #4]
 800782a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800782e:	6020      	str	r0, [r4, #0]
 8007830:	f109 0901 	add.w	r9, r9, #1
 8007834:	b11b      	cbz	r3, 800783e <_scanf_float+0xbe>
 8007836:	3b01      	subs	r3, #1
 8007838:	3101      	adds	r1, #1
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	60a1      	str	r1, [r4, #8]
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	3b01      	subs	r3, #1
 8007842:	60a3      	str	r3, [r4, #8]
 8007844:	6923      	ldr	r3, [r4, #16]
 8007846:	3301      	adds	r3, #1
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	6873      	ldr	r3, [r6, #4]
 800784c:	3b01      	subs	r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	6073      	str	r3, [r6, #4]
 8007852:	f340 80ac 	ble.w	80079ae <_scanf_float+0x22e>
 8007856:	6833      	ldr	r3, [r6, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	6033      	str	r3, [r6, #0]
 800785c:	e7b5      	b.n	80077ca <_scanf_float+0x4a>
 800785e:	2b45      	cmp	r3, #69	; 0x45
 8007860:	f000 8085 	beq.w	800796e <_scanf_float+0x1ee>
 8007864:	2b46      	cmp	r3, #70	; 0x46
 8007866:	d06a      	beq.n	800793e <_scanf_float+0x1be>
 8007868:	2b41      	cmp	r3, #65	; 0x41
 800786a:	d1c1      	bne.n	80077f0 <_scanf_float+0x70>
 800786c:	2a01      	cmp	r2, #1
 800786e:	d1bf      	bne.n	80077f0 <_scanf_float+0x70>
 8007870:	2202      	movs	r2, #2
 8007872:	e046      	b.n	8007902 <_scanf_float+0x182>
 8007874:	2b65      	cmp	r3, #101	; 0x65
 8007876:	d07a      	beq.n	800796e <_scanf_float+0x1ee>
 8007878:	d818      	bhi.n	80078ac <_scanf_float+0x12c>
 800787a:	2b54      	cmp	r3, #84	; 0x54
 800787c:	d066      	beq.n	800794c <_scanf_float+0x1cc>
 800787e:	d811      	bhi.n	80078a4 <_scanf_float+0x124>
 8007880:	2b4e      	cmp	r3, #78	; 0x4e
 8007882:	d1b5      	bne.n	80077f0 <_scanf_float+0x70>
 8007884:	2a00      	cmp	r2, #0
 8007886:	d146      	bne.n	8007916 <_scanf_float+0x196>
 8007888:	f1b9 0f00 	cmp.w	r9, #0
 800788c:	d145      	bne.n	800791a <_scanf_float+0x19a>
 800788e:	6821      	ldr	r1, [r4, #0]
 8007890:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007894:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007898:	d13f      	bne.n	800791a <_scanf_float+0x19a>
 800789a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800789e:	6021      	str	r1, [r4, #0]
 80078a0:	2201      	movs	r2, #1
 80078a2:	e02e      	b.n	8007902 <_scanf_float+0x182>
 80078a4:	2b59      	cmp	r3, #89	; 0x59
 80078a6:	d01e      	beq.n	80078e6 <_scanf_float+0x166>
 80078a8:	2b61      	cmp	r3, #97	; 0x61
 80078aa:	e7de      	b.n	800786a <_scanf_float+0xea>
 80078ac:	2b6e      	cmp	r3, #110	; 0x6e
 80078ae:	d0e9      	beq.n	8007884 <_scanf_float+0x104>
 80078b0:	d815      	bhi.n	80078de <_scanf_float+0x15e>
 80078b2:	2b66      	cmp	r3, #102	; 0x66
 80078b4:	d043      	beq.n	800793e <_scanf_float+0x1be>
 80078b6:	2b69      	cmp	r3, #105	; 0x69
 80078b8:	d19a      	bne.n	80077f0 <_scanf_float+0x70>
 80078ba:	f1bb 0f00 	cmp.w	fp, #0
 80078be:	d138      	bne.n	8007932 <_scanf_float+0x1b2>
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	d197      	bne.n	80077f6 <_scanf_float+0x76>
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80078cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80078d0:	d195      	bne.n	80077fe <_scanf_float+0x7e>
 80078d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80078d6:	6021      	str	r1, [r4, #0]
 80078d8:	f04f 0b01 	mov.w	fp, #1
 80078dc:	e011      	b.n	8007902 <_scanf_float+0x182>
 80078de:	2b74      	cmp	r3, #116	; 0x74
 80078e0:	d034      	beq.n	800794c <_scanf_float+0x1cc>
 80078e2:	2b79      	cmp	r3, #121	; 0x79
 80078e4:	d184      	bne.n	80077f0 <_scanf_float+0x70>
 80078e6:	f1bb 0f07 	cmp.w	fp, #7
 80078ea:	d181      	bne.n	80077f0 <_scanf_float+0x70>
 80078ec:	f04f 0b08 	mov.w	fp, #8
 80078f0:	e007      	b.n	8007902 <_scanf_float+0x182>
 80078f2:	eb12 0f0b 	cmn.w	r2, fp
 80078f6:	f47f af7b 	bne.w	80077f0 <_scanf_float+0x70>
 80078fa:	6821      	ldr	r1, [r4, #0]
 80078fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8007900:	6021      	str	r1, [r4, #0]
 8007902:	702b      	strb	r3, [r5, #0]
 8007904:	3501      	adds	r5, #1
 8007906:	e79a      	b.n	800783e <_scanf_float+0xbe>
 8007908:	6821      	ldr	r1, [r4, #0]
 800790a:	0608      	lsls	r0, r1, #24
 800790c:	f57f af70 	bpl.w	80077f0 <_scanf_float+0x70>
 8007910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007914:	e7f4      	b.n	8007900 <_scanf_float+0x180>
 8007916:	2a02      	cmp	r2, #2
 8007918:	d047      	beq.n	80079aa <_scanf_float+0x22a>
 800791a:	f1bb 0f01 	cmp.w	fp, #1
 800791e:	d003      	beq.n	8007928 <_scanf_float+0x1a8>
 8007920:	f1bb 0f04 	cmp.w	fp, #4
 8007924:	f47f af64 	bne.w	80077f0 <_scanf_float+0x70>
 8007928:	f10b 0b01 	add.w	fp, fp, #1
 800792c:	fa5f fb8b 	uxtb.w	fp, fp
 8007930:	e7e7      	b.n	8007902 <_scanf_float+0x182>
 8007932:	f1bb 0f03 	cmp.w	fp, #3
 8007936:	d0f7      	beq.n	8007928 <_scanf_float+0x1a8>
 8007938:	f1bb 0f05 	cmp.w	fp, #5
 800793c:	e7f2      	b.n	8007924 <_scanf_float+0x1a4>
 800793e:	f1bb 0f02 	cmp.w	fp, #2
 8007942:	f47f af55 	bne.w	80077f0 <_scanf_float+0x70>
 8007946:	f04f 0b03 	mov.w	fp, #3
 800794a:	e7da      	b.n	8007902 <_scanf_float+0x182>
 800794c:	f1bb 0f06 	cmp.w	fp, #6
 8007950:	f47f af4e 	bne.w	80077f0 <_scanf_float+0x70>
 8007954:	f04f 0b07 	mov.w	fp, #7
 8007958:	e7d3      	b.n	8007902 <_scanf_float+0x182>
 800795a:	6821      	ldr	r1, [r4, #0]
 800795c:	0588      	lsls	r0, r1, #22
 800795e:	f57f af47 	bpl.w	80077f0 <_scanf_float+0x70>
 8007962:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8007966:	6021      	str	r1, [r4, #0]
 8007968:	f8cd 9008 	str.w	r9, [sp, #8]
 800796c:	e7c9      	b.n	8007902 <_scanf_float+0x182>
 800796e:	6821      	ldr	r1, [r4, #0]
 8007970:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8007974:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007978:	d006      	beq.n	8007988 <_scanf_float+0x208>
 800797a:	0548      	lsls	r0, r1, #21
 800797c:	f57f af38 	bpl.w	80077f0 <_scanf_float+0x70>
 8007980:	f1b9 0f00 	cmp.w	r9, #0
 8007984:	f43f af3b 	beq.w	80077fe <_scanf_float+0x7e>
 8007988:	0588      	lsls	r0, r1, #22
 800798a:	bf58      	it	pl
 800798c:	9802      	ldrpl	r0, [sp, #8]
 800798e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007992:	bf58      	it	pl
 8007994:	eba9 0000 	subpl.w	r0, r9, r0
 8007998:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800799c:	bf58      	it	pl
 800799e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80079a2:	6021      	str	r1, [r4, #0]
 80079a4:	f04f 0900 	mov.w	r9, #0
 80079a8:	e7ab      	b.n	8007902 <_scanf_float+0x182>
 80079aa:	2203      	movs	r2, #3
 80079ac:	e7a9      	b.n	8007902 <_scanf_float+0x182>
 80079ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80079b2:	9205      	str	r2, [sp, #20]
 80079b4:	4631      	mov	r1, r6
 80079b6:	4638      	mov	r0, r7
 80079b8:	4798      	blx	r3
 80079ba:	9a05      	ldr	r2, [sp, #20]
 80079bc:	2800      	cmp	r0, #0
 80079be:	f43f af04 	beq.w	80077ca <_scanf_float+0x4a>
 80079c2:	e715      	b.n	80077f0 <_scanf_float+0x70>
 80079c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80079cc:	4632      	mov	r2, r6
 80079ce:	4638      	mov	r0, r7
 80079d0:	4798      	blx	r3
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	e715      	b.n	8007806 <_scanf_float+0x86>
 80079da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80079de:	2b06      	cmp	r3, #6
 80079e0:	d80a      	bhi.n	80079f8 <_scanf_float+0x278>
 80079e2:	f1bb 0f02 	cmp.w	fp, #2
 80079e6:	d968      	bls.n	8007aba <_scanf_float+0x33a>
 80079e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80079ec:	fa5f fb8b 	uxtb.w	fp, fp
 80079f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80079f4:	455d      	cmp	r5, fp
 80079f6:	d14b      	bne.n	8007a90 <_scanf_float+0x310>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	05da      	lsls	r2, r3, #23
 80079fc:	d51f      	bpl.n	8007a3e <_scanf_float+0x2be>
 80079fe:	055b      	lsls	r3, r3, #21
 8007a00:	d468      	bmi.n	8007ad4 <_scanf_float+0x354>
 8007a02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	2965      	cmp	r1, #101	; 0x65
 8007a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007a0e:	f105 3bff 	add.w	fp, r5, #4294967295
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	d00d      	beq.n	8007a32 <_scanf_float+0x2b2>
 8007a16:	2945      	cmp	r1, #69	; 0x45
 8007a18:	d00b      	beq.n	8007a32 <_scanf_float+0x2b2>
 8007a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a1e:	4632      	mov	r2, r6
 8007a20:	4638      	mov	r0, r7
 8007a22:	4798      	blx	r3
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8007a30:	6123      	str	r3, [r4, #16]
 8007a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a36:	4632      	mov	r2, r6
 8007a38:	4638      	mov	r0, r7
 8007a3a:	4798      	blx	r3
 8007a3c:	465d      	mov	r5, fp
 8007a3e:	6826      	ldr	r6, [r4, #0]
 8007a40:	f016 0610 	ands.w	r6, r6, #16
 8007a44:	d17a      	bne.n	8007b3c <_scanf_float+0x3bc>
 8007a46:	702e      	strb	r6, [r5, #0]
 8007a48:	6823      	ldr	r3, [r4, #0]
 8007a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a52:	d142      	bne.n	8007ada <_scanf_float+0x35a>
 8007a54:	9b02      	ldr	r3, [sp, #8]
 8007a56:	eba9 0303 	sub.w	r3, r9, r3
 8007a5a:	425a      	negs	r2, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d149      	bne.n	8007af4 <_scanf_float+0x374>
 8007a60:	2200      	movs	r2, #0
 8007a62:	4641      	mov	r1, r8
 8007a64:	4638      	mov	r0, r7
 8007a66:	f000 ff17 	bl	8008898 <_strtod_r>
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	f8da 3000 	ldr.w	r3, [sl]
 8007a70:	f015 0f02 	tst.w	r5, #2
 8007a74:	f103 0204 	add.w	r2, r3, #4
 8007a78:	ec59 8b10 	vmov	r8, r9, d0
 8007a7c:	f8ca 2000 	str.w	r2, [sl]
 8007a80:	d043      	beq.n	8007b0a <_scanf_float+0x38a>
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	e9c3 8900 	strd	r8, r9, [r3]
 8007a88:	68e3      	ldr	r3, [r4, #12]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	60e3      	str	r3, [r4, #12]
 8007a8e:	e6be      	b.n	800780e <_scanf_float+0x8e>
 8007a90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	4798      	blx	r3
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	6123      	str	r3, [r4, #16]
 8007aa4:	e7a6      	b.n	80079f4 <_scanf_float+0x274>
 8007aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aaa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4638      	mov	r0, r7
 8007ab2:	4798      	blx	r3
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	6123      	str	r3, [r4, #16]
 8007aba:	4545      	cmp	r5, r8
 8007abc:	d8f3      	bhi.n	8007aa6 <_scanf_float+0x326>
 8007abe:	e6a5      	b.n	800780c <_scanf_float+0x8c>
 8007ac0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ac4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4638      	mov	r0, r7
 8007acc:	4798      	blx	r3
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	4545      	cmp	r5, r8
 8007ad6:	d8f3      	bhi.n	8007ac0 <_scanf_float+0x340>
 8007ad8:	e698      	b.n	800780c <_scanf_float+0x8c>
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0bf      	beq.n	8007a60 <_scanf_float+0x2e0>
 8007ae0:	9904      	ldr	r1, [sp, #16]
 8007ae2:	230a      	movs	r3, #10
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	3101      	adds	r1, #1
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f000 ff61 	bl	80089b0 <_strtol_r>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	9d04      	ldr	r5, [sp, #16]
 8007af2:	1ac2      	subs	r2, r0, r3
 8007af4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007af8:	429d      	cmp	r5, r3
 8007afa:	bf28      	it	cs
 8007afc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007b00:	490f      	ldr	r1, [pc, #60]	; (8007b40 <_scanf_float+0x3c0>)
 8007b02:	4628      	mov	r0, r5
 8007b04:	f000 f898 	bl	8007c38 <siprintf>
 8007b08:	e7aa      	b.n	8007a60 <_scanf_float+0x2e0>
 8007b0a:	f015 0504 	ands.w	r5, r5, #4
 8007b0e:	d1b8      	bne.n	8007a82 <_scanf_float+0x302>
 8007b10:	681f      	ldr	r7, [r3, #0]
 8007b12:	ee10 2a10 	vmov	r2, s0
 8007b16:	464b      	mov	r3, r9
 8007b18:	ee10 0a10 	vmov	r0, s0
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f9 f80d 	bl	8000b3c <__aeabi_dcmpun>
 8007b22:	b128      	cbz	r0, 8007b30 <_scanf_float+0x3b0>
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f881 	bl	8007c2c <nanf>
 8007b2a:	ed87 0a00 	vstr	s0, [r7]
 8007b2e:	e7ab      	b.n	8007a88 <_scanf_float+0x308>
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f9 f860 	bl	8000bf8 <__aeabi_d2f>
 8007b38:	6038      	str	r0, [r7, #0]
 8007b3a:	e7a5      	b.n	8007a88 <_scanf_float+0x308>
 8007b3c:	2600      	movs	r6, #0
 8007b3e:	e666      	b.n	800780e <_scanf_float+0x8e>
 8007b40:	0800b090 	.word	0x0800b090

08007b44 <_puts_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	460e      	mov	r6, r1
 8007b48:	4605      	mov	r5, r0
 8007b4a:	b118      	cbz	r0, 8007b54 <_puts_r+0x10>
 8007b4c:	6983      	ldr	r3, [r0, #24]
 8007b4e:	b90b      	cbnz	r3, 8007b54 <_puts_r+0x10>
 8007b50:	f001 ff36 	bl	80099c0 <__sinit>
 8007b54:	69ab      	ldr	r3, [r5, #24]
 8007b56:	68ac      	ldr	r4, [r5, #8]
 8007b58:	b913      	cbnz	r3, 8007b60 <_puts_r+0x1c>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f001 ff30 	bl	80099c0 <__sinit>
 8007b60:	4b23      	ldr	r3, [pc, #140]	; (8007bf0 <_puts_r+0xac>)
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d117      	bne.n	8007b96 <_puts_r+0x52>
 8007b66:	686c      	ldr	r4, [r5, #4]
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	071b      	lsls	r3, r3, #28
 8007b6c:	d51d      	bpl.n	8007baa <_puts_r+0x66>
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	b1db      	cbz	r3, 8007baa <_puts_r+0x66>
 8007b72:	3e01      	subs	r6, #1
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	60a3      	str	r3, [r4, #8]
 8007b7e:	b9e9      	cbnz	r1, 8007bbc <_puts_r+0x78>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da2e      	bge.n	8007be2 <_puts_r+0x9e>
 8007b84:	4622      	mov	r2, r4
 8007b86:	210a      	movs	r1, #10
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 ff23 	bl	80089d4 <__swbuf_r>
 8007b8e:	3001      	adds	r0, #1
 8007b90:	d011      	beq.n	8007bb6 <_puts_r+0x72>
 8007b92:	200a      	movs	r0, #10
 8007b94:	e011      	b.n	8007bba <_puts_r+0x76>
 8007b96:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <_puts_r+0xb0>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d101      	bne.n	8007ba0 <_puts_r+0x5c>
 8007b9c:	68ac      	ldr	r4, [r5, #8]
 8007b9e:	e7e3      	b.n	8007b68 <_puts_r+0x24>
 8007ba0:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <_puts_r+0xb4>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	bf08      	it	eq
 8007ba6:	68ec      	ldreq	r4, [r5, #12]
 8007ba8:	e7de      	b.n	8007b68 <_puts_r+0x24>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 ff63 	bl	8008a78 <__swsetup_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0dd      	beq.n	8007b72 <_puts_r+0x2e>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	da04      	bge.n	8007bca <_puts_r+0x86>
 8007bc0:	69a2      	ldr	r2, [r4, #24]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	dc06      	bgt.n	8007bd4 <_puts_r+0x90>
 8007bc6:	290a      	cmp	r1, #10
 8007bc8:	d004      	beq.n	8007bd4 <_puts_r+0x90>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	1c5a      	adds	r2, r3, #1
 8007bce:	6022      	str	r2, [r4, #0]
 8007bd0:	7019      	strb	r1, [r3, #0]
 8007bd2:	e7cf      	b.n	8007b74 <_puts_r+0x30>
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f000 fefc 	bl	80089d4 <__swbuf_r>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d1c9      	bne.n	8007b74 <_puts_r+0x30>
 8007be0:	e7e9      	b.n	8007bb6 <_puts_r+0x72>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	200a      	movs	r0, #10
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	6022      	str	r2, [r4, #0]
 8007bea:	7018      	strb	r0, [r3, #0]
 8007bec:	e7e5      	b.n	8007bba <_puts_r+0x76>
 8007bee:	bf00      	nop
 8007bf0:	0800b118 	.word	0x0800b118
 8007bf4:	0800b138 	.word	0x0800b138
 8007bf8:	0800b0f8 	.word	0x0800b0f8

08007bfc <puts>:
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <puts+0xc>)
 8007bfe:	4601      	mov	r1, r0
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	f7ff bf9f 	b.w	8007b44 <_puts_r>
 8007c06:	bf00      	nop
 8007c08:	2000000c 	.word	0x2000000c

08007c0c <_sbrk_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4c06      	ldr	r4, [pc, #24]	; (8007c28 <_sbrk_r+0x1c>)
 8007c10:	2300      	movs	r3, #0
 8007c12:	4605      	mov	r5, r0
 8007c14:	4608      	mov	r0, r1
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	f7fa fb78 	bl	800230c <_sbrk>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_sbrk_r+0x1a>
 8007c20:	6823      	ldr	r3, [r4, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_sbrk_r+0x1a>
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	20000718 	.word	0x20000718

08007c2c <nanf>:
 8007c2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c34 <nanf+0x8>
 8007c30:	4770      	bx	lr
 8007c32:	bf00      	nop
 8007c34:	7fc00000 	.word	0x7fc00000

08007c38 <siprintf>:
 8007c38:	b40e      	push	{r1, r2, r3}
 8007c3a:	b500      	push	{lr}
 8007c3c:	b09c      	sub	sp, #112	; 0x70
 8007c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c40:	9002      	str	r0, [sp, #8]
 8007c42:	9006      	str	r0, [sp, #24]
 8007c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c48:	4809      	ldr	r0, [pc, #36]	; (8007c70 <siprintf+0x38>)
 8007c4a:	9107      	str	r1, [sp, #28]
 8007c4c:	9104      	str	r1, [sp, #16]
 8007c4e:	4909      	ldr	r1, [pc, #36]	; (8007c74 <siprintf+0x3c>)
 8007c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c54:	9105      	str	r1, [sp, #20]
 8007c56:	6800      	ldr	r0, [r0, #0]
 8007c58:	9301      	str	r3, [sp, #4]
 8007c5a:	a902      	add	r1, sp, #8
 8007c5c:	f002 ff5e 	bl	800ab1c <_svfiprintf_r>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	b01c      	add	sp, #112	; 0x70
 8007c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c6c:	b003      	add	sp, #12
 8007c6e:	4770      	bx	lr
 8007c70:	2000000c 	.word	0x2000000c
 8007c74:	ffff0208 	.word	0xffff0208

08007c78 <sulp>:
 8007c78:	b570      	push	{r4, r5, r6, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	460d      	mov	r5, r1
 8007c7e:	ec45 4b10 	vmov	d0, r4, r5
 8007c82:	4616      	mov	r6, r2
 8007c84:	f002 fdae 	bl	800a7e4 <__ulp>
 8007c88:	ec51 0b10 	vmov	r0, r1, d0
 8007c8c:	b17e      	cbz	r6, 8007cae <sulp+0x36>
 8007c8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dd09      	ble.n	8007cae <sulp+0x36>
 8007c9a:	051b      	lsls	r3, r3, #20
 8007c9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007ca0:	2400      	movs	r4, #0
 8007ca2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	462b      	mov	r3, r5
 8007caa:	f7f8 fcad 	bl	8000608 <__aeabi_dmul>
 8007cae:	bd70      	pop	{r4, r5, r6, pc}

08007cb0 <_strtod_l>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	461f      	mov	r7, r3
 8007cb6:	b0a1      	sub	sp, #132	; 0x84
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4681      	mov	r9, r0
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	460e      	mov	r6, r1
 8007cc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cc2:	931c      	str	r3, [sp, #112]	; 0x70
 8007cc4:	f002 fa2f 	bl	800a126 <__localeconv_l>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	f7f8 fa88 	bl	80001e0 <strlen>
 8007cd0:	f04f 0a00 	mov.w	sl, #0
 8007cd4:	4604      	mov	r4, r0
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	961b      	str	r6, [sp, #108]	; 0x6c
 8007cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cde:	781a      	ldrb	r2, [r3, #0]
 8007ce0:	2a0d      	cmp	r2, #13
 8007ce2:	d832      	bhi.n	8007d4a <_strtod_l+0x9a>
 8007ce4:	2a09      	cmp	r2, #9
 8007ce6:	d236      	bcs.n	8007d56 <_strtod_l+0xa6>
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	d03e      	beq.n	8007d6a <_strtod_l+0xba>
 8007cec:	2300      	movs	r3, #0
 8007cee:	930d      	str	r3, [sp, #52]	; 0x34
 8007cf0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007cf2:	782b      	ldrb	r3, [r5, #0]
 8007cf4:	2b30      	cmp	r3, #48	; 0x30
 8007cf6:	f040 80ac 	bne.w	8007e52 <_strtod_l+0x1a2>
 8007cfa:	786b      	ldrb	r3, [r5, #1]
 8007cfc:	2b58      	cmp	r3, #88	; 0x58
 8007cfe:	d001      	beq.n	8007d04 <_strtod_l+0x54>
 8007d00:	2b78      	cmp	r3, #120	; 0x78
 8007d02:	d167      	bne.n	8007dd4 <_strtod_l+0x124>
 8007d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d06:	9301      	str	r3, [sp, #4]
 8007d08:	ab1c      	add	r3, sp, #112	; 0x70
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	9702      	str	r7, [sp, #8]
 8007d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d10:	4a88      	ldr	r2, [pc, #544]	; (8007f34 <_strtod_l+0x284>)
 8007d12:	a91b      	add	r1, sp, #108	; 0x6c
 8007d14:	4648      	mov	r0, r9
 8007d16:	f001 ff2c 	bl	8009b72 <__gethex>
 8007d1a:	f010 0407 	ands.w	r4, r0, #7
 8007d1e:	4606      	mov	r6, r0
 8007d20:	d005      	beq.n	8007d2e <_strtod_l+0x7e>
 8007d22:	2c06      	cmp	r4, #6
 8007d24:	d12b      	bne.n	8007d7e <_strtod_l+0xce>
 8007d26:	3501      	adds	r5, #1
 8007d28:	2300      	movs	r3, #0
 8007d2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8007d2c:	930d      	str	r3, [sp, #52]	; 0x34
 8007d2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f040 859a 	bne.w	800886a <_strtod_l+0xbba>
 8007d36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d38:	b1e3      	cbz	r3, 8007d74 <_strtod_l+0xc4>
 8007d3a:	4652      	mov	r2, sl
 8007d3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d40:	ec43 2b10 	vmov	d0, r2, r3
 8007d44:	b021      	add	sp, #132	; 0x84
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d4a:	2a2b      	cmp	r2, #43	; 0x2b
 8007d4c:	d015      	beq.n	8007d7a <_strtod_l+0xca>
 8007d4e:	2a2d      	cmp	r2, #45	; 0x2d
 8007d50:	d004      	beq.n	8007d5c <_strtod_l+0xac>
 8007d52:	2a20      	cmp	r2, #32
 8007d54:	d1ca      	bne.n	8007cec <_strtod_l+0x3c>
 8007d56:	3301      	adds	r3, #1
 8007d58:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d5a:	e7bf      	b.n	8007cdc <_strtod_l+0x2c>
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	920d      	str	r2, [sp, #52]	; 0x34
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d64:	785b      	ldrb	r3, [r3, #1]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1c2      	bne.n	8007cf0 <_strtod_l+0x40>
 8007d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f040 8579 	bne.w	8008866 <_strtod_l+0xbb6>
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	e7e2      	b.n	8007d40 <_strtod_l+0x90>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	e7ef      	b.n	8007d5e <_strtod_l+0xae>
 8007d7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007d80:	b13a      	cbz	r2, 8007d92 <_strtod_l+0xe2>
 8007d82:	2135      	movs	r1, #53	; 0x35
 8007d84:	a81e      	add	r0, sp, #120	; 0x78
 8007d86:	f002 fe25 	bl	800a9d4 <__copybits>
 8007d8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d8c:	4648      	mov	r0, r9
 8007d8e:	f002 fa92 	bl	800a2b6 <_Bfree>
 8007d92:	3c01      	subs	r4, #1
 8007d94:	2c04      	cmp	r4, #4
 8007d96:	d806      	bhi.n	8007da6 <_strtod_l+0xf6>
 8007d98:	e8df f004 	tbb	[pc, r4]
 8007d9c:	1714030a 	.word	0x1714030a
 8007da0:	0a          	.byte	0x0a
 8007da1:	00          	.byte	0x00
 8007da2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007da6:	0730      	lsls	r0, r6, #28
 8007da8:	d5c1      	bpl.n	8007d2e <_strtod_l+0x7e>
 8007daa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007dae:	e7be      	b.n	8007d2e <_strtod_l+0x7e>
 8007db0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007db4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007db6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007dba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007dbe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007dc2:	e7f0      	b.n	8007da6 <_strtod_l+0xf6>
 8007dc4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007f38 <_strtod_l+0x288>
 8007dc8:	e7ed      	b.n	8007da6 <_strtod_l+0xf6>
 8007dca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007dce:	f04f 3aff 	mov.w	sl, #4294967295
 8007dd2:	e7e8      	b.n	8007da6 <_strtod_l+0xf6>
 8007dd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007dda:	785b      	ldrb	r3, [r3, #1]
 8007ddc:	2b30      	cmp	r3, #48	; 0x30
 8007dde:	d0f9      	beq.n	8007dd4 <_strtod_l+0x124>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0a4      	beq.n	8007d2e <_strtod_l+0x7e>
 8007de4:	2301      	movs	r3, #1
 8007de6:	2500      	movs	r5, #0
 8007de8:	9306      	str	r3, [sp, #24]
 8007dea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007dec:	9308      	str	r3, [sp, #32]
 8007dee:	9507      	str	r5, [sp, #28]
 8007df0:	9505      	str	r5, [sp, #20]
 8007df2:	220a      	movs	r2, #10
 8007df4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007df6:	7807      	ldrb	r7, [r0, #0]
 8007df8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007dfc:	b2d9      	uxtb	r1, r3
 8007dfe:	2909      	cmp	r1, #9
 8007e00:	d929      	bls.n	8007e56 <_strtod_l+0x1a6>
 8007e02:	4622      	mov	r2, r4
 8007e04:	f8d8 1000 	ldr.w	r1, [r8]
 8007e08:	f002 ffc3 	bl	800ad92 <strncmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d031      	beq.n	8007e74 <_strtod_l+0x1c4>
 8007e10:	2000      	movs	r0, #0
 8007e12:	9c05      	ldr	r4, [sp, #20]
 8007e14:	9004      	str	r0, [sp, #16]
 8007e16:	463b      	mov	r3, r7
 8007e18:	4602      	mov	r2, r0
 8007e1a:	2b65      	cmp	r3, #101	; 0x65
 8007e1c:	d001      	beq.n	8007e22 <_strtod_l+0x172>
 8007e1e:	2b45      	cmp	r3, #69	; 0x45
 8007e20:	d114      	bne.n	8007e4c <_strtod_l+0x19c>
 8007e22:	b924      	cbnz	r4, 8007e2e <_strtod_l+0x17e>
 8007e24:	b910      	cbnz	r0, 8007e2c <_strtod_l+0x17c>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d09e      	beq.n	8007d6a <_strtod_l+0xba>
 8007e2c:	2400      	movs	r4, #0
 8007e2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007e30:	1c73      	adds	r3, r6, #1
 8007e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e34:	7873      	ldrb	r3, [r6, #1]
 8007e36:	2b2b      	cmp	r3, #43	; 0x2b
 8007e38:	d078      	beq.n	8007f2c <_strtod_l+0x27c>
 8007e3a:	2b2d      	cmp	r3, #45	; 0x2d
 8007e3c:	d070      	beq.n	8007f20 <_strtod_l+0x270>
 8007e3e:	f04f 0c00 	mov.w	ip, #0
 8007e42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007e46:	2f09      	cmp	r7, #9
 8007e48:	d97c      	bls.n	8007f44 <_strtod_l+0x294>
 8007e4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007e4c:	f04f 0e00 	mov.w	lr, #0
 8007e50:	e09a      	b.n	8007f88 <_strtod_l+0x2d8>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e7c7      	b.n	8007de6 <_strtod_l+0x136>
 8007e56:	9905      	ldr	r1, [sp, #20]
 8007e58:	2908      	cmp	r1, #8
 8007e5a:	bfdd      	ittte	le
 8007e5c:	9907      	ldrle	r1, [sp, #28]
 8007e5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e62:	9307      	strle	r3, [sp, #28]
 8007e64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007e68:	9b05      	ldr	r3, [sp, #20]
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	9305      	str	r3, [sp, #20]
 8007e70:	901b      	str	r0, [sp, #108]	; 0x6c
 8007e72:	e7bf      	b.n	8007df4 <_strtod_l+0x144>
 8007e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e76:	191a      	adds	r2, r3, r4
 8007e78:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e7a:	9a05      	ldr	r2, [sp, #20]
 8007e7c:	5d1b      	ldrb	r3, [r3, r4]
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d037      	beq.n	8007ef2 <_strtod_l+0x242>
 8007e82:	9c05      	ldr	r4, [sp, #20]
 8007e84:	4602      	mov	r2, r0
 8007e86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007e8a:	2909      	cmp	r1, #9
 8007e8c:	d913      	bls.n	8007eb6 <_strtod_l+0x206>
 8007e8e:	2101      	movs	r1, #1
 8007e90:	9104      	str	r1, [sp, #16]
 8007e92:	e7c2      	b.n	8007e1a <_strtod_l+0x16a>
 8007e94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	921b      	str	r2, [sp, #108]	; 0x6c
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	2b30      	cmp	r3, #48	; 0x30
 8007ea0:	d0f8      	beq.n	8007e94 <_strtod_l+0x1e4>
 8007ea2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007ea6:	2a08      	cmp	r2, #8
 8007ea8:	f200 84e4 	bhi.w	8008874 <_strtod_l+0xbc4>
 8007eac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007eae:	9208      	str	r2, [sp, #32]
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007eba:	f100 0101 	add.w	r1, r0, #1
 8007ebe:	d012      	beq.n	8007ee6 <_strtod_l+0x236>
 8007ec0:	440a      	add	r2, r1
 8007ec2:	eb00 0c04 	add.w	ip, r0, r4
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	270a      	movs	r7, #10
 8007eca:	458c      	cmp	ip, r1
 8007ecc:	d113      	bne.n	8007ef6 <_strtod_l+0x246>
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	2908      	cmp	r1, #8
 8007ed2:	f104 0401 	add.w	r4, r4, #1
 8007ed6:	4404      	add	r4, r0
 8007ed8:	dc19      	bgt.n	8007f0e <_strtod_l+0x25e>
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	210a      	movs	r1, #10
 8007ede:	fb01 e303 	mla	r3, r1, r3, lr
 8007ee2:	9307      	str	r3, [sp, #28]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ee8:	1c58      	adds	r0, r3, #1
 8007eea:	901b      	str	r0, [sp, #108]	; 0x6c
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	4608      	mov	r0, r1
 8007ef0:	e7c9      	b.n	8007e86 <_strtod_l+0x1d6>
 8007ef2:	9805      	ldr	r0, [sp, #20]
 8007ef4:	e7d3      	b.n	8007e9e <_strtod_l+0x1ee>
 8007ef6:	2908      	cmp	r1, #8
 8007ef8:	f101 0101 	add.w	r1, r1, #1
 8007efc:	dc03      	bgt.n	8007f06 <_strtod_l+0x256>
 8007efe:	9b07      	ldr	r3, [sp, #28]
 8007f00:	437b      	muls	r3, r7
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	e7e1      	b.n	8007eca <_strtod_l+0x21a>
 8007f06:	2910      	cmp	r1, #16
 8007f08:	bfd8      	it	le
 8007f0a:	437d      	mulle	r5, r7
 8007f0c:	e7dd      	b.n	8007eca <_strtod_l+0x21a>
 8007f0e:	2c10      	cmp	r4, #16
 8007f10:	bfdc      	itt	le
 8007f12:	210a      	movle	r1, #10
 8007f14:	fb01 e505 	mlale	r5, r1, r5, lr
 8007f18:	e7e4      	b.n	8007ee4 <_strtod_l+0x234>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	e781      	b.n	8007e24 <_strtod_l+0x174>
 8007f20:	f04f 0c01 	mov.w	ip, #1
 8007f24:	1cb3      	adds	r3, r6, #2
 8007f26:	931b      	str	r3, [sp, #108]	; 0x6c
 8007f28:	78b3      	ldrb	r3, [r6, #2]
 8007f2a:	e78a      	b.n	8007e42 <_strtod_l+0x192>
 8007f2c:	f04f 0c00 	mov.w	ip, #0
 8007f30:	e7f8      	b.n	8007f24 <_strtod_l+0x274>
 8007f32:	bf00      	nop
 8007f34:	0800b098 	.word	0x0800b098
 8007f38:	7ff00000 	.word	0x7ff00000
 8007f3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f3e:	1c5f      	adds	r7, r3, #1
 8007f40:	971b      	str	r7, [sp, #108]	; 0x6c
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b30      	cmp	r3, #48	; 0x30
 8007f46:	d0f9      	beq.n	8007f3c <_strtod_l+0x28c>
 8007f48:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007f4c:	2f08      	cmp	r7, #8
 8007f4e:	f63f af7d 	bhi.w	8007e4c <_strtod_l+0x19c>
 8007f52:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007f56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f58:	930a      	str	r3, [sp, #40]	; 0x28
 8007f5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f5c:	1c5f      	adds	r7, r3, #1
 8007f5e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007f60:	785b      	ldrb	r3, [r3, #1]
 8007f62:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007f66:	f1b8 0f09 	cmp.w	r8, #9
 8007f6a:	d937      	bls.n	8007fdc <_strtod_l+0x32c>
 8007f6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f6e:	1a7f      	subs	r7, r7, r1
 8007f70:	2f08      	cmp	r7, #8
 8007f72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007f76:	dc37      	bgt.n	8007fe8 <_strtod_l+0x338>
 8007f78:	45be      	cmp	lr, r7
 8007f7a:	bfa8      	it	ge
 8007f7c:	46be      	movge	lr, r7
 8007f7e:	f1bc 0f00 	cmp.w	ip, #0
 8007f82:	d001      	beq.n	8007f88 <_strtod_l+0x2d8>
 8007f84:	f1ce 0e00 	rsb	lr, lr, #0
 8007f88:	2c00      	cmp	r4, #0
 8007f8a:	d151      	bne.n	8008030 <_strtod_l+0x380>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f47f aece 	bne.w	8007d2e <_strtod_l+0x7e>
 8007f92:	9a06      	ldr	r2, [sp, #24]
 8007f94:	2a00      	cmp	r2, #0
 8007f96:	f47f aeca 	bne.w	8007d2e <_strtod_l+0x7e>
 8007f9a:	9a04      	ldr	r2, [sp, #16]
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	f47f aee4 	bne.w	8007d6a <_strtod_l+0xba>
 8007fa2:	2b4e      	cmp	r3, #78	; 0x4e
 8007fa4:	d027      	beq.n	8007ff6 <_strtod_l+0x346>
 8007fa6:	dc21      	bgt.n	8007fec <_strtod_l+0x33c>
 8007fa8:	2b49      	cmp	r3, #73	; 0x49
 8007faa:	f47f aede 	bne.w	8007d6a <_strtod_l+0xba>
 8007fae:	49a0      	ldr	r1, [pc, #640]	; (8008230 <_strtod_l+0x580>)
 8007fb0:	a81b      	add	r0, sp, #108	; 0x6c
 8007fb2:	f002 f811 	bl	8009fd8 <__match>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	f43f aed7 	beq.w	8007d6a <_strtod_l+0xba>
 8007fbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fbe:	499d      	ldr	r1, [pc, #628]	; (8008234 <_strtod_l+0x584>)
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	a81b      	add	r0, sp, #108	; 0x6c
 8007fc4:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fc6:	f002 f807 	bl	8009fd8 <__match>
 8007fca:	b910      	cbnz	r0, 8007fd2 <_strtod_l+0x322>
 8007fcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007fce:	3301      	adds	r3, #1
 8007fd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007fd2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008248 <_strtod_l+0x598>
 8007fd6:	f04f 0a00 	mov.w	sl, #0
 8007fda:	e6a8      	b.n	8007d2e <_strtod_l+0x7e>
 8007fdc:	210a      	movs	r1, #10
 8007fde:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007fe2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007fe6:	e7b8      	b.n	8007f5a <_strtod_l+0x2aa>
 8007fe8:	46be      	mov	lr, r7
 8007fea:	e7c8      	b.n	8007f7e <_strtod_l+0x2ce>
 8007fec:	2b69      	cmp	r3, #105	; 0x69
 8007fee:	d0de      	beq.n	8007fae <_strtod_l+0x2fe>
 8007ff0:	2b6e      	cmp	r3, #110	; 0x6e
 8007ff2:	f47f aeba 	bne.w	8007d6a <_strtod_l+0xba>
 8007ff6:	4990      	ldr	r1, [pc, #576]	; (8008238 <_strtod_l+0x588>)
 8007ff8:	a81b      	add	r0, sp, #108	; 0x6c
 8007ffa:	f001 ffed 	bl	8009fd8 <__match>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f aeb3 	beq.w	8007d6a <_strtod_l+0xba>
 8008004:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b28      	cmp	r3, #40	; 0x28
 800800a:	d10e      	bne.n	800802a <_strtod_l+0x37a>
 800800c:	aa1e      	add	r2, sp, #120	; 0x78
 800800e:	498b      	ldr	r1, [pc, #556]	; (800823c <_strtod_l+0x58c>)
 8008010:	a81b      	add	r0, sp, #108	; 0x6c
 8008012:	f001 fff5 	bl	800a000 <__hexnan>
 8008016:	2805      	cmp	r0, #5
 8008018:	d107      	bne.n	800802a <_strtod_l+0x37a>
 800801a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800801c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8008020:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008024:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008028:	e681      	b.n	8007d2e <_strtod_l+0x7e>
 800802a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008250 <_strtod_l+0x5a0>
 800802e:	e7d2      	b.n	8007fd6 <_strtod_l+0x326>
 8008030:	ebae 0302 	sub.w	r3, lr, r2
 8008034:	9306      	str	r3, [sp, #24]
 8008036:	9b05      	ldr	r3, [sp, #20]
 8008038:	9807      	ldr	r0, [sp, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	bf08      	it	eq
 800803e:	4623      	moveq	r3, r4
 8008040:	2c10      	cmp	r4, #16
 8008042:	9305      	str	r3, [sp, #20]
 8008044:	46a0      	mov	r8, r4
 8008046:	bfa8      	it	ge
 8008048:	f04f 0810 	movge.w	r8, #16
 800804c:	f7f8 fa62 	bl	8000514 <__aeabi_ui2d>
 8008050:	2c09      	cmp	r4, #9
 8008052:	4682      	mov	sl, r0
 8008054:	468b      	mov	fp, r1
 8008056:	dc13      	bgt.n	8008080 <_strtod_l+0x3d0>
 8008058:	9b06      	ldr	r3, [sp, #24]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f43f ae67 	beq.w	8007d2e <_strtod_l+0x7e>
 8008060:	9b06      	ldr	r3, [sp, #24]
 8008062:	dd7a      	ble.n	800815a <_strtod_l+0x4aa>
 8008064:	2b16      	cmp	r3, #22
 8008066:	dc61      	bgt.n	800812c <_strtod_l+0x47c>
 8008068:	4a75      	ldr	r2, [pc, #468]	; (8008240 <_strtod_l+0x590>)
 800806a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800806e:	e9de 0100 	ldrd	r0, r1, [lr]
 8008072:	4652      	mov	r2, sl
 8008074:	465b      	mov	r3, fp
 8008076:	f7f8 fac7 	bl	8000608 <__aeabi_dmul>
 800807a:	4682      	mov	sl, r0
 800807c:	468b      	mov	fp, r1
 800807e:	e656      	b.n	8007d2e <_strtod_l+0x7e>
 8008080:	4b6f      	ldr	r3, [pc, #444]	; (8008240 <_strtod_l+0x590>)
 8008082:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008086:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800808a:	f7f8 fabd 	bl	8000608 <__aeabi_dmul>
 800808e:	4606      	mov	r6, r0
 8008090:	4628      	mov	r0, r5
 8008092:	460f      	mov	r7, r1
 8008094:	f7f8 fa3e 	bl	8000514 <__aeabi_ui2d>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 f8fc 	bl	800029c <__adddf3>
 80080a4:	2c0f      	cmp	r4, #15
 80080a6:	4682      	mov	sl, r0
 80080a8:	468b      	mov	fp, r1
 80080aa:	ddd5      	ble.n	8008058 <_strtod_l+0x3a8>
 80080ac:	9b06      	ldr	r3, [sp, #24]
 80080ae:	eba4 0808 	sub.w	r8, r4, r8
 80080b2:	4498      	add	r8, r3
 80080b4:	f1b8 0f00 	cmp.w	r8, #0
 80080b8:	f340 8096 	ble.w	80081e8 <_strtod_l+0x538>
 80080bc:	f018 030f 	ands.w	r3, r8, #15
 80080c0:	d00a      	beq.n	80080d8 <_strtod_l+0x428>
 80080c2:	495f      	ldr	r1, [pc, #380]	; (8008240 <_strtod_l+0x590>)
 80080c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080c8:	4652      	mov	r2, sl
 80080ca:	465b      	mov	r3, fp
 80080cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d0:	f7f8 fa9a 	bl	8000608 <__aeabi_dmul>
 80080d4:	4682      	mov	sl, r0
 80080d6:	468b      	mov	fp, r1
 80080d8:	f038 080f 	bics.w	r8, r8, #15
 80080dc:	d073      	beq.n	80081c6 <_strtod_l+0x516>
 80080de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080e2:	dd47      	ble.n	8008174 <_strtod_l+0x4c4>
 80080e4:	2400      	movs	r4, #0
 80080e6:	46a0      	mov	r8, r4
 80080e8:	9407      	str	r4, [sp, #28]
 80080ea:	9405      	str	r4, [sp, #20]
 80080ec:	2322      	movs	r3, #34	; 0x22
 80080ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008248 <_strtod_l+0x598>
 80080f2:	f8c9 3000 	str.w	r3, [r9]
 80080f6:	f04f 0a00 	mov.w	sl, #0
 80080fa:	9b07      	ldr	r3, [sp, #28]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f43f ae16 	beq.w	8007d2e <_strtod_l+0x7e>
 8008102:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008104:	4648      	mov	r0, r9
 8008106:	f002 f8d6 	bl	800a2b6 <_Bfree>
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	4648      	mov	r0, r9
 800810e:	f002 f8d2 	bl	800a2b6 <_Bfree>
 8008112:	4641      	mov	r1, r8
 8008114:	4648      	mov	r0, r9
 8008116:	f002 f8ce 	bl	800a2b6 <_Bfree>
 800811a:	9907      	ldr	r1, [sp, #28]
 800811c:	4648      	mov	r0, r9
 800811e:	f002 f8ca 	bl	800a2b6 <_Bfree>
 8008122:	4621      	mov	r1, r4
 8008124:	4648      	mov	r0, r9
 8008126:	f002 f8c6 	bl	800a2b6 <_Bfree>
 800812a:	e600      	b.n	8007d2e <_strtod_l+0x7e>
 800812c:	9a06      	ldr	r2, [sp, #24]
 800812e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008132:	4293      	cmp	r3, r2
 8008134:	dbba      	blt.n	80080ac <_strtod_l+0x3fc>
 8008136:	4d42      	ldr	r5, [pc, #264]	; (8008240 <_strtod_l+0x590>)
 8008138:	f1c4 040f 	rsb	r4, r4, #15
 800813c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008140:	4652      	mov	r2, sl
 8008142:	465b      	mov	r3, fp
 8008144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008148:	f7f8 fa5e 	bl	8000608 <__aeabi_dmul>
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	1b1c      	subs	r4, r3, r4
 8008150:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008154:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008158:	e78d      	b.n	8008076 <_strtod_l+0x3c6>
 800815a:	f113 0f16 	cmn.w	r3, #22
 800815e:	dba5      	blt.n	80080ac <_strtod_l+0x3fc>
 8008160:	4a37      	ldr	r2, [pc, #220]	; (8008240 <_strtod_l+0x590>)
 8008162:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008166:	e9d2 2300 	ldrd	r2, r3, [r2]
 800816a:	4650      	mov	r0, sl
 800816c:	4659      	mov	r1, fp
 800816e:	f7f8 fb75 	bl	800085c <__aeabi_ddiv>
 8008172:	e782      	b.n	800807a <_strtod_l+0x3ca>
 8008174:	2300      	movs	r3, #0
 8008176:	4e33      	ldr	r6, [pc, #204]	; (8008244 <_strtod_l+0x594>)
 8008178:	ea4f 1828 	mov.w	r8, r8, asr #4
 800817c:	4650      	mov	r0, sl
 800817e:	4659      	mov	r1, fp
 8008180:	461d      	mov	r5, r3
 8008182:	f1b8 0f01 	cmp.w	r8, #1
 8008186:	dc21      	bgt.n	80081cc <_strtod_l+0x51c>
 8008188:	b10b      	cbz	r3, 800818e <_strtod_l+0x4de>
 800818a:	4682      	mov	sl, r0
 800818c:	468b      	mov	fp, r1
 800818e:	4b2d      	ldr	r3, [pc, #180]	; (8008244 <_strtod_l+0x594>)
 8008190:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008194:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008198:	4652      	mov	r2, sl
 800819a:	465b      	mov	r3, fp
 800819c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80081a0:	f7f8 fa32 	bl	8000608 <__aeabi_dmul>
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <_strtod_l+0x598>)
 80081a6:	460a      	mov	r2, r1
 80081a8:	400b      	ands	r3, r1
 80081aa:	4928      	ldr	r1, [pc, #160]	; (800824c <_strtod_l+0x59c>)
 80081ac:	428b      	cmp	r3, r1
 80081ae:	4682      	mov	sl, r0
 80081b0:	d898      	bhi.n	80080e4 <_strtod_l+0x434>
 80081b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80081b6:	428b      	cmp	r3, r1
 80081b8:	bf86      	itte	hi
 80081ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008254 <_strtod_l+0x5a4>
 80081be:	f04f 3aff 	movhi.w	sl, #4294967295
 80081c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80081c6:	2300      	movs	r3, #0
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	e077      	b.n	80082bc <_strtod_l+0x60c>
 80081cc:	f018 0f01 	tst.w	r8, #1
 80081d0:	d006      	beq.n	80081e0 <_strtod_l+0x530>
 80081d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f7f8 fa15 	bl	8000608 <__aeabi_dmul>
 80081de:	2301      	movs	r3, #1
 80081e0:	3501      	adds	r5, #1
 80081e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081e6:	e7cc      	b.n	8008182 <_strtod_l+0x4d2>
 80081e8:	d0ed      	beq.n	80081c6 <_strtod_l+0x516>
 80081ea:	f1c8 0800 	rsb	r8, r8, #0
 80081ee:	f018 020f 	ands.w	r2, r8, #15
 80081f2:	d00a      	beq.n	800820a <_strtod_l+0x55a>
 80081f4:	4b12      	ldr	r3, [pc, #72]	; (8008240 <_strtod_l+0x590>)
 80081f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081fa:	4650      	mov	r0, sl
 80081fc:	4659      	mov	r1, fp
 80081fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008202:	f7f8 fb2b 	bl	800085c <__aeabi_ddiv>
 8008206:	4682      	mov	sl, r0
 8008208:	468b      	mov	fp, r1
 800820a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800820e:	d0da      	beq.n	80081c6 <_strtod_l+0x516>
 8008210:	f1b8 0f1f 	cmp.w	r8, #31
 8008214:	dd20      	ble.n	8008258 <_strtod_l+0x5a8>
 8008216:	2400      	movs	r4, #0
 8008218:	46a0      	mov	r8, r4
 800821a:	9407      	str	r4, [sp, #28]
 800821c:	9405      	str	r4, [sp, #20]
 800821e:	2322      	movs	r3, #34	; 0x22
 8008220:	f04f 0a00 	mov.w	sl, #0
 8008224:	f04f 0b00 	mov.w	fp, #0
 8008228:	f8c9 3000 	str.w	r3, [r9]
 800822c:	e765      	b.n	80080fa <_strtod_l+0x44a>
 800822e:	bf00      	nop
 8008230:	0800b061 	.word	0x0800b061
 8008234:	0800b0eb 	.word	0x0800b0eb
 8008238:	0800b069 	.word	0x0800b069
 800823c:	0800b0ac 	.word	0x0800b0ac
 8008240:	0800b190 	.word	0x0800b190
 8008244:	0800b168 	.word	0x0800b168
 8008248:	7ff00000 	.word	0x7ff00000
 800824c:	7ca00000 	.word	0x7ca00000
 8008250:	fff80000 	.word	0xfff80000
 8008254:	7fefffff 	.word	0x7fefffff
 8008258:	f018 0310 	ands.w	r3, r8, #16
 800825c:	bf18      	it	ne
 800825e:	236a      	movne	r3, #106	; 0x6a
 8008260:	4da0      	ldr	r5, [pc, #640]	; (80084e4 <_strtod_l+0x834>)
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	4650      	mov	r0, sl
 8008266:	4659      	mov	r1, fp
 8008268:	2300      	movs	r3, #0
 800826a:	f1b8 0f00 	cmp.w	r8, #0
 800826e:	f300 810a 	bgt.w	8008486 <_strtod_l+0x7d6>
 8008272:	b10b      	cbz	r3, 8008278 <_strtod_l+0x5c8>
 8008274:	4682      	mov	sl, r0
 8008276:	468b      	mov	fp, r1
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	b1bb      	cbz	r3, 80082ac <_strtod_l+0x5fc>
 800827c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008280:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008284:	2b00      	cmp	r3, #0
 8008286:	4659      	mov	r1, fp
 8008288:	dd10      	ble.n	80082ac <_strtod_l+0x5fc>
 800828a:	2b1f      	cmp	r3, #31
 800828c:	f340 8107 	ble.w	800849e <_strtod_l+0x7ee>
 8008290:	2b34      	cmp	r3, #52	; 0x34
 8008292:	bfde      	ittt	le
 8008294:	3b20      	suble	r3, #32
 8008296:	f04f 32ff 	movle.w	r2, #4294967295
 800829a:	fa02 f303 	lslle.w	r3, r2, r3
 800829e:	f04f 0a00 	mov.w	sl, #0
 80082a2:	bfcc      	ite	gt
 80082a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80082a8:	ea03 0b01 	andle.w	fp, r3, r1
 80082ac:	2200      	movs	r2, #0
 80082ae:	2300      	movs	r3, #0
 80082b0:	4650      	mov	r0, sl
 80082b2:	4659      	mov	r1, fp
 80082b4:	f7f8 fc10 	bl	8000ad8 <__aeabi_dcmpeq>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d1ac      	bne.n	8008216 <_strtod_l+0x566>
 80082bc:	9b07      	ldr	r3, [sp, #28]
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	9a05      	ldr	r2, [sp, #20]
 80082c2:	9908      	ldr	r1, [sp, #32]
 80082c4:	4623      	mov	r3, r4
 80082c6:	4648      	mov	r0, r9
 80082c8:	f002 f847 	bl	800a35a <__s2b>
 80082cc:	9007      	str	r0, [sp, #28]
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f43f af08 	beq.w	80080e4 <_strtod_l+0x434>
 80082d4:	9a06      	ldr	r2, [sp, #24]
 80082d6:	9b06      	ldr	r3, [sp, #24]
 80082d8:	2a00      	cmp	r2, #0
 80082da:	f1c3 0300 	rsb	r3, r3, #0
 80082de:	bfa8      	it	ge
 80082e0:	2300      	movge	r3, #0
 80082e2:	930e      	str	r3, [sp, #56]	; 0x38
 80082e4:	2400      	movs	r4, #0
 80082e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80082ea:	9316      	str	r3, [sp, #88]	; 0x58
 80082ec:	46a0      	mov	r8, r4
 80082ee:	9b07      	ldr	r3, [sp, #28]
 80082f0:	4648      	mov	r0, r9
 80082f2:	6859      	ldr	r1, [r3, #4]
 80082f4:	f001 ffab 	bl	800a24e <_Balloc>
 80082f8:	9005      	str	r0, [sp, #20]
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f aef6 	beq.w	80080ec <_strtod_l+0x43c>
 8008300:	9b07      	ldr	r3, [sp, #28]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	3202      	adds	r2, #2
 8008306:	f103 010c 	add.w	r1, r3, #12
 800830a:	0092      	lsls	r2, r2, #2
 800830c:	300c      	adds	r0, #12
 800830e:	f001 ff91 	bl	800a234 <memcpy>
 8008312:	aa1e      	add	r2, sp, #120	; 0x78
 8008314:	a91d      	add	r1, sp, #116	; 0x74
 8008316:	ec4b ab10 	vmov	d0, sl, fp
 800831a:	4648      	mov	r0, r9
 800831c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008320:	f002 fad6 	bl	800a8d0 <__d2b>
 8008324:	901c      	str	r0, [sp, #112]	; 0x70
 8008326:	2800      	cmp	r0, #0
 8008328:	f43f aee0 	beq.w	80080ec <_strtod_l+0x43c>
 800832c:	2101      	movs	r1, #1
 800832e:	4648      	mov	r0, r9
 8008330:	f002 f89f 	bl	800a472 <__i2b>
 8008334:	4680      	mov	r8, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f aed8 	beq.w	80080ec <_strtod_l+0x43c>
 800833c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800833e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008340:	2e00      	cmp	r6, #0
 8008342:	bfab      	itete	ge
 8008344:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008346:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008348:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800834a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800834c:	bfac      	ite	ge
 800834e:	18f7      	addge	r7, r6, r3
 8008350:	1b9d      	sublt	r5, r3, r6
 8008352:	9b04      	ldr	r3, [sp, #16]
 8008354:	1af6      	subs	r6, r6, r3
 8008356:	4416      	add	r6, r2
 8008358:	4b63      	ldr	r3, [pc, #396]	; (80084e8 <_strtod_l+0x838>)
 800835a:	3e01      	subs	r6, #1
 800835c:	429e      	cmp	r6, r3
 800835e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008362:	f280 80af 	bge.w	80084c4 <_strtod_l+0x814>
 8008366:	1b9b      	subs	r3, r3, r6
 8008368:	2b1f      	cmp	r3, #31
 800836a:	eba2 0203 	sub.w	r2, r2, r3
 800836e:	f04f 0101 	mov.w	r1, #1
 8008372:	f300 809b 	bgt.w	80084ac <_strtod_l+0x7fc>
 8008376:	fa01 f303 	lsl.w	r3, r1, r3
 800837a:	930f      	str	r3, [sp, #60]	; 0x3c
 800837c:	2300      	movs	r3, #0
 800837e:	930a      	str	r3, [sp, #40]	; 0x28
 8008380:	18be      	adds	r6, r7, r2
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	42b7      	cmp	r7, r6
 8008386:	4415      	add	r5, r2
 8008388:	441d      	add	r5, r3
 800838a:	463b      	mov	r3, r7
 800838c:	bfa8      	it	ge
 800838e:	4633      	movge	r3, r6
 8008390:	42ab      	cmp	r3, r5
 8008392:	bfa8      	it	ge
 8008394:	462b      	movge	r3, r5
 8008396:	2b00      	cmp	r3, #0
 8008398:	bfc2      	ittt	gt
 800839a:	1af6      	subgt	r6, r6, r3
 800839c:	1aed      	subgt	r5, r5, r3
 800839e:	1aff      	subgt	r7, r7, r3
 80083a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083a2:	b1bb      	cbz	r3, 80083d4 <_strtod_l+0x724>
 80083a4:	4641      	mov	r1, r8
 80083a6:	461a      	mov	r2, r3
 80083a8:	4648      	mov	r0, r9
 80083aa:	f002 f901 	bl	800a5b0 <__pow5mult>
 80083ae:	4680      	mov	r8, r0
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f43f ae9b 	beq.w	80080ec <_strtod_l+0x43c>
 80083b6:	4601      	mov	r1, r0
 80083b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80083ba:	4648      	mov	r0, r9
 80083bc:	f002 f862 	bl	800a484 <__multiply>
 80083c0:	900c      	str	r0, [sp, #48]	; 0x30
 80083c2:	2800      	cmp	r0, #0
 80083c4:	f43f ae92 	beq.w	80080ec <_strtod_l+0x43c>
 80083c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083ca:	4648      	mov	r0, r9
 80083cc:	f001 ff73 	bl	800a2b6 <_Bfree>
 80083d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083d2:	931c      	str	r3, [sp, #112]	; 0x70
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dc7a      	bgt.n	80084ce <_strtod_l+0x81e>
 80083d8:	9b06      	ldr	r3, [sp, #24]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dd08      	ble.n	80083f0 <_strtod_l+0x740>
 80083de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083e0:	9905      	ldr	r1, [sp, #20]
 80083e2:	4648      	mov	r0, r9
 80083e4:	f002 f8e4 	bl	800a5b0 <__pow5mult>
 80083e8:	9005      	str	r0, [sp, #20]
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f43f ae7e 	beq.w	80080ec <_strtod_l+0x43c>
 80083f0:	2d00      	cmp	r5, #0
 80083f2:	dd08      	ble.n	8008406 <_strtod_l+0x756>
 80083f4:	462a      	mov	r2, r5
 80083f6:	9905      	ldr	r1, [sp, #20]
 80083f8:	4648      	mov	r0, r9
 80083fa:	f002 f927 	bl	800a64c <__lshift>
 80083fe:	9005      	str	r0, [sp, #20]
 8008400:	2800      	cmp	r0, #0
 8008402:	f43f ae73 	beq.w	80080ec <_strtod_l+0x43c>
 8008406:	2f00      	cmp	r7, #0
 8008408:	dd08      	ble.n	800841c <_strtod_l+0x76c>
 800840a:	4641      	mov	r1, r8
 800840c:	463a      	mov	r2, r7
 800840e:	4648      	mov	r0, r9
 8008410:	f002 f91c 	bl	800a64c <__lshift>
 8008414:	4680      	mov	r8, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	f43f ae68 	beq.w	80080ec <_strtod_l+0x43c>
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008420:	4648      	mov	r0, r9
 8008422:	f002 f981 	bl	800a728 <__mdiff>
 8008426:	4604      	mov	r4, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	f43f ae5f 	beq.w	80080ec <_strtod_l+0x43c>
 800842e:	68c3      	ldr	r3, [r0, #12]
 8008430:	930c      	str	r3, [sp, #48]	; 0x30
 8008432:	2300      	movs	r3, #0
 8008434:	60c3      	str	r3, [r0, #12]
 8008436:	4641      	mov	r1, r8
 8008438:	f002 f95c 	bl	800a6f4 <__mcmp>
 800843c:	2800      	cmp	r0, #0
 800843e:	da55      	bge.n	80084ec <_strtod_l+0x83c>
 8008440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008442:	b9e3      	cbnz	r3, 800847e <_strtod_l+0x7ce>
 8008444:	f1ba 0f00 	cmp.w	sl, #0
 8008448:	d119      	bne.n	800847e <_strtod_l+0x7ce>
 800844a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800844e:	b9b3      	cbnz	r3, 800847e <_strtod_l+0x7ce>
 8008450:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008454:	0d1b      	lsrs	r3, r3, #20
 8008456:	051b      	lsls	r3, r3, #20
 8008458:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800845c:	d90f      	bls.n	800847e <_strtod_l+0x7ce>
 800845e:	6963      	ldr	r3, [r4, #20]
 8008460:	b913      	cbnz	r3, 8008468 <_strtod_l+0x7b8>
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	2b01      	cmp	r3, #1
 8008466:	dd0a      	ble.n	800847e <_strtod_l+0x7ce>
 8008468:	4621      	mov	r1, r4
 800846a:	2201      	movs	r2, #1
 800846c:	4648      	mov	r0, r9
 800846e:	f002 f8ed 	bl	800a64c <__lshift>
 8008472:	4641      	mov	r1, r8
 8008474:	4604      	mov	r4, r0
 8008476:	f002 f93d 	bl	800a6f4 <__mcmp>
 800847a:	2800      	cmp	r0, #0
 800847c:	dc67      	bgt.n	800854e <_strtod_l+0x89e>
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d171      	bne.n	8008568 <_strtod_l+0x8b8>
 8008484:	e63d      	b.n	8008102 <_strtod_l+0x452>
 8008486:	f018 0f01 	tst.w	r8, #1
 800848a:	d004      	beq.n	8008496 <_strtod_l+0x7e6>
 800848c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008490:	f7f8 f8ba 	bl	8000608 <__aeabi_dmul>
 8008494:	2301      	movs	r3, #1
 8008496:	ea4f 0868 	mov.w	r8, r8, asr #1
 800849a:	3508      	adds	r5, #8
 800849c:	e6e5      	b.n	800826a <_strtod_l+0x5ba>
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	fa02 f303 	lsl.w	r3, r2, r3
 80084a6:	ea03 0a0a 	and.w	sl, r3, sl
 80084aa:	e6ff      	b.n	80082ac <_strtod_l+0x5fc>
 80084ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80084b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80084b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80084b8:	36e2      	adds	r6, #226	; 0xe2
 80084ba:	fa01 f306 	lsl.w	r3, r1, r6
 80084be:	930a      	str	r3, [sp, #40]	; 0x28
 80084c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80084c2:	e75d      	b.n	8008380 <_strtod_l+0x6d0>
 80084c4:	2300      	movs	r3, #0
 80084c6:	930a      	str	r3, [sp, #40]	; 0x28
 80084c8:	2301      	movs	r3, #1
 80084ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80084cc:	e758      	b.n	8008380 <_strtod_l+0x6d0>
 80084ce:	4632      	mov	r2, r6
 80084d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80084d2:	4648      	mov	r0, r9
 80084d4:	f002 f8ba 	bl	800a64c <__lshift>
 80084d8:	901c      	str	r0, [sp, #112]	; 0x70
 80084da:	2800      	cmp	r0, #0
 80084dc:	f47f af7c 	bne.w	80083d8 <_strtod_l+0x728>
 80084e0:	e604      	b.n	80080ec <_strtod_l+0x43c>
 80084e2:	bf00      	nop
 80084e4:	0800b0c0 	.word	0x0800b0c0
 80084e8:	fffffc02 	.word	0xfffffc02
 80084ec:	465d      	mov	r5, fp
 80084ee:	f040 8086 	bne.w	80085fe <_strtod_l+0x94e>
 80084f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f8:	b32a      	cbz	r2, 8008546 <_strtod_l+0x896>
 80084fa:	4aaf      	ldr	r2, [pc, #700]	; (80087b8 <_strtod_l+0xb08>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d153      	bne.n	80085a8 <_strtod_l+0x8f8>
 8008500:	9b04      	ldr	r3, [sp, #16]
 8008502:	4650      	mov	r0, sl
 8008504:	b1d3      	cbz	r3, 800853c <_strtod_l+0x88c>
 8008506:	4aad      	ldr	r2, [pc, #692]	; (80087bc <_strtod_l+0xb0c>)
 8008508:	402a      	ands	r2, r5
 800850a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800850e:	f04f 31ff 	mov.w	r1, #4294967295
 8008512:	d816      	bhi.n	8008542 <_strtod_l+0x892>
 8008514:	0d12      	lsrs	r2, r2, #20
 8008516:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800851a:	fa01 f303 	lsl.w	r3, r1, r3
 800851e:	4298      	cmp	r0, r3
 8008520:	d142      	bne.n	80085a8 <_strtod_l+0x8f8>
 8008522:	4ba7      	ldr	r3, [pc, #668]	; (80087c0 <_strtod_l+0xb10>)
 8008524:	429d      	cmp	r5, r3
 8008526:	d102      	bne.n	800852e <_strtod_l+0x87e>
 8008528:	3001      	adds	r0, #1
 800852a:	f43f addf 	beq.w	80080ec <_strtod_l+0x43c>
 800852e:	4ba3      	ldr	r3, [pc, #652]	; (80087bc <_strtod_l+0xb0c>)
 8008530:	402b      	ands	r3, r5
 8008532:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008536:	f04f 0a00 	mov.w	sl, #0
 800853a:	e7a0      	b.n	800847e <_strtod_l+0x7ce>
 800853c:	f04f 33ff 	mov.w	r3, #4294967295
 8008540:	e7ed      	b.n	800851e <_strtod_l+0x86e>
 8008542:	460b      	mov	r3, r1
 8008544:	e7eb      	b.n	800851e <_strtod_l+0x86e>
 8008546:	bb7b      	cbnz	r3, 80085a8 <_strtod_l+0x8f8>
 8008548:	f1ba 0f00 	cmp.w	sl, #0
 800854c:	d12c      	bne.n	80085a8 <_strtod_l+0x8f8>
 800854e:	9904      	ldr	r1, [sp, #16]
 8008550:	4a9a      	ldr	r2, [pc, #616]	; (80087bc <_strtod_l+0xb0c>)
 8008552:	465b      	mov	r3, fp
 8008554:	b1f1      	cbz	r1, 8008594 <_strtod_l+0x8e4>
 8008556:	ea02 010b 	and.w	r1, r2, fp
 800855a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800855e:	dc19      	bgt.n	8008594 <_strtod_l+0x8e4>
 8008560:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008564:	f77f ae5b 	ble.w	800821e <_strtod_l+0x56e>
 8008568:	4a96      	ldr	r2, [pc, #600]	; (80087c4 <_strtod_l+0xb14>)
 800856a:	2300      	movs	r3, #0
 800856c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008570:	4650      	mov	r0, sl
 8008572:	4659      	mov	r1, fp
 8008574:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008578:	f7f8 f846 	bl	8000608 <__aeabi_dmul>
 800857c:	4682      	mov	sl, r0
 800857e:	468b      	mov	fp, r1
 8008580:	2900      	cmp	r1, #0
 8008582:	f47f adbe 	bne.w	8008102 <_strtod_l+0x452>
 8008586:	2800      	cmp	r0, #0
 8008588:	f47f adbb 	bne.w	8008102 <_strtod_l+0x452>
 800858c:	2322      	movs	r3, #34	; 0x22
 800858e:	f8c9 3000 	str.w	r3, [r9]
 8008592:	e5b6      	b.n	8008102 <_strtod_l+0x452>
 8008594:	4013      	ands	r3, r2
 8008596:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800859a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800859e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80085a2:	f04f 3aff 	mov.w	sl, #4294967295
 80085a6:	e76a      	b.n	800847e <_strtod_l+0x7ce>
 80085a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085aa:	b193      	cbz	r3, 80085d2 <_strtod_l+0x922>
 80085ac:	422b      	tst	r3, r5
 80085ae:	f43f af66 	beq.w	800847e <_strtod_l+0x7ce>
 80085b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	4650      	mov	r0, sl
 80085b8:	4659      	mov	r1, fp
 80085ba:	b173      	cbz	r3, 80085da <_strtod_l+0x92a>
 80085bc:	f7ff fb5c 	bl	8007c78 <sulp>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085c8:	f7f7 fe68 	bl	800029c <__adddf3>
 80085cc:	4682      	mov	sl, r0
 80085ce:	468b      	mov	fp, r1
 80085d0:	e755      	b.n	800847e <_strtod_l+0x7ce>
 80085d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085d4:	ea13 0f0a 	tst.w	r3, sl
 80085d8:	e7e9      	b.n	80085ae <_strtod_l+0x8fe>
 80085da:	f7ff fb4d 	bl	8007c78 <sulp>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085e6:	f7f7 fe57 	bl	8000298 <__aeabi_dsub>
 80085ea:	2200      	movs	r2, #0
 80085ec:	2300      	movs	r3, #0
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	f7f8 fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f47f ae11 	bne.w	800821e <_strtod_l+0x56e>
 80085fc:	e73f      	b.n	800847e <_strtod_l+0x7ce>
 80085fe:	4641      	mov	r1, r8
 8008600:	4620      	mov	r0, r4
 8008602:	f002 f9b4 	bl	800a96e <__ratio>
 8008606:	ec57 6b10 	vmov	r6, r7, d0
 800860a:	2200      	movs	r2, #0
 800860c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008610:	ee10 0a10 	vmov	r0, s0
 8008614:	4639      	mov	r1, r7
 8008616:	f7f8 fa73 	bl	8000b00 <__aeabi_dcmple>
 800861a:	2800      	cmp	r0, #0
 800861c:	d077      	beq.n	800870e <_strtod_l+0xa5e>
 800861e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008620:	2b00      	cmp	r3, #0
 8008622:	d04a      	beq.n	80086ba <_strtod_l+0xa0a>
 8008624:	4b68      	ldr	r3, [pc, #416]	; (80087c8 <_strtod_l+0xb18>)
 8008626:	2200      	movs	r2, #0
 8008628:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800862c:	4f66      	ldr	r7, [pc, #408]	; (80087c8 <_strtod_l+0xb18>)
 800862e:	2600      	movs	r6, #0
 8008630:	4b62      	ldr	r3, [pc, #392]	; (80087bc <_strtod_l+0xb0c>)
 8008632:	402b      	ands	r3, r5
 8008634:	930f      	str	r3, [sp, #60]	; 0x3c
 8008636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008638:	4b64      	ldr	r3, [pc, #400]	; (80087cc <_strtod_l+0xb1c>)
 800863a:	429a      	cmp	r2, r3
 800863c:	f040 80ce 	bne.w	80087dc <_strtod_l+0xb2c>
 8008640:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008644:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008648:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800864c:	ec4b ab10 	vmov	d0, sl, fp
 8008650:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008654:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008658:	f002 f8c4 	bl	800a7e4 <__ulp>
 800865c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008660:	ec53 2b10 	vmov	r2, r3, d0
 8008664:	f7f7 ffd0 	bl	8000608 <__aeabi_dmul>
 8008668:	4652      	mov	r2, sl
 800866a:	465b      	mov	r3, fp
 800866c:	f7f7 fe16 	bl	800029c <__adddf3>
 8008670:	460b      	mov	r3, r1
 8008672:	4952      	ldr	r1, [pc, #328]	; (80087bc <_strtod_l+0xb0c>)
 8008674:	4a56      	ldr	r2, [pc, #344]	; (80087d0 <_strtod_l+0xb20>)
 8008676:	4019      	ands	r1, r3
 8008678:	4291      	cmp	r1, r2
 800867a:	4682      	mov	sl, r0
 800867c:	d95b      	bls.n	8008736 <_strtod_l+0xa86>
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008684:	4293      	cmp	r3, r2
 8008686:	d103      	bne.n	8008690 <_strtod_l+0x9e0>
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	3301      	adds	r3, #1
 800868c:	f43f ad2e 	beq.w	80080ec <_strtod_l+0x43c>
 8008690:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80087c0 <_strtod_l+0xb10>
 8008694:	f04f 3aff 	mov.w	sl, #4294967295
 8008698:	991c      	ldr	r1, [sp, #112]	; 0x70
 800869a:	4648      	mov	r0, r9
 800869c:	f001 fe0b 	bl	800a2b6 <_Bfree>
 80086a0:	9905      	ldr	r1, [sp, #20]
 80086a2:	4648      	mov	r0, r9
 80086a4:	f001 fe07 	bl	800a2b6 <_Bfree>
 80086a8:	4641      	mov	r1, r8
 80086aa:	4648      	mov	r0, r9
 80086ac:	f001 fe03 	bl	800a2b6 <_Bfree>
 80086b0:	4621      	mov	r1, r4
 80086b2:	4648      	mov	r0, r9
 80086b4:	f001 fdff 	bl	800a2b6 <_Bfree>
 80086b8:	e619      	b.n	80082ee <_strtod_l+0x63e>
 80086ba:	f1ba 0f00 	cmp.w	sl, #0
 80086be:	d11a      	bne.n	80086f6 <_strtod_l+0xa46>
 80086c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086c4:	b9eb      	cbnz	r3, 8008702 <_strtod_l+0xa52>
 80086c6:	2200      	movs	r2, #0
 80086c8:	4b3f      	ldr	r3, [pc, #252]	; (80087c8 <_strtod_l+0xb18>)
 80086ca:	4630      	mov	r0, r6
 80086cc:	4639      	mov	r1, r7
 80086ce:	f7f8 fa0d 	bl	8000aec <__aeabi_dcmplt>
 80086d2:	b9c8      	cbnz	r0, 8008708 <_strtod_l+0xa58>
 80086d4:	4630      	mov	r0, r6
 80086d6:	4639      	mov	r1, r7
 80086d8:	2200      	movs	r2, #0
 80086da:	4b3e      	ldr	r3, [pc, #248]	; (80087d4 <_strtod_l+0xb24>)
 80086dc:	f7f7 ff94 	bl	8000608 <__aeabi_dmul>
 80086e0:	4606      	mov	r6, r0
 80086e2:	460f      	mov	r7, r1
 80086e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80086e8:	9618      	str	r6, [sp, #96]	; 0x60
 80086ea:	9319      	str	r3, [sp, #100]	; 0x64
 80086ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80086f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086f4:	e79c      	b.n	8008630 <_strtod_l+0x980>
 80086f6:	f1ba 0f01 	cmp.w	sl, #1
 80086fa:	d102      	bne.n	8008702 <_strtod_l+0xa52>
 80086fc:	2d00      	cmp	r5, #0
 80086fe:	f43f ad8e 	beq.w	800821e <_strtod_l+0x56e>
 8008702:	2200      	movs	r2, #0
 8008704:	4b34      	ldr	r3, [pc, #208]	; (80087d8 <_strtod_l+0xb28>)
 8008706:	e78f      	b.n	8008628 <_strtod_l+0x978>
 8008708:	2600      	movs	r6, #0
 800870a:	4f32      	ldr	r7, [pc, #200]	; (80087d4 <_strtod_l+0xb24>)
 800870c:	e7ea      	b.n	80086e4 <_strtod_l+0xa34>
 800870e:	4b31      	ldr	r3, [pc, #196]	; (80087d4 <_strtod_l+0xb24>)
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	2200      	movs	r2, #0
 8008716:	f7f7 ff77 	bl	8000608 <__aeabi_dmul>
 800871a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871c:	4606      	mov	r6, r0
 800871e:	460f      	mov	r7, r1
 8008720:	b933      	cbnz	r3, 8008730 <_strtod_l+0xa80>
 8008722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008726:	9010      	str	r0, [sp, #64]	; 0x40
 8008728:	9311      	str	r3, [sp, #68]	; 0x44
 800872a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800872e:	e7df      	b.n	80086f0 <_strtod_l+0xa40>
 8008730:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008734:	e7f9      	b.n	800872a <_strtod_l+0xa7a>
 8008736:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800873a:	9b04      	ldr	r3, [sp, #16]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1ab      	bne.n	8008698 <_strtod_l+0x9e8>
 8008740:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008744:	0d1b      	lsrs	r3, r3, #20
 8008746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008748:	051b      	lsls	r3, r3, #20
 800874a:	429a      	cmp	r2, r3
 800874c:	465d      	mov	r5, fp
 800874e:	d1a3      	bne.n	8008698 <_strtod_l+0x9e8>
 8008750:	4639      	mov	r1, r7
 8008752:	4630      	mov	r0, r6
 8008754:	f7f8 fa08 	bl	8000b68 <__aeabi_d2iz>
 8008758:	f7f7 feec 	bl	8000534 <__aeabi_i2d>
 800875c:	460b      	mov	r3, r1
 800875e:	4602      	mov	r2, r0
 8008760:	4639      	mov	r1, r7
 8008762:	4630      	mov	r0, r6
 8008764:	f7f7 fd98 	bl	8000298 <__aeabi_dsub>
 8008768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800876a:	4606      	mov	r6, r0
 800876c:	460f      	mov	r7, r1
 800876e:	b933      	cbnz	r3, 800877e <_strtod_l+0xace>
 8008770:	f1ba 0f00 	cmp.w	sl, #0
 8008774:	d103      	bne.n	800877e <_strtod_l+0xace>
 8008776:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800877a:	2d00      	cmp	r5, #0
 800877c:	d06d      	beq.n	800885a <_strtod_l+0xbaa>
 800877e:	a30a      	add	r3, pc, #40	; (adr r3, 80087a8 <_strtod_l+0xaf8>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	4630      	mov	r0, r6
 8008786:	4639      	mov	r1, r7
 8008788:	f7f8 f9b0 	bl	8000aec <__aeabi_dcmplt>
 800878c:	2800      	cmp	r0, #0
 800878e:	f47f acb8 	bne.w	8008102 <_strtod_l+0x452>
 8008792:	a307      	add	r3, pc, #28	; (adr r3, 80087b0 <_strtod_l+0xb00>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f8 f9c4 	bl	8000b28 <__aeabi_dcmpgt>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	f43f af79 	beq.w	8008698 <_strtod_l+0x9e8>
 80087a6:	e4ac      	b.n	8008102 <_strtod_l+0x452>
 80087a8:	94a03595 	.word	0x94a03595
 80087ac:	3fdfffff 	.word	0x3fdfffff
 80087b0:	35afe535 	.word	0x35afe535
 80087b4:	3fe00000 	.word	0x3fe00000
 80087b8:	000fffff 	.word	0x000fffff
 80087bc:	7ff00000 	.word	0x7ff00000
 80087c0:	7fefffff 	.word	0x7fefffff
 80087c4:	39500000 	.word	0x39500000
 80087c8:	3ff00000 	.word	0x3ff00000
 80087cc:	7fe00000 	.word	0x7fe00000
 80087d0:	7c9fffff 	.word	0x7c9fffff
 80087d4:	3fe00000 	.word	0x3fe00000
 80087d8:	bff00000 	.word	0xbff00000
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	b333      	cbz	r3, 800882e <_strtod_l+0xb7e>
 80087e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80087e6:	d822      	bhi.n	800882e <_strtod_l+0xb7e>
 80087e8:	a327      	add	r3, pc, #156	; (adr r3, 8008888 <_strtod_l+0xbd8>)
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	4630      	mov	r0, r6
 80087f0:	4639      	mov	r1, r7
 80087f2:	f7f8 f985 	bl	8000b00 <__aeabi_dcmple>
 80087f6:	b1a0      	cbz	r0, 8008822 <_strtod_l+0xb72>
 80087f8:	4639      	mov	r1, r7
 80087fa:	4630      	mov	r0, r6
 80087fc:	f7f8 f9dc 	bl	8000bb8 <__aeabi_d2uiz>
 8008800:	2800      	cmp	r0, #0
 8008802:	bf08      	it	eq
 8008804:	2001      	moveq	r0, #1
 8008806:	f7f7 fe85 	bl	8000514 <__aeabi_ui2d>
 800880a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800880c:	4606      	mov	r6, r0
 800880e:	460f      	mov	r7, r1
 8008810:	bb03      	cbnz	r3, 8008854 <_strtod_l+0xba4>
 8008812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008816:	9012      	str	r0, [sp, #72]	; 0x48
 8008818:	9313      	str	r3, [sp, #76]	; 0x4c
 800881a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800881e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008824:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008826:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	930b      	str	r3, [sp, #44]	; 0x2c
 800882e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008832:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008836:	f001 ffd5 	bl	800a7e4 <__ulp>
 800883a:	4650      	mov	r0, sl
 800883c:	ec53 2b10 	vmov	r2, r3, d0
 8008840:	4659      	mov	r1, fp
 8008842:	f7f7 fee1 	bl	8000608 <__aeabi_dmul>
 8008846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800884a:	f7f7 fd27 	bl	800029c <__adddf3>
 800884e:	4682      	mov	sl, r0
 8008850:	468b      	mov	fp, r1
 8008852:	e772      	b.n	800873a <_strtod_l+0xa8a>
 8008854:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008858:	e7df      	b.n	800881a <_strtod_l+0xb6a>
 800885a:	a30d      	add	r3, pc, #52	; (adr r3, 8008890 <_strtod_l+0xbe0>)
 800885c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008860:	f7f8 f944 	bl	8000aec <__aeabi_dcmplt>
 8008864:	e79c      	b.n	80087a0 <_strtod_l+0xaf0>
 8008866:	2300      	movs	r3, #0
 8008868:	930d      	str	r3, [sp, #52]	; 0x34
 800886a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800886c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	f7ff ba61 	b.w	8007d36 <_strtod_l+0x86>
 8008874:	2b65      	cmp	r3, #101	; 0x65
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	f43f ab4e 	beq.w	8007f1a <_strtod_l+0x26a>
 800887e:	2101      	movs	r1, #1
 8008880:	4614      	mov	r4, r2
 8008882:	9104      	str	r1, [sp, #16]
 8008884:	f7ff bacb 	b.w	8007e1e <_strtod_l+0x16e>
 8008888:	ffc00000 	.word	0xffc00000
 800888c:	41dfffff 	.word	0x41dfffff
 8008890:	94a03595 	.word	0x94a03595
 8008894:	3fcfffff 	.word	0x3fcfffff

08008898 <_strtod_r>:
 8008898:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <_strtod_r+0x18>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	b410      	push	{r4}
 800889e:	6a1b      	ldr	r3, [r3, #32]
 80088a0:	4c04      	ldr	r4, [pc, #16]	; (80088b4 <_strtod_r+0x1c>)
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	bf08      	it	eq
 80088a6:	4623      	moveq	r3, r4
 80088a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088ac:	f7ff ba00 	b.w	8007cb0 <_strtod_l>
 80088b0:	2000000c 	.word	0x2000000c
 80088b4:	20000070 	.word	0x20000070

080088b8 <_strtol_l.isra.0>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	4680      	mov	r8, r0
 80088be:	4689      	mov	r9, r1
 80088c0:	4692      	mov	sl, r2
 80088c2:	461e      	mov	r6, r3
 80088c4:	460f      	mov	r7, r1
 80088c6:	463d      	mov	r5, r7
 80088c8:	9808      	ldr	r0, [sp, #32]
 80088ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088ce:	f001 fc27 	bl	800a120 <__locale_ctype_ptr_l>
 80088d2:	4420      	add	r0, r4
 80088d4:	7843      	ldrb	r3, [r0, #1]
 80088d6:	f013 0308 	ands.w	r3, r3, #8
 80088da:	d132      	bne.n	8008942 <_strtol_l.isra.0+0x8a>
 80088dc:	2c2d      	cmp	r4, #45	; 0x2d
 80088de:	d132      	bne.n	8008946 <_strtol_l.isra.0+0x8e>
 80088e0:	787c      	ldrb	r4, [r7, #1]
 80088e2:	1cbd      	adds	r5, r7, #2
 80088e4:	2201      	movs	r2, #1
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d05d      	beq.n	80089a6 <_strtol_l.isra.0+0xee>
 80088ea:	2e10      	cmp	r6, #16
 80088ec:	d109      	bne.n	8008902 <_strtol_l.isra.0+0x4a>
 80088ee:	2c30      	cmp	r4, #48	; 0x30
 80088f0:	d107      	bne.n	8008902 <_strtol_l.isra.0+0x4a>
 80088f2:	782b      	ldrb	r3, [r5, #0]
 80088f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088f8:	2b58      	cmp	r3, #88	; 0x58
 80088fa:	d14f      	bne.n	800899c <_strtol_l.isra.0+0xe4>
 80088fc:	786c      	ldrb	r4, [r5, #1]
 80088fe:	2610      	movs	r6, #16
 8008900:	3502      	adds	r5, #2
 8008902:	2a00      	cmp	r2, #0
 8008904:	bf14      	ite	ne
 8008906:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800890a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800890e:	2700      	movs	r7, #0
 8008910:	fbb1 fcf6 	udiv	ip, r1, r6
 8008914:	4638      	mov	r0, r7
 8008916:	fb06 1e1c 	mls	lr, r6, ip, r1
 800891a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800891e:	2b09      	cmp	r3, #9
 8008920:	d817      	bhi.n	8008952 <_strtol_l.isra.0+0x9a>
 8008922:	461c      	mov	r4, r3
 8008924:	42a6      	cmp	r6, r4
 8008926:	dd23      	ble.n	8008970 <_strtol_l.isra.0+0xb8>
 8008928:	1c7b      	adds	r3, r7, #1
 800892a:	d007      	beq.n	800893c <_strtol_l.isra.0+0x84>
 800892c:	4584      	cmp	ip, r0
 800892e:	d31c      	bcc.n	800896a <_strtol_l.isra.0+0xb2>
 8008930:	d101      	bne.n	8008936 <_strtol_l.isra.0+0x7e>
 8008932:	45a6      	cmp	lr, r4
 8008934:	db19      	blt.n	800896a <_strtol_l.isra.0+0xb2>
 8008936:	fb00 4006 	mla	r0, r0, r6, r4
 800893a:	2701      	movs	r7, #1
 800893c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008940:	e7eb      	b.n	800891a <_strtol_l.isra.0+0x62>
 8008942:	462f      	mov	r7, r5
 8008944:	e7bf      	b.n	80088c6 <_strtol_l.isra.0+0xe>
 8008946:	2c2b      	cmp	r4, #43	; 0x2b
 8008948:	bf04      	itt	eq
 800894a:	1cbd      	addeq	r5, r7, #2
 800894c:	787c      	ldrbeq	r4, [r7, #1]
 800894e:	461a      	mov	r2, r3
 8008950:	e7c9      	b.n	80088e6 <_strtol_l.isra.0+0x2e>
 8008952:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008956:	2b19      	cmp	r3, #25
 8008958:	d801      	bhi.n	800895e <_strtol_l.isra.0+0xa6>
 800895a:	3c37      	subs	r4, #55	; 0x37
 800895c:	e7e2      	b.n	8008924 <_strtol_l.isra.0+0x6c>
 800895e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008962:	2b19      	cmp	r3, #25
 8008964:	d804      	bhi.n	8008970 <_strtol_l.isra.0+0xb8>
 8008966:	3c57      	subs	r4, #87	; 0x57
 8008968:	e7dc      	b.n	8008924 <_strtol_l.isra.0+0x6c>
 800896a:	f04f 37ff 	mov.w	r7, #4294967295
 800896e:	e7e5      	b.n	800893c <_strtol_l.isra.0+0x84>
 8008970:	1c7b      	adds	r3, r7, #1
 8008972:	d108      	bne.n	8008986 <_strtol_l.isra.0+0xce>
 8008974:	2322      	movs	r3, #34	; 0x22
 8008976:	f8c8 3000 	str.w	r3, [r8]
 800897a:	4608      	mov	r0, r1
 800897c:	f1ba 0f00 	cmp.w	sl, #0
 8008980:	d107      	bne.n	8008992 <_strtol_l.isra.0+0xda>
 8008982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008986:	b102      	cbz	r2, 800898a <_strtol_l.isra.0+0xd2>
 8008988:	4240      	negs	r0, r0
 800898a:	f1ba 0f00 	cmp.w	sl, #0
 800898e:	d0f8      	beq.n	8008982 <_strtol_l.isra.0+0xca>
 8008990:	b10f      	cbz	r7, 8008996 <_strtol_l.isra.0+0xde>
 8008992:	f105 39ff 	add.w	r9, r5, #4294967295
 8008996:	f8ca 9000 	str.w	r9, [sl]
 800899a:	e7f2      	b.n	8008982 <_strtol_l.isra.0+0xca>
 800899c:	2430      	movs	r4, #48	; 0x30
 800899e:	2e00      	cmp	r6, #0
 80089a0:	d1af      	bne.n	8008902 <_strtol_l.isra.0+0x4a>
 80089a2:	2608      	movs	r6, #8
 80089a4:	e7ad      	b.n	8008902 <_strtol_l.isra.0+0x4a>
 80089a6:	2c30      	cmp	r4, #48	; 0x30
 80089a8:	d0a3      	beq.n	80088f2 <_strtol_l.isra.0+0x3a>
 80089aa:	260a      	movs	r6, #10
 80089ac:	e7a9      	b.n	8008902 <_strtol_l.isra.0+0x4a>
	...

080089b0 <_strtol_r>:
 80089b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089b2:	4c06      	ldr	r4, [pc, #24]	; (80089cc <_strtol_r+0x1c>)
 80089b4:	4d06      	ldr	r5, [pc, #24]	; (80089d0 <_strtol_r+0x20>)
 80089b6:	6824      	ldr	r4, [r4, #0]
 80089b8:	6a24      	ldr	r4, [r4, #32]
 80089ba:	2c00      	cmp	r4, #0
 80089bc:	bf08      	it	eq
 80089be:	462c      	moveq	r4, r5
 80089c0:	9400      	str	r4, [sp, #0]
 80089c2:	f7ff ff79 	bl	80088b8 <_strtol_l.isra.0>
 80089c6:	b003      	add	sp, #12
 80089c8:	bd30      	pop	{r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	2000000c 	.word	0x2000000c
 80089d0:	20000070 	.word	0x20000070

080089d4 <__swbuf_r>:
 80089d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d6:	460e      	mov	r6, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	4605      	mov	r5, r0
 80089dc:	b118      	cbz	r0, 80089e6 <__swbuf_r+0x12>
 80089de:	6983      	ldr	r3, [r0, #24]
 80089e0:	b90b      	cbnz	r3, 80089e6 <__swbuf_r+0x12>
 80089e2:	f000 ffed 	bl	80099c0 <__sinit>
 80089e6:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <__swbuf_r+0x98>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d12a      	bne.n	8008a42 <__swbuf_r+0x6e>
 80089ec:	686c      	ldr	r4, [r5, #4]
 80089ee:	69a3      	ldr	r3, [r4, #24]
 80089f0:	60a3      	str	r3, [r4, #8]
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	071a      	lsls	r2, r3, #28
 80089f6:	d52e      	bpl.n	8008a56 <__swbuf_r+0x82>
 80089f8:	6923      	ldr	r3, [r4, #16]
 80089fa:	b363      	cbz	r3, 8008a56 <__swbuf_r+0x82>
 80089fc:	6923      	ldr	r3, [r4, #16]
 80089fe:	6820      	ldr	r0, [r4, #0]
 8008a00:	1ac0      	subs	r0, r0, r3
 8008a02:	6963      	ldr	r3, [r4, #20]
 8008a04:	b2f6      	uxtb	r6, r6
 8008a06:	4283      	cmp	r3, r0
 8008a08:	4637      	mov	r7, r6
 8008a0a:	dc04      	bgt.n	8008a16 <__swbuf_r+0x42>
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	f000 ff6c 	bl	80098ec <_fflush_r>
 8008a14:	bb28      	cbnz	r0, 8008a62 <__swbuf_r+0x8e>
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	60a3      	str	r3, [r4, #8]
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	701e      	strb	r6, [r3, #0]
 8008a24:	6963      	ldr	r3, [r4, #20]
 8008a26:	3001      	adds	r0, #1
 8008a28:	4283      	cmp	r3, r0
 8008a2a:	d004      	beq.n	8008a36 <__swbuf_r+0x62>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d519      	bpl.n	8008a66 <__swbuf_r+0x92>
 8008a32:	2e0a      	cmp	r6, #10
 8008a34:	d117      	bne.n	8008a66 <__swbuf_r+0x92>
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 ff57 	bl	80098ec <_fflush_r>
 8008a3e:	b190      	cbz	r0, 8008a66 <__swbuf_r+0x92>
 8008a40:	e00f      	b.n	8008a62 <__swbuf_r+0x8e>
 8008a42:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <__swbuf_r+0x9c>)
 8008a44:	429c      	cmp	r4, r3
 8008a46:	d101      	bne.n	8008a4c <__swbuf_r+0x78>
 8008a48:	68ac      	ldr	r4, [r5, #8]
 8008a4a:	e7d0      	b.n	80089ee <__swbuf_r+0x1a>
 8008a4c:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <__swbuf_r+0xa0>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	bf08      	it	eq
 8008a52:	68ec      	ldreq	r4, [r5, #12]
 8008a54:	e7cb      	b.n	80089ee <__swbuf_r+0x1a>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f80d 	bl	8008a78 <__swsetup_r>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0cc      	beq.n	80089fc <__swbuf_r+0x28>
 8008a62:	f04f 37ff 	mov.w	r7, #4294967295
 8008a66:	4638      	mov	r0, r7
 8008a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	0800b118 	.word	0x0800b118
 8008a70:	0800b138 	.word	0x0800b138
 8008a74:	0800b0f8 	.word	0x0800b0f8

08008a78 <__swsetup_r>:
 8008a78:	4b32      	ldr	r3, [pc, #200]	; (8008b44 <__swsetup_r+0xcc>)
 8008a7a:	b570      	push	{r4, r5, r6, lr}
 8008a7c:	681d      	ldr	r5, [r3, #0]
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460c      	mov	r4, r1
 8008a82:	b125      	cbz	r5, 8008a8e <__swsetup_r+0x16>
 8008a84:	69ab      	ldr	r3, [r5, #24]
 8008a86:	b913      	cbnz	r3, 8008a8e <__swsetup_r+0x16>
 8008a88:	4628      	mov	r0, r5
 8008a8a:	f000 ff99 	bl	80099c0 <__sinit>
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <__swsetup_r+0xd0>)
 8008a90:	429c      	cmp	r4, r3
 8008a92:	d10f      	bne.n	8008ab4 <__swsetup_r+0x3c>
 8008a94:	686c      	ldr	r4, [r5, #4]
 8008a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	0715      	lsls	r5, r2, #28
 8008a9e:	d42c      	bmi.n	8008afa <__swsetup_r+0x82>
 8008aa0:	06d0      	lsls	r0, r2, #27
 8008aa2:	d411      	bmi.n	8008ac8 <__swsetup_r+0x50>
 8008aa4:	2209      	movs	r2, #9
 8008aa6:	6032      	str	r2, [r6, #0]
 8008aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aac:	81a3      	strh	r3, [r4, #12]
 8008aae:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab2:	e03e      	b.n	8008b32 <__swsetup_r+0xba>
 8008ab4:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <__swsetup_r+0xd4>)
 8008ab6:	429c      	cmp	r4, r3
 8008ab8:	d101      	bne.n	8008abe <__swsetup_r+0x46>
 8008aba:	68ac      	ldr	r4, [r5, #8]
 8008abc:	e7eb      	b.n	8008a96 <__swsetup_r+0x1e>
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <__swsetup_r+0xd8>)
 8008ac0:	429c      	cmp	r4, r3
 8008ac2:	bf08      	it	eq
 8008ac4:	68ec      	ldreq	r4, [r5, #12]
 8008ac6:	e7e6      	b.n	8008a96 <__swsetup_r+0x1e>
 8008ac8:	0751      	lsls	r1, r2, #29
 8008aca:	d512      	bpl.n	8008af2 <__swsetup_r+0x7a>
 8008acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ace:	b141      	cbz	r1, 8008ae2 <__swsetup_r+0x6a>
 8008ad0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ad4:	4299      	cmp	r1, r3
 8008ad6:	d002      	beq.n	8008ade <__swsetup_r+0x66>
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7fe f94d 	bl	8006d78 <_free_r>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	2300      	movs	r3, #0
 8008aec:	6063      	str	r3, [r4, #4]
 8008aee:	6923      	ldr	r3, [r4, #16]
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f043 0308 	orr.w	r3, r3, #8
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	b94b      	cbnz	r3, 8008b12 <__swsetup_r+0x9a>
 8008afe:	89a3      	ldrh	r3, [r4, #12]
 8008b00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b08:	d003      	beq.n	8008b12 <__swsetup_r+0x9a>
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f001 fb3f 	bl	800a190 <__smakebuf_r>
 8008b12:	89a2      	ldrh	r2, [r4, #12]
 8008b14:	f012 0301 	ands.w	r3, r2, #1
 8008b18:	d00c      	beq.n	8008b34 <__swsetup_r+0xbc>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60a3      	str	r3, [r4, #8]
 8008b1e:	6963      	ldr	r3, [r4, #20]
 8008b20:	425b      	negs	r3, r3
 8008b22:	61a3      	str	r3, [r4, #24]
 8008b24:	6923      	ldr	r3, [r4, #16]
 8008b26:	b953      	cbnz	r3, 8008b3e <__swsetup_r+0xc6>
 8008b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008b30:	d1ba      	bne.n	8008aa8 <__swsetup_r+0x30>
 8008b32:	bd70      	pop	{r4, r5, r6, pc}
 8008b34:	0792      	lsls	r2, r2, #30
 8008b36:	bf58      	it	pl
 8008b38:	6963      	ldrpl	r3, [r4, #20]
 8008b3a:	60a3      	str	r3, [r4, #8]
 8008b3c:	e7f2      	b.n	8008b24 <__swsetup_r+0xac>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	e7f7      	b.n	8008b32 <__swsetup_r+0xba>
 8008b42:	bf00      	nop
 8008b44:	2000000c 	.word	0x2000000c
 8008b48:	0800b118 	.word	0x0800b118
 8008b4c:	0800b138 	.word	0x0800b138
 8008b50:	0800b0f8 	.word	0x0800b0f8

08008b54 <quorem>:
 8008b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b58:	6903      	ldr	r3, [r0, #16]
 8008b5a:	690c      	ldr	r4, [r1, #16]
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	4680      	mov	r8, r0
 8008b60:	f2c0 8082 	blt.w	8008c68 <quorem+0x114>
 8008b64:	3c01      	subs	r4, #1
 8008b66:	f101 0714 	add.w	r7, r1, #20
 8008b6a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008b6e:	f100 0614 	add.w	r6, r0, #20
 8008b72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008b76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008b7a:	eb06 030c 	add.w	r3, r6, ip
 8008b7e:	3501      	adds	r5, #1
 8008b80:	eb07 090c 	add.w	r9, r7, ip
 8008b84:	9301      	str	r3, [sp, #4]
 8008b86:	fbb0 f5f5 	udiv	r5, r0, r5
 8008b8a:	b395      	cbz	r5, 8008bf2 <quorem+0x9e>
 8008b8c:	f04f 0a00 	mov.w	sl, #0
 8008b90:	4638      	mov	r0, r7
 8008b92:	46b6      	mov	lr, r6
 8008b94:	46d3      	mov	fp, sl
 8008b96:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b9a:	b293      	uxth	r3, r2
 8008b9c:	fb05 a303 	mla	r3, r5, r3, sl
 8008ba0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	ebab 0303 	sub.w	r3, fp, r3
 8008baa:	0c12      	lsrs	r2, r2, #16
 8008bac:	f8de b000 	ldr.w	fp, [lr]
 8008bb0:	fb05 a202 	mla	r2, r5, r2, sl
 8008bb4:	fa13 f38b 	uxtah	r3, r3, fp
 8008bb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008bbc:	fa1f fb82 	uxth.w	fp, r2
 8008bc0:	f8de 2000 	ldr.w	r2, [lr]
 8008bc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bd2:	4581      	cmp	r9, r0
 8008bd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008bd8:	f84e 3b04 	str.w	r3, [lr], #4
 8008bdc:	d2db      	bcs.n	8008b96 <quorem+0x42>
 8008bde:	f856 300c 	ldr.w	r3, [r6, ip]
 8008be2:	b933      	cbnz	r3, 8008bf2 <quorem+0x9e>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	3b04      	subs	r3, #4
 8008be8:	429e      	cmp	r6, r3
 8008bea:	461a      	mov	r2, r3
 8008bec:	d330      	bcc.n	8008c50 <quorem+0xfc>
 8008bee:	f8c8 4010 	str.w	r4, [r8, #16]
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f001 fd7e 	bl	800a6f4 <__mcmp>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	db25      	blt.n	8008c48 <quorem+0xf4>
 8008bfc:	3501      	adds	r5, #1
 8008bfe:	4630      	mov	r0, r6
 8008c00:	f04f 0c00 	mov.w	ip, #0
 8008c04:	f857 2b04 	ldr.w	r2, [r7], #4
 8008c08:	f8d0 e000 	ldr.w	lr, [r0]
 8008c0c:	b293      	uxth	r3, r2
 8008c0e:	ebac 0303 	sub.w	r3, ip, r3
 8008c12:	0c12      	lsrs	r2, r2, #16
 8008c14:	fa13 f38e 	uxtah	r3, r3, lr
 8008c18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008c1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c26:	45b9      	cmp	r9, r7
 8008c28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008c2c:	f840 3b04 	str.w	r3, [r0], #4
 8008c30:	d2e8      	bcs.n	8008c04 <quorem+0xb0>
 8008c32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008c36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008c3a:	b92a      	cbnz	r2, 8008c48 <quorem+0xf4>
 8008c3c:	3b04      	subs	r3, #4
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	d30b      	bcc.n	8008c5c <quorem+0x108>
 8008c44:	f8c8 4010 	str.w	r4, [r8, #16]
 8008c48:	4628      	mov	r0, r5
 8008c4a:	b003      	add	sp, #12
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	3b04      	subs	r3, #4
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	d1ca      	bne.n	8008bee <quorem+0x9a>
 8008c58:	3c01      	subs	r4, #1
 8008c5a:	e7c5      	b.n	8008be8 <quorem+0x94>
 8008c5c:	6812      	ldr	r2, [r2, #0]
 8008c5e:	3b04      	subs	r3, #4
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d1ef      	bne.n	8008c44 <quorem+0xf0>
 8008c64:	3c01      	subs	r4, #1
 8008c66:	e7ea      	b.n	8008c3e <quorem+0xea>
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7ee      	b.n	8008c4a <quorem+0xf6>
 8008c6c:	0000      	movs	r0, r0
	...

08008c70 <_dtoa_r>:
 8008c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c74:	ec57 6b10 	vmov	r6, r7, d0
 8008c78:	b097      	sub	sp, #92	; 0x5c
 8008c7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c7c:	9106      	str	r1, [sp, #24]
 8008c7e:	4604      	mov	r4, r0
 8008c80:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c82:	9312      	str	r3, [sp, #72]	; 0x48
 8008c84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c88:	e9cd 6700 	strd	r6, r7, [sp]
 8008c8c:	b93d      	cbnz	r5, 8008c9e <_dtoa_r+0x2e>
 8008c8e:	2010      	movs	r0, #16
 8008c90:	f7fe f862 	bl	8006d58 <malloc>
 8008c94:	6260      	str	r0, [r4, #36]	; 0x24
 8008c96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c9a:	6005      	str	r5, [r0, #0]
 8008c9c:	60c5      	str	r5, [r0, #12]
 8008c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca0:	6819      	ldr	r1, [r3, #0]
 8008ca2:	b151      	cbz	r1, 8008cba <_dtoa_r+0x4a>
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	604a      	str	r2, [r1, #4]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4093      	lsls	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f001 fb01 	bl	800a2b6 <_Bfree>
 8008cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	1e3b      	subs	r3, r7, #0
 8008cbc:	bfbb      	ittet	lt
 8008cbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008cc2:	9301      	strlt	r3, [sp, #4]
 8008cc4:	2300      	movge	r3, #0
 8008cc6:	2201      	movlt	r2, #1
 8008cc8:	bfac      	ite	ge
 8008cca:	f8c8 3000 	strge.w	r3, [r8]
 8008cce:	f8c8 2000 	strlt.w	r2, [r8]
 8008cd2:	4baf      	ldr	r3, [pc, #700]	; (8008f90 <_dtoa_r+0x320>)
 8008cd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008cd8:	ea33 0308 	bics.w	r3, r3, r8
 8008cdc:	d114      	bne.n	8008d08 <_dtoa_r+0x98>
 8008cde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	b923      	cbnz	r3, 8008cf4 <_dtoa_r+0x84>
 8008cea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	f000 8542 	beq.w	8009778 <_dtoa_r+0xb08>
 8008cf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008fa4 <_dtoa_r+0x334>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8544 	beq.w	8009788 <_dtoa_r+0xb18>
 8008d00:	f10b 0303 	add.w	r3, fp, #3
 8008d04:	f000 bd3e 	b.w	8009784 <_dtoa_r+0xb14>
 8008d08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2300      	movs	r3, #0
 8008d10:	4630      	mov	r0, r6
 8008d12:	4639      	mov	r1, r7
 8008d14:	f7f7 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d18:	4681      	mov	r9, r0
 8008d1a:	b168      	cbz	r0, 8008d38 <_dtoa_r+0xc8>
 8008d1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d1e:	2301      	movs	r3, #1
 8008d20:	6013      	str	r3, [r2, #0]
 8008d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 8524 	beq.w	8009772 <_dtoa_r+0xb02>
 8008d2a:	4b9a      	ldr	r3, [pc, #616]	; (8008f94 <_dtoa_r+0x324>)
 8008d2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	f000 bd28 	b.w	8009788 <_dtoa_r+0xb18>
 8008d38:	aa14      	add	r2, sp, #80	; 0x50
 8008d3a:	a915      	add	r1, sp, #84	; 0x54
 8008d3c:	ec47 6b10 	vmov	d0, r6, r7
 8008d40:	4620      	mov	r0, r4
 8008d42:	f001 fdc5 	bl	800a8d0 <__d2b>
 8008d46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d4a:	9004      	str	r0, [sp, #16]
 8008d4c:	2d00      	cmp	r5, #0
 8008d4e:	d07c      	beq.n	8008e4a <_dtoa_r+0x1da>
 8008d50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008d58:	46b2      	mov	sl, r6
 8008d5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008d5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008d66:	2200      	movs	r2, #0
 8008d68:	4b8b      	ldr	r3, [pc, #556]	; (8008f98 <_dtoa_r+0x328>)
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	a381      	add	r3, pc, #516	; (adr r3, 8008f78 <_dtoa_r+0x308>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fc46 	bl	8000608 <__aeabi_dmul>
 8008d7c:	a380      	add	r3, pc, #512	; (adr r3, 8008f80 <_dtoa_r+0x310>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa8b 	bl	800029c <__adddf3>
 8008d86:	4606      	mov	r6, r0
 8008d88:	4628      	mov	r0, r5
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	f7f7 fbd2 	bl	8000534 <__aeabi_i2d>
 8008d90:	a37d      	add	r3, pc, #500	; (adr r3, 8008f88 <_dtoa_r+0x318>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fc37 	bl	8000608 <__aeabi_dmul>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4630      	mov	r0, r6
 8008da0:	4639      	mov	r1, r7
 8008da2:	f7f7 fa7b 	bl	800029c <__adddf3>
 8008da6:	4606      	mov	r6, r0
 8008da8:	460f      	mov	r7, r1
 8008daa:	f7f7 fedd 	bl	8000b68 <__aeabi_d2iz>
 8008dae:	2200      	movs	r2, #0
 8008db0:	4682      	mov	sl, r0
 8008db2:	2300      	movs	r3, #0
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 fe98 	bl	8000aec <__aeabi_dcmplt>
 8008dbc:	b148      	cbz	r0, 8008dd2 <_dtoa_r+0x162>
 8008dbe:	4650      	mov	r0, sl
 8008dc0:	f7f7 fbb8 	bl	8000534 <__aeabi_i2d>
 8008dc4:	4632      	mov	r2, r6
 8008dc6:	463b      	mov	r3, r7
 8008dc8:	f7f7 fe86 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dcc:	b908      	cbnz	r0, 8008dd2 <_dtoa_r+0x162>
 8008dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008dd2:	f1ba 0f16 	cmp.w	sl, #22
 8008dd6:	d859      	bhi.n	8008e8c <_dtoa_r+0x21c>
 8008dd8:	4970      	ldr	r1, [pc, #448]	; (8008f9c <_dtoa_r+0x32c>)
 8008dda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008de2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de6:	f7f7 fe9f 	bl	8000b28 <__aeabi_dcmpgt>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	d050      	beq.n	8008e90 <_dtoa_r+0x220>
 8008dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008df2:	2300      	movs	r3, #0
 8008df4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008df6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008df8:	1b5d      	subs	r5, r3, r5
 8008dfa:	f1b5 0801 	subs.w	r8, r5, #1
 8008dfe:	bf49      	itett	mi
 8008e00:	f1c5 0301 	rsbmi	r3, r5, #1
 8008e04:	2300      	movpl	r3, #0
 8008e06:	9305      	strmi	r3, [sp, #20]
 8008e08:	f04f 0800 	movmi.w	r8, #0
 8008e0c:	bf58      	it	pl
 8008e0e:	9305      	strpl	r3, [sp, #20]
 8008e10:	f1ba 0f00 	cmp.w	sl, #0
 8008e14:	db3e      	blt.n	8008e94 <_dtoa_r+0x224>
 8008e16:	2300      	movs	r3, #0
 8008e18:	44d0      	add	r8, sl
 8008e1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008e1e:	9307      	str	r3, [sp, #28]
 8008e20:	9b06      	ldr	r3, [sp, #24]
 8008e22:	2b09      	cmp	r3, #9
 8008e24:	f200 8090 	bhi.w	8008f48 <_dtoa_r+0x2d8>
 8008e28:	2b05      	cmp	r3, #5
 8008e2a:	bfc4      	itt	gt
 8008e2c:	3b04      	subgt	r3, #4
 8008e2e:	9306      	strgt	r3, [sp, #24]
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	f1a3 0302 	sub.w	r3, r3, #2
 8008e36:	bfcc      	ite	gt
 8008e38:	2500      	movgt	r5, #0
 8008e3a:	2501      	movle	r5, #1
 8008e3c:	2b03      	cmp	r3, #3
 8008e3e:	f200 808f 	bhi.w	8008f60 <_dtoa_r+0x2f0>
 8008e42:	e8df f003 	tbb	[pc, r3]
 8008e46:	7f7d      	.short	0x7f7d
 8008e48:	7131      	.short	0x7131
 8008e4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008e4e:	441d      	add	r5, r3
 8008e50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008e54:	2820      	cmp	r0, #32
 8008e56:	dd13      	ble.n	8008e80 <_dtoa_r+0x210>
 8008e58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008e5c:	9b00      	ldr	r3, [sp, #0]
 8008e5e:	fa08 f800 	lsl.w	r8, r8, r0
 8008e62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008e66:	fa23 f000 	lsr.w	r0, r3, r0
 8008e6a:	ea48 0000 	orr.w	r0, r8, r0
 8008e6e:	f7f7 fb51 	bl	8000514 <__aeabi_ui2d>
 8008e72:	2301      	movs	r3, #1
 8008e74:	4682      	mov	sl, r0
 8008e76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008e7a:	3d01      	subs	r5, #1
 8008e7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e7e:	e772      	b.n	8008d66 <_dtoa_r+0xf6>
 8008e80:	9b00      	ldr	r3, [sp, #0]
 8008e82:	f1c0 0020 	rsb	r0, r0, #32
 8008e86:	fa03 f000 	lsl.w	r0, r3, r0
 8008e8a:	e7f0      	b.n	8008e6e <_dtoa_r+0x1fe>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e7b1      	b.n	8008df4 <_dtoa_r+0x184>
 8008e90:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e92:	e7b0      	b.n	8008df6 <_dtoa_r+0x186>
 8008e94:	9b05      	ldr	r3, [sp, #20]
 8008e96:	eba3 030a 	sub.w	r3, r3, sl
 8008e9a:	9305      	str	r3, [sp, #20]
 8008e9c:	f1ca 0300 	rsb	r3, sl, #0
 8008ea0:	9307      	str	r3, [sp, #28]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	930e      	str	r3, [sp, #56]	; 0x38
 8008ea6:	e7bb      	b.n	8008e20 <_dtoa_r+0x1b0>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8008eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dd59      	ble.n	8008f66 <_dtoa_r+0x2f6>
 8008eb2:	9302      	str	r3, [sp, #8]
 8008eb4:	4699      	mov	r9, r3
 8008eb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008eb8:	2200      	movs	r2, #0
 8008eba:	6072      	str	r2, [r6, #4]
 8008ebc:	2204      	movs	r2, #4
 8008ebe:	f102 0014 	add.w	r0, r2, #20
 8008ec2:	4298      	cmp	r0, r3
 8008ec4:	6871      	ldr	r1, [r6, #4]
 8008ec6:	d953      	bls.n	8008f70 <_dtoa_r+0x300>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f001 f9c0 	bl	800a24e <_Balloc>
 8008ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ed0:	6030      	str	r0, [r6, #0]
 8008ed2:	f1b9 0f0e 	cmp.w	r9, #14
 8008ed6:	f8d3 b000 	ldr.w	fp, [r3]
 8008eda:	f200 80e6 	bhi.w	80090aa <_dtoa_r+0x43a>
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	f000 80e3 	beq.w	80090aa <_dtoa_r+0x43a>
 8008ee4:	ed9d 7b00 	vldr	d7, [sp]
 8008ee8:	f1ba 0f00 	cmp.w	sl, #0
 8008eec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008ef0:	dd74      	ble.n	8008fdc <_dtoa_r+0x36c>
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <_dtoa_r+0x32c>)
 8008ef4:	f00a 030f 	and.w	r3, sl, #15
 8008ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008efc:	ed93 7b00 	vldr	d7, [r3]
 8008f00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008f04:	06f0      	lsls	r0, r6, #27
 8008f06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008f0a:	d565      	bpl.n	8008fd8 <_dtoa_r+0x368>
 8008f0c:	4b24      	ldr	r3, [pc, #144]	; (8008fa0 <_dtoa_r+0x330>)
 8008f0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f16:	f7f7 fca1 	bl	800085c <__aeabi_ddiv>
 8008f1a:	e9cd 0100 	strd	r0, r1, [sp]
 8008f1e:	f006 060f 	and.w	r6, r6, #15
 8008f22:	2503      	movs	r5, #3
 8008f24:	4f1e      	ldr	r7, [pc, #120]	; (8008fa0 <_dtoa_r+0x330>)
 8008f26:	e04c      	b.n	8008fc2 <_dtoa_r+0x352>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f2e:	4453      	add	r3, sl
 8008f30:	f103 0901 	add.w	r9, r3, #1
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	464b      	mov	r3, r9
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	bfb8      	it	lt
 8008f3c:	2301      	movlt	r3, #1
 8008f3e:	e7ba      	b.n	8008eb6 <_dtoa_r+0x246>
 8008f40:	2300      	movs	r3, #0
 8008f42:	e7b2      	b.n	8008eaa <_dtoa_r+0x23a>
 8008f44:	2300      	movs	r3, #0
 8008f46:	e7f0      	b.n	8008f2a <_dtoa_r+0x2ba>
 8008f48:	2501      	movs	r5, #1
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9306      	str	r3, [sp, #24]
 8008f4e:	950a      	str	r5, [sp, #40]	; 0x28
 8008f50:	f04f 33ff 	mov.w	r3, #4294967295
 8008f54:	9302      	str	r3, [sp, #8]
 8008f56:	4699      	mov	r9, r3
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2312      	movs	r3, #18
 8008f5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f5e:	e7aa      	b.n	8008eb6 <_dtoa_r+0x246>
 8008f60:	2301      	movs	r3, #1
 8008f62:	930a      	str	r3, [sp, #40]	; 0x28
 8008f64:	e7f4      	b.n	8008f50 <_dtoa_r+0x2e0>
 8008f66:	2301      	movs	r3, #1
 8008f68:	9302      	str	r3, [sp, #8]
 8008f6a:	4699      	mov	r9, r3
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	e7f5      	b.n	8008f5c <_dtoa_r+0x2ec>
 8008f70:	3101      	adds	r1, #1
 8008f72:	6071      	str	r1, [r6, #4]
 8008f74:	0052      	lsls	r2, r2, #1
 8008f76:	e7a2      	b.n	8008ebe <_dtoa_r+0x24e>
 8008f78:	636f4361 	.word	0x636f4361
 8008f7c:	3fd287a7 	.word	0x3fd287a7
 8008f80:	8b60c8b3 	.word	0x8b60c8b3
 8008f84:	3fc68a28 	.word	0x3fc68a28
 8008f88:	509f79fb 	.word	0x509f79fb
 8008f8c:	3fd34413 	.word	0x3fd34413
 8008f90:	7ff00000 	.word	0x7ff00000
 8008f94:	0800b06d 	.word	0x0800b06d
 8008f98:	3ff80000 	.word	0x3ff80000
 8008f9c:	0800b190 	.word	0x0800b190
 8008fa0:	0800b168 	.word	0x0800b168
 8008fa4:	0800b0f1 	.word	0x0800b0f1
 8008fa8:	07f1      	lsls	r1, r6, #31
 8008faa:	d508      	bpl.n	8008fbe <_dtoa_r+0x34e>
 8008fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb4:	f7f7 fb28 	bl	8000608 <__aeabi_dmul>
 8008fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008fbc:	3501      	adds	r5, #1
 8008fbe:	1076      	asrs	r6, r6, #1
 8008fc0:	3708      	adds	r7, #8
 8008fc2:	2e00      	cmp	r6, #0
 8008fc4:	d1f0      	bne.n	8008fa8 <_dtoa_r+0x338>
 8008fc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008fca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fce:	f7f7 fc45 	bl	800085c <__aeabi_ddiv>
 8008fd2:	e9cd 0100 	strd	r0, r1, [sp]
 8008fd6:	e01a      	b.n	800900e <_dtoa_r+0x39e>
 8008fd8:	2502      	movs	r5, #2
 8008fda:	e7a3      	b.n	8008f24 <_dtoa_r+0x2b4>
 8008fdc:	f000 80a0 	beq.w	8009120 <_dtoa_r+0x4b0>
 8008fe0:	f1ca 0600 	rsb	r6, sl, #0
 8008fe4:	4b9f      	ldr	r3, [pc, #636]	; (8009264 <_dtoa_r+0x5f4>)
 8008fe6:	4fa0      	ldr	r7, [pc, #640]	; (8009268 <_dtoa_r+0x5f8>)
 8008fe8:	f006 020f 	and.w	r2, r6, #15
 8008fec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ff8:	f7f7 fb06 	bl	8000608 <__aeabi_dmul>
 8008ffc:	e9cd 0100 	strd	r0, r1, [sp]
 8009000:	1136      	asrs	r6, r6, #4
 8009002:	2300      	movs	r3, #0
 8009004:	2502      	movs	r5, #2
 8009006:	2e00      	cmp	r6, #0
 8009008:	d17f      	bne.n	800910a <_dtoa_r+0x49a>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e1      	bne.n	8008fd2 <_dtoa_r+0x362>
 800900e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 8087 	beq.w	8009124 <_dtoa_r+0x4b4>
 8009016:	e9dd 6700 	ldrd	r6, r7, [sp]
 800901a:	2200      	movs	r2, #0
 800901c:	4b93      	ldr	r3, [pc, #588]	; (800926c <_dtoa_r+0x5fc>)
 800901e:	4630      	mov	r0, r6
 8009020:	4639      	mov	r1, r7
 8009022:	f7f7 fd63 	bl	8000aec <__aeabi_dcmplt>
 8009026:	2800      	cmp	r0, #0
 8009028:	d07c      	beq.n	8009124 <_dtoa_r+0x4b4>
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	d079      	beq.n	8009124 <_dtoa_r+0x4b4>
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	2b00      	cmp	r3, #0
 8009034:	dd35      	ble.n	80090a2 <_dtoa_r+0x432>
 8009036:	f10a 33ff 	add.w	r3, sl, #4294967295
 800903a:	9308      	str	r3, [sp, #32]
 800903c:	4639      	mov	r1, r7
 800903e:	2200      	movs	r2, #0
 8009040:	4b8b      	ldr	r3, [pc, #556]	; (8009270 <_dtoa_r+0x600>)
 8009042:	4630      	mov	r0, r6
 8009044:	f7f7 fae0 	bl	8000608 <__aeabi_dmul>
 8009048:	e9cd 0100 	strd	r0, r1, [sp]
 800904c:	9f02      	ldr	r7, [sp, #8]
 800904e:	3501      	adds	r5, #1
 8009050:	4628      	mov	r0, r5
 8009052:	f7f7 fa6f 	bl	8000534 <__aeabi_i2d>
 8009056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800905a:	f7f7 fad5 	bl	8000608 <__aeabi_dmul>
 800905e:	2200      	movs	r2, #0
 8009060:	4b84      	ldr	r3, [pc, #528]	; (8009274 <_dtoa_r+0x604>)
 8009062:	f7f7 f91b 	bl	800029c <__adddf3>
 8009066:	4605      	mov	r5, r0
 8009068:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800906c:	2f00      	cmp	r7, #0
 800906e:	d15d      	bne.n	800912c <_dtoa_r+0x4bc>
 8009070:	2200      	movs	r2, #0
 8009072:	4b81      	ldr	r3, [pc, #516]	; (8009278 <_dtoa_r+0x608>)
 8009074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009078:	f7f7 f90e 	bl	8000298 <__aeabi_dsub>
 800907c:	462a      	mov	r2, r5
 800907e:	4633      	mov	r3, r6
 8009080:	e9cd 0100 	strd	r0, r1, [sp]
 8009084:	f7f7 fd50 	bl	8000b28 <__aeabi_dcmpgt>
 8009088:	2800      	cmp	r0, #0
 800908a:	f040 8288 	bne.w	800959e <_dtoa_r+0x92e>
 800908e:	462a      	mov	r2, r5
 8009090:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009094:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009098:	f7f7 fd28 	bl	8000aec <__aeabi_dcmplt>
 800909c:	2800      	cmp	r0, #0
 800909e:	f040 827c 	bne.w	800959a <_dtoa_r+0x92a>
 80090a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80090a6:	e9cd 2300 	strd	r2, r3, [sp]
 80090aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f2c0 8150 	blt.w	8009352 <_dtoa_r+0x6e2>
 80090b2:	f1ba 0f0e 	cmp.w	sl, #14
 80090b6:	f300 814c 	bgt.w	8009352 <_dtoa_r+0x6e2>
 80090ba:	4b6a      	ldr	r3, [pc, #424]	; (8009264 <_dtoa_r+0x5f4>)
 80090bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090c0:	ed93 7b00 	vldr	d7, [r3]
 80090c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80090cc:	f280 80d8 	bge.w	8009280 <_dtoa_r+0x610>
 80090d0:	f1b9 0f00 	cmp.w	r9, #0
 80090d4:	f300 80d4 	bgt.w	8009280 <_dtoa_r+0x610>
 80090d8:	f040 825e 	bne.w	8009598 <_dtoa_r+0x928>
 80090dc:	2200      	movs	r2, #0
 80090de:	4b66      	ldr	r3, [pc, #408]	; (8009278 <_dtoa_r+0x608>)
 80090e0:	ec51 0b17 	vmov	r0, r1, d7
 80090e4:	f7f7 fa90 	bl	8000608 <__aeabi_dmul>
 80090e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80090ec:	f7f7 fd12 	bl	8000b14 <__aeabi_dcmpge>
 80090f0:	464f      	mov	r7, r9
 80090f2:	464e      	mov	r6, r9
 80090f4:	2800      	cmp	r0, #0
 80090f6:	f040 8234 	bne.w	8009562 <_dtoa_r+0x8f2>
 80090fa:	2331      	movs	r3, #49	; 0x31
 80090fc:	f10b 0501 	add.w	r5, fp, #1
 8009100:	f88b 3000 	strb.w	r3, [fp]
 8009104:	f10a 0a01 	add.w	sl, sl, #1
 8009108:	e22f      	b.n	800956a <_dtoa_r+0x8fa>
 800910a:	07f2      	lsls	r2, r6, #31
 800910c:	d505      	bpl.n	800911a <_dtoa_r+0x4aa>
 800910e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009112:	f7f7 fa79 	bl	8000608 <__aeabi_dmul>
 8009116:	3501      	adds	r5, #1
 8009118:	2301      	movs	r3, #1
 800911a:	1076      	asrs	r6, r6, #1
 800911c:	3708      	adds	r7, #8
 800911e:	e772      	b.n	8009006 <_dtoa_r+0x396>
 8009120:	2502      	movs	r5, #2
 8009122:	e774      	b.n	800900e <_dtoa_r+0x39e>
 8009124:	f8cd a020 	str.w	sl, [sp, #32]
 8009128:	464f      	mov	r7, r9
 800912a:	e791      	b.n	8009050 <_dtoa_r+0x3e0>
 800912c:	4b4d      	ldr	r3, [pc, #308]	; (8009264 <_dtoa_r+0x5f4>)
 800912e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009132:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009138:	2b00      	cmp	r3, #0
 800913a:	d047      	beq.n	80091cc <_dtoa_r+0x55c>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	2000      	movs	r0, #0
 8009142:	494e      	ldr	r1, [pc, #312]	; (800927c <_dtoa_r+0x60c>)
 8009144:	f7f7 fb8a 	bl	800085c <__aeabi_ddiv>
 8009148:	462a      	mov	r2, r5
 800914a:	4633      	mov	r3, r6
 800914c:	f7f7 f8a4 	bl	8000298 <__aeabi_dsub>
 8009150:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009154:	465d      	mov	r5, fp
 8009156:	e9dd 0100 	ldrd	r0, r1, [sp]
 800915a:	f7f7 fd05 	bl	8000b68 <__aeabi_d2iz>
 800915e:	4606      	mov	r6, r0
 8009160:	f7f7 f9e8 	bl	8000534 <__aeabi_i2d>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	e9dd 0100 	ldrd	r0, r1, [sp]
 800916c:	f7f7 f894 	bl	8000298 <__aeabi_dsub>
 8009170:	3630      	adds	r6, #48	; 0x30
 8009172:	f805 6b01 	strb.w	r6, [r5], #1
 8009176:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800917a:	e9cd 0100 	strd	r0, r1, [sp]
 800917e:	f7f7 fcb5 	bl	8000aec <__aeabi_dcmplt>
 8009182:	2800      	cmp	r0, #0
 8009184:	d163      	bne.n	800924e <_dtoa_r+0x5de>
 8009186:	e9dd 2300 	ldrd	r2, r3, [sp]
 800918a:	2000      	movs	r0, #0
 800918c:	4937      	ldr	r1, [pc, #220]	; (800926c <_dtoa_r+0x5fc>)
 800918e:	f7f7 f883 	bl	8000298 <__aeabi_dsub>
 8009192:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009196:	f7f7 fca9 	bl	8000aec <__aeabi_dcmplt>
 800919a:	2800      	cmp	r0, #0
 800919c:	f040 80b7 	bne.w	800930e <_dtoa_r+0x69e>
 80091a0:	eba5 030b 	sub.w	r3, r5, fp
 80091a4:	429f      	cmp	r7, r3
 80091a6:	f77f af7c 	ble.w	80090a2 <_dtoa_r+0x432>
 80091aa:	2200      	movs	r2, #0
 80091ac:	4b30      	ldr	r3, [pc, #192]	; (8009270 <_dtoa_r+0x600>)
 80091ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091b2:	f7f7 fa29 	bl	8000608 <__aeabi_dmul>
 80091b6:	2200      	movs	r2, #0
 80091b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091bc:	4b2c      	ldr	r3, [pc, #176]	; (8009270 <_dtoa_r+0x600>)
 80091be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091c2:	f7f7 fa21 	bl	8000608 <__aeabi_dmul>
 80091c6:	e9cd 0100 	strd	r0, r1, [sp]
 80091ca:	e7c4      	b.n	8009156 <_dtoa_r+0x4e6>
 80091cc:	462a      	mov	r2, r5
 80091ce:	4633      	mov	r3, r6
 80091d0:	f7f7 fa1a 	bl	8000608 <__aeabi_dmul>
 80091d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80091d8:	eb0b 0507 	add.w	r5, fp, r7
 80091dc:	465e      	mov	r6, fp
 80091de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091e2:	f7f7 fcc1 	bl	8000b68 <__aeabi_d2iz>
 80091e6:	4607      	mov	r7, r0
 80091e8:	f7f7 f9a4 	bl	8000534 <__aeabi_i2d>
 80091ec:	3730      	adds	r7, #48	; 0x30
 80091ee:	4602      	mov	r2, r0
 80091f0:	460b      	mov	r3, r1
 80091f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091f6:	f7f7 f84f 	bl	8000298 <__aeabi_dsub>
 80091fa:	f806 7b01 	strb.w	r7, [r6], #1
 80091fe:	42ae      	cmp	r6, r5
 8009200:	e9cd 0100 	strd	r0, r1, [sp]
 8009204:	f04f 0200 	mov.w	r2, #0
 8009208:	d126      	bne.n	8009258 <_dtoa_r+0x5e8>
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <_dtoa_r+0x60c>)
 800920c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009210:	f7f7 f844 	bl	800029c <__adddf3>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800921c:	f7f7 fc84 	bl	8000b28 <__aeabi_dcmpgt>
 8009220:	2800      	cmp	r0, #0
 8009222:	d174      	bne.n	800930e <_dtoa_r+0x69e>
 8009224:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009228:	2000      	movs	r0, #0
 800922a:	4914      	ldr	r1, [pc, #80]	; (800927c <_dtoa_r+0x60c>)
 800922c:	f7f7 f834 	bl	8000298 <__aeabi_dsub>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009238:	f7f7 fc58 	bl	8000aec <__aeabi_dcmplt>
 800923c:	2800      	cmp	r0, #0
 800923e:	f43f af30 	beq.w	80090a2 <_dtoa_r+0x432>
 8009242:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009246:	2b30      	cmp	r3, #48	; 0x30
 8009248:	f105 32ff 	add.w	r2, r5, #4294967295
 800924c:	d002      	beq.n	8009254 <_dtoa_r+0x5e4>
 800924e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009252:	e04a      	b.n	80092ea <_dtoa_r+0x67a>
 8009254:	4615      	mov	r5, r2
 8009256:	e7f4      	b.n	8009242 <_dtoa_r+0x5d2>
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <_dtoa_r+0x600>)
 800925a:	f7f7 f9d5 	bl	8000608 <__aeabi_dmul>
 800925e:	e9cd 0100 	strd	r0, r1, [sp]
 8009262:	e7bc      	b.n	80091de <_dtoa_r+0x56e>
 8009264:	0800b190 	.word	0x0800b190
 8009268:	0800b168 	.word	0x0800b168
 800926c:	3ff00000 	.word	0x3ff00000
 8009270:	40240000 	.word	0x40240000
 8009274:	401c0000 	.word	0x401c0000
 8009278:	40140000 	.word	0x40140000
 800927c:	3fe00000 	.word	0x3fe00000
 8009280:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009284:	465d      	mov	r5, fp
 8009286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800928a:	4630      	mov	r0, r6
 800928c:	4639      	mov	r1, r7
 800928e:	f7f7 fae5 	bl	800085c <__aeabi_ddiv>
 8009292:	f7f7 fc69 	bl	8000b68 <__aeabi_d2iz>
 8009296:	4680      	mov	r8, r0
 8009298:	f7f7 f94c 	bl	8000534 <__aeabi_i2d>
 800929c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092a0:	f7f7 f9b2 	bl	8000608 <__aeabi_dmul>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4630      	mov	r0, r6
 80092aa:	4639      	mov	r1, r7
 80092ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80092b0:	f7f6 fff2 	bl	8000298 <__aeabi_dsub>
 80092b4:	f805 6b01 	strb.w	r6, [r5], #1
 80092b8:	eba5 060b 	sub.w	r6, r5, fp
 80092bc:	45b1      	cmp	r9, r6
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	d139      	bne.n	8009338 <_dtoa_r+0x6c8>
 80092c4:	f7f6 ffea 	bl	800029c <__adddf3>
 80092c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092cc:	4606      	mov	r6, r0
 80092ce:	460f      	mov	r7, r1
 80092d0:	f7f7 fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 80092d4:	b9c8      	cbnz	r0, 800930a <_dtoa_r+0x69a>
 80092d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092da:	4630      	mov	r0, r6
 80092dc:	4639      	mov	r1, r7
 80092de:	f7f7 fbfb 	bl	8000ad8 <__aeabi_dcmpeq>
 80092e2:	b110      	cbz	r0, 80092ea <_dtoa_r+0x67a>
 80092e4:	f018 0f01 	tst.w	r8, #1
 80092e8:	d10f      	bne.n	800930a <_dtoa_r+0x69a>
 80092ea:	9904      	ldr	r1, [sp, #16]
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 ffe2 	bl	800a2b6 <_Bfree>
 80092f2:	2300      	movs	r3, #0
 80092f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092f6:	702b      	strb	r3, [r5, #0]
 80092f8:	f10a 0301 	add.w	r3, sl, #1
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009300:	2b00      	cmp	r3, #0
 8009302:	f000 8241 	beq.w	8009788 <_dtoa_r+0xb18>
 8009306:	601d      	str	r5, [r3, #0]
 8009308:	e23e      	b.n	8009788 <_dtoa_r+0xb18>
 800930a:	f8cd a020 	str.w	sl, [sp, #32]
 800930e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009312:	2a39      	cmp	r2, #57	; 0x39
 8009314:	f105 33ff 	add.w	r3, r5, #4294967295
 8009318:	d108      	bne.n	800932c <_dtoa_r+0x6bc>
 800931a:	459b      	cmp	fp, r3
 800931c:	d10a      	bne.n	8009334 <_dtoa_r+0x6c4>
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	3301      	adds	r3, #1
 8009322:	9308      	str	r3, [sp, #32]
 8009324:	2330      	movs	r3, #48	; 0x30
 8009326:	f88b 3000 	strb.w	r3, [fp]
 800932a:	465b      	mov	r3, fp
 800932c:	781a      	ldrb	r2, [r3, #0]
 800932e:	3201      	adds	r2, #1
 8009330:	701a      	strb	r2, [r3, #0]
 8009332:	e78c      	b.n	800924e <_dtoa_r+0x5de>
 8009334:	461d      	mov	r5, r3
 8009336:	e7ea      	b.n	800930e <_dtoa_r+0x69e>
 8009338:	2200      	movs	r2, #0
 800933a:	4b9b      	ldr	r3, [pc, #620]	; (80095a8 <_dtoa_r+0x938>)
 800933c:	f7f7 f964 	bl	8000608 <__aeabi_dmul>
 8009340:	2200      	movs	r2, #0
 8009342:	2300      	movs	r3, #0
 8009344:	4606      	mov	r6, r0
 8009346:	460f      	mov	r7, r1
 8009348:	f7f7 fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800934c:	2800      	cmp	r0, #0
 800934e:	d09a      	beq.n	8009286 <_dtoa_r+0x616>
 8009350:	e7cb      	b.n	80092ea <_dtoa_r+0x67a>
 8009352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009354:	2a00      	cmp	r2, #0
 8009356:	f000 808b 	beq.w	8009470 <_dtoa_r+0x800>
 800935a:	9a06      	ldr	r2, [sp, #24]
 800935c:	2a01      	cmp	r2, #1
 800935e:	dc6e      	bgt.n	800943e <_dtoa_r+0x7ce>
 8009360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009362:	2a00      	cmp	r2, #0
 8009364:	d067      	beq.n	8009436 <_dtoa_r+0x7c6>
 8009366:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800936a:	9f07      	ldr	r7, [sp, #28]
 800936c:	9d05      	ldr	r5, [sp, #20]
 800936e:	9a05      	ldr	r2, [sp, #20]
 8009370:	2101      	movs	r1, #1
 8009372:	441a      	add	r2, r3
 8009374:	4620      	mov	r0, r4
 8009376:	9205      	str	r2, [sp, #20]
 8009378:	4498      	add	r8, r3
 800937a:	f001 f87a 	bl	800a472 <__i2b>
 800937e:	4606      	mov	r6, r0
 8009380:	2d00      	cmp	r5, #0
 8009382:	dd0c      	ble.n	800939e <_dtoa_r+0x72e>
 8009384:	f1b8 0f00 	cmp.w	r8, #0
 8009388:	dd09      	ble.n	800939e <_dtoa_r+0x72e>
 800938a:	4545      	cmp	r5, r8
 800938c:	9a05      	ldr	r2, [sp, #20]
 800938e:	462b      	mov	r3, r5
 8009390:	bfa8      	it	ge
 8009392:	4643      	movge	r3, r8
 8009394:	1ad2      	subs	r2, r2, r3
 8009396:	9205      	str	r2, [sp, #20]
 8009398:	1aed      	subs	r5, r5, r3
 800939a:	eba8 0803 	sub.w	r8, r8, r3
 800939e:	9b07      	ldr	r3, [sp, #28]
 80093a0:	b1eb      	cbz	r3, 80093de <_dtoa_r+0x76e>
 80093a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d067      	beq.n	8009478 <_dtoa_r+0x808>
 80093a8:	b18f      	cbz	r7, 80093ce <_dtoa_r+0x75e>
 80093aa:	4631      	mov	r1, r6
 80093ac:	463a      	mov	r2, r7
 80093ae:	4620      	mov	r0, r4
 80093b0:	f001 f8fe 	bl	800a5b0 <__pow5mult>
 80093b4:	9a04      	ldr	r2, [sp, #16]
 80093b6:	4601      	mov	r1, r0
 80093b8:	4606      	mov	r6, r0
 80093ba:	4620      	mov	r0, r4
 80093bc:	f001 f862 	bl	800a484 <__multiply>
 80093c0:	9904      	ldr	r1, [sp, #16]
 80093c2:	9008      	str	r0, [sp, #32]
 80093c4:	4620      	mov	r0, r4
 80093c6:	f000 ff76 	bl	800a2b6 <_Bfree>
 80093ca:	9b08      	ldr	r3, [sp, #32]
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9b07      	ldr	r3, [sp, #28]
 80093d0:	1bda      	subs	r2, r3, r7
 80093d2:	d004      	beq.n	80093de <_dtoa_r+0x76e>
 80093d4:	9904      	ldr	r1, [sp, #16]
 80093d6:	4620      	mov	r0, r4
 80093d8:	f001 f8ea 	bl	800a5b0 <__pow5mult>
 80093dc:	9004      	str	r0, [sp, #16]
 80093de:	2101      	movs	r1, #1
 80093e0:	4620      	mov	r0, r4
 80093e2:	f001 f846 	bl	800a472 <__i2b>
 80093e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e8:	4607      	mov	r7, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 81d0 	beq.w	8009790 <_dtoa_r+0xb20>
 80093f0:	461a      	mov	r2, r3
 80093f2:	4601      	mov	r1, r0
 80093f4:	4620      	mov	r0, r4
 80093f6:	f001 f8db 	bl	800a5b0 <__pow5mult>
 80093fa:	9b06      	ldr	r3, [sp, #24]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	4607      	mov	r7, r0
 8009400:	dc40      	bgt.n	8009484 <_dtoa_r+0x814>
 8009402:	9b00      	ldr	r3, [sp, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d139      	bne.n	800947c <_dtoa_r+0x80c>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800940e:	2b00      	cmp	r3, #0
 8009410:	d136      	bne.n	8009480 <_dtoa_r+0x810>
 8009412:	9b01      	ldr	r3, [sp, #4]
 8009414:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009418:	0d1b      	lsrs	r3, r3, #20
 800941a:	051b      	lsls	r3, r3, #20
 800941c:	b12b      	cbz	r3, 800942a <_dtoa_r+0x7ba>
 800941e:	9b05      	ldr	r3, [sp, #20]
 8009420:	3301      	adds	r3, #1
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	2301      	movs	r3, #1
 800942a:	9307      	str	r3, [sp, #28]
 800942c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800942e:	2b00      	cmp	r3, #0
 8009430:	d12a      	bne.n	8009488 <_dtoa_r+0x818>
 8009432:	2001      	movs	r0, #1
 8009434:	e030      	b.n	8009498 <_dtoa_r+0x828>
 8009436:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009438:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800943c:	e795      	b.n	800936a <_dtoa_r+0x6fa>
 800943e:	9b07      	ldr	r3, [sp, #28]
 8009440:	f109 37ff 	add.w	r7, r9, #4294967295
 8009444:	42bb      	cmp	r3, r7
 8009446:	bfbf      	itttt	lt
 8009448:	9b07      	ldrlt	r3, [sp, #28]
 800944a:	9707      	strlt	r7, [sp, #28]
 800944c:	1afa      	sublt	r2, r7, r3
 800944e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009450:	bfbb      	ittet	lt
 8009452:	189b      	addlt	r3, r3, r2
 8009454:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009456:	1bdf      	subge	r7, r3, r7
 8009458:	2700      	movlt	r7, #0
 800945a:	f1b9 0f00 	cmp.w	r9, #0
 800945e:	bfb5      	itete	lt
 8009460:	9b05      	ldrlt	r3, [sp, #20]
 8009462:	9d05      	ldrge	r5, [sp, #20]
 8009464:	eba3 0509 	sublt.w	r5, r3, r9
 8009468:	464b      	movge	r3, r9
 800946a:	bfb8      	it	lt
 800946c:	2300      	movlt	r3, #0
 800946e:	e77e      	b.n	800936e <_dtoa_r+0x6fe>
 8009470:	9f07      	ldr	r7, [sp, #28]
 8009472:	9d05      	ldr	r5, [sp, #20]
 8009474:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009476:	e783      	b.n	8009380 <_dtoa_r+0x710>
 8009478:	9a07      	ldr	r2, [sp, #28]
 800947a:	e7ab      	b.n	80093d4 <_dtoa_r+0x764>
 800947c:	2300      	movs	r3, #0
 800947e:	e7d4      	b.n	800942a <_dtoa_r+0x7ba>
 8009480:	9b00      	ldr	r3, [sp, #0]
 8009482:	e7d2      	b.n	800942a <_dtoa_r+0x7ba>
 8009484:	2300      	movs	r3, #0
 8009486:	9307      	str	r3, [sp, #28]
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800948e:	6918      	ldr	r0, [r3, #16]
 8009490:	f000 ffa1 	bl	800a3d6 <__hi0bits>
 8009494:	f1c0 0020 	rsb	r0, r0, #32
 8009498:	4440      	add	r0, r8
 800949a:	f010 001f 	ands.w	r0, r0, #31
 800949e:	d047      	beq.n	8009530 <_dtoa_r+0x8c0>
 80094a0:	f1c0 0320 	rsb	r3, r0, #32
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	dd3b      	ble.n	8009520 <_dtoa_r+0x8b0>
 80094a8:	9b05      	ldr	r3, [sp, #20]
 80094aa:	f1c0 001c 	rsb	r0, r0, #28
 80094ae:	4403      	add	r3, r0
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	4405      	add	r5, r0
 80094b4:	4480      	add	r8, r0
 80094b6:	9b05      	ldr	r3, [sp, #20]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dd05      	ble.n	80094c8 <_dtoa_r+0x858>
 80094bc:	461a      	mov	r2, r3
 80094be:	9904      	ldr	r1, [sp, #16]
 80094c0:	4620      	mov	r0, r4
 80094c2:	f001 f8c3 	bl	800a64c <__lshift>
 80094c6:	9004      	str	r0, [sp, #16]
 80094c8:	f1b8 0f00 	cmp.w	r8, #0
 80094cc:	dd05      	ble.n	80094da <_dtoa_r+0x86a>
 80094ce:	4639      	mov	r1, r7
 80094d0:	4642      	mov	r2, r8
 80094d2:	4620      	mov	r0, r4
 80094d4:	f001 f8ba 	bl	800a64c <__lshift>
 80094d8:	4607      	mov	r7, r0
 80094da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094dc:	b353      	cbz	r3, 8009534 <_dtoa_r+0x8c4>
 80094de:	4639      	mov	r1, r7
 80094e0:	9804      	ldr	r0, [sp, #16]
 80094e2:	f001 f907 	bl	800a6f4 <__mcmp>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	da24      	bge.n	8009534 <_dtoa_r+0x8c4>
 80094ea:	2300      	movs	r3, #0
 80094ec:	220a      	movs	r2, #10
 80094ee:	9904      	ldr	r1, [sp, #16]
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 fef7 	bl	800a2e4 <__multadd>
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	9004      	str	r0, [sp, #16]
 80094fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 814d 	beq.w	800979e <_dtoa_r+0xb2e>
 8009504:	2300      	movs	r3, #0
 8009506:	4631      	mov	r1, r6
 8009508:	220a      	movs	r2, #10
 800950a:	4620      	mov	r0, r4
 800950c:	f000 feea 	bl	800a2e4 <__multadd>
 8009510:	9b02      	ldr	r3, [sp, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	4606      	mov	r6, r0
 8009516:	dc4f      	bgt.n	80095b8 <_dtoa_r+0x948>
 8009518:	9b06      	ldr	r3, [sp, #24]
 800951a:	2b02      	cmp	r3, #2
 800951c:	dd4c      	ble.n	80095b8 <_dtoa_r+0x948>
 800951e:	e011      	b.n	8009544 <_dtoa_r+0x8d4>
 8009520:	d0c9      	beq.n	80094b6 <_dtoa_r+0x846>
 8009522:	9a05      	ldr	r2, [sp, #20]
 8009524:	331c      	adds	r3, #28
 8009526:	441a      	add	r2, r3
 8009528:	9205      	str	r2, [sp, #20]
 800952a:	441d      	add	r5, r3
 800952c:	4498      	add	r8, r3
 800952e:	e7c2      	b.n	80094b6 <_dtoa_r+0x846>
 8009530:	4603      	mov	r3, r0
 8009532:	e7f6      	b.n	8009522 <_dtoa_r+0x8b2>
 8009534:	f1b9 0f00 	cmp.w	r9, #0
 8009538:	dc38      	bgt.n	80095ac <_dtoa_r+0x93c>
 800953a:	9b06      	ldr	r3, [sp, #24]
 800953c:	2b02      	cmp	r3, #2
 800953e:	dd35      	ble.n	80095ac <_dtoa_r+0x93c>
 8009540:	f8cd 9008 	str.w	r9, [sp, #8]
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	b963      	cbnz	r3, 8009562 <_dtoa_r+0x8f2>
 8009548:	4639      	mov	r1, r7
 800954a:	2205      	movs	r2, #5
 800954c:	4620      	mov	r0, r4
 800954e:	f000 fec9 	bl	800a2e4 <__multadd>
 8009552:	4601      	mov	r1, r0
 8009554:	4607      	mov	r7, r0
 8009556:	9804      	ldr	r0, [sp, #16]
 8009558:	f001 f8cc 	bl	800a6f4 <__mcmp>
 800955c:	2800      	cmp	r0, #0
 800955e:	f73f adcc 	bgt.w	80090fa <_dtoa_r+0x48a>
 8009562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009564:	465d      	mov	r5, fp
 8009566:	ea6f 0a03 	mvn.w	sl, r3
 800956a:	f04f 0900 	mov.w	r9, #0
 800956e:	4639      	mov	r1, r7
 8009570:	4620      	mov	r0, r4
 8009572:	f000 fea0 	bl	800a2b6 <_Bfree>
 8009576:	2e00      	cmp	r6, #0
 8009578:	f43f aeb7 	beq.w	80092ea <_dtoa_r+0x67a>
 800957c:	f1b9 0f00 	cmp.w	r9, #0
 8009580:	d005      	beq.n	800958e <_dtoa_r+0x91e>
 8009582:	45b1      	cmp	r9, r6
 8009584:	d003      	beq.n	800958e <_dtoa_r+0x91e>
 8009586:	4649      	mov	r1, r9
 8009588:	4620      	mov	r0, r4
 800958a:	f000 fe94 	bl	800a2b6 <_Bfree>
 800958e:	4631      	mov	r1, r6
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fe90 	bl	800a2b6 <_Bfree>
 8009596:	e6a8      	b.n	80092ea <_dtoa_r+0x67a>
 8009598:	2700      	movs	r7, #0
 800959a:	463e      	mov	r6, r7
 800959c:	e7e1      	b.n	8009562 <_dtoa_r+0x8f2>
 800959e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80095a2:	463e      	mov	r6, r7
 80095a4:	e5a9      	b.n	80090fa <_dtoa_r+0x48a>
 80095a6:	bf00      	nop
 80095a8:	40240000 	.word	0x40240000
 80095ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 80fa 	beq.w	80097ac <_dtoa_r+0xb3c>
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	dd05      	ble.n	80095c8 <_dtoa_r+0x958>
 80095bc:	4631      	mov	r1, r6
 80095be:	462a      	mov	r2, r5
 80095c0:	4620      	mov	r0, r4
 80095c2:	f001 f843 	bl	800a64c <__lshift>
 80095c6:	4606      	mov	r6, r0
 80095c8:	9b07      	ldr	r3, [sp, #28]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d04c      	beq.n	8009668 <_dtoa_r+0x9f8>
 80095ce:	6871      	ldr	r1, [r6, #4]
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fe3c 	bl	800a24e <_Balloc>
 80095d6:	6932      	ldr	r2, [r6, #16]
 80095d8:	3202      	adds	r2, #2
 80095da:	4605      	mov	r5, r0
 80095dc:	0092      	lsls	r2, r2, #2
 80095de:	f106 010c 	add.w	r1, r6, #12
 80095e2:	300c      	adds	r0, #12
 80095e4:	f000 fe26 	bl	800a234 <memcpy>
 80095e8:	2201      	movs	r2, #1
 80095ea:	4629      	mov	r1, r5
 80095ec:	4620      	mov	r0, r4
 80095ee:	f001 f82d 	bl	800a64c <__lshift>
 80095f2:	9b00      	ldr	r3, [sp, #0]
 80095f4:	f8cd b014 	str.w	fp, [sp, #20]
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	46b1      	mov	r9, r6
 80095fe:	9307      	str	r3, [sp, #28]
 8009600:	4606      	mov	r6, r0
 8009602:	4639      	mov	r1, r7
 8009604:	9804      	ldr	r0, [sp, #16]
 8009606:	f7ff faa5 	bl	8008b54 <quorem>
 800960a:	4649      	mov	r1, r9
 800960c:	4605      	mov	r5, r0
 800960e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009612:	9804      	ldr	r0, [sp, #16]
 8009614:	f001 f86e 	bl	800a6f4 <__mcmp>
 8009618:	4632      	mov	r2, r6
 800961a:	9000      	str	r0, [sp, #0]
 800961c:	4639      	mov	r1, r7
 800961e:	4620      	mov	r0, r4
 8009620:	f001 f882 	bl	800a728 <__mdiff>
 8009624:	68c3      	ldr	r3, [r0, #12]
 8009626:	4602      	mov	r2, r0
 8009628:	bb03      	cbnz	r3, 800966c <_dtoa_r+0x9fc>
 800962a:	4601      	mov	r1, r0
 800962c:	9008      	str	r0, [sp, #32]
 800962e:	9804      	ldr	r0, [sp, #16]
 8009630:	f001 f860 	bl	800a6f4 <__mcmp>
 8009634:	9a08      	ldr	r2, [sp, #32]
 8009636:	4603      	mov	r3, r0
 8009638:	4611      	mov	r1, r2
 800963a:	4620      	mov	r0, r4
 800963c:	9308      	str	r3, [sp, #32]
 800963e:	f000 fe3a 	bl	800a2b6 <_Bfree>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	b9a3      	cbnz	r3, 8009670 <_dtoa_r+0xa00>
 8009646:	9a06      	ldr	r2, [sp, #24]
 8009648:	b992      	cbnz	r2, 8009670 <_dtoa_r+0xa00>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	b982      	cbnz	r2, 8009670 <_dtoa_r+0xa00>
 800964e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009652:	d029      	beq.n	80096a8 <_dtoa_r+0xa38>
 8009654:	9b00      	ldr	r3, [sp, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd01      	ble.n	800965e <_dtoa_r+0x9ee>
 800965a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800965e:	9b05      	ldr	r3, [sp, #20]
 8009660:	1c5d      	adds	r5, r3, #1
 8009662:	f883 8000 	strb.w	r8, [r3]
 8009666:	e782      	b.n	800956e <_dtoa_r+0x8fe>
 8009668:	4630      	mov	r0, r6
 800966a:	e7c2      	b.n	80095f2 <_dtoa_r+0x982>
 800966c:	2301      	movs	r3, #1
 800966e:	e7e3      	b.n	8009638 <_dtoa_r+0x9c8>
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	2a00      	cmp	r2, #0
 8009674:	db04      	blt.n	8009680 <_dtoa_r+0xa10>
 8009676:	d125      	bne.n	80096c4 <_dtoa_r+0xa54>
 8009678:	9a06      	ldr	r2, [sp, #24]
 800967a:	bb1a      	cbnz	r2, 80096c4 <_dtoa_r+0xa54>
 800967c:	9a07      	ldr	r2, [sp, #28]
 800967e:	bb0a      	cbnz	r2, 80096c4 <_dtoa_r+0xa54>
 8009680:	2b00      	cmp	r3, #0
 8009682:	ddec      	ble.n	800965e <_dtoa_r+0x9ee>
 8009684:	2201      	movs	r2, #1
 8009686:	9904      	ldr	r1, [sp, #16]
 8009688:	4620      	mov	r0, r4
 800968a:	f000 ffdf 	bl	800a64c <__lshift>
 800968e:	4639      	mov	r1, r7
 8009690:	9004      	str	r0, [sp, #16]
 8009692:	f001 f82f 	bl	800a6f4 <__mcmp>
 8009696:	2800      	cmp	r0, #0
 8009698:	dc03      	bgt.n	80096a2 <_dtoa_r+0xa32>
 800969a:	d1e0      	bne.n	800965e <_dtoa_r+0x9ee>
 800969c:	f018 0f01 	tst.w	r8, #1
 80096a0:	d0dd      	beq.n	800965e <_dtoa_r+0x9ee>
 80096a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096a6:	d1d8      	bne.n	800965a <_dtoa_r+0x9ea>
 80096a8:	9b05      	ldr	r3, [sp, #20]
 80096aa:	9a05      	ldr	r2, [sp, #20]
 80096ac:	1c5d      	adds	r5, r3, #1
 80096ae:	2339      	movs	r3, #57	; 0x39
 80096b0:	7013      	strb	r3, [r2, #0]
 80096b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096b6:	2b39      	cmp	r3, #57	; 0x39
 80096b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80096bc:	d04f      	beq.n	800975e <_dtoa_r+0xaee>
 80096be:	3301      	adds	r3, #1
 80096c0:	7013      	strb	r3, [r2, #0]
 80096c2:	e754      	b.n	800956e <_dtoa_r+0x8fe>
 80096c4:	9a05      	ldr	r2, [sp, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f102 0501 	add.w	r5, r2, #1
 80096cc:	dd06      	ble.n	80096dc <_dtoa_r+0xa6c>
 80096ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80096d2:	d0e9      	beq.n	80096a8 <_dtoa_r+0xa38>
 80096d4:	f108 0801 	add.w	r8, r8, #1
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	e7c2      	b.n	8009662 <_dtoa_r+0x9f2>
 80096dc:	9a02      	ldr	r2, [sp, #8]
 80096de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80096e2:	eba5 030b 	sub.w	r3, r5, fp
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d021      	beq.n	800972e <_dtoa_r+0xabe>
 80096ea:	2300      	movs	r3, #0
 80096ec:	220a      	movs	r2, #10
 80096ee:	9904      	ldr	r1, [sp, #16]
 80096f0:	4620      	mov	r0, r4
 80096f2:	f000 fdf7 	bl	800a2e4 <__multadd>
 80096f6:	45b1      	cmp	r9, r6
 80096f8:	9004      	str	r0, [sp, #16]
 80096fa:	f04f 0300 	mov.w	r3, #0
 80096fe:	f04f 020a 	mov.w	r2, #10
 8009702:	4649      	mov	r1, r9
 8009704:	4620      	mov	r0, r4
 8009706:	d105      	bne.n	8009714 <_dtoa_r+0xaa4>
 8009708:	f000 fdec 	bl	800a2e4 <__multadd>
 800970c:	4681      	mov	r9, r0
 800970e:	4606      	mov	r6, r0
 8009710:	9505      	str	r5, [sp, #20]
 8009712:	e776      	b.n	8009602 <_dtoa_r+0x992>
 8009714:	f000 fde6 	bl	800a2e4 <__multadd>
 8009718:	4631      	mov	r1, r6
 800971a:	4681      	mov	r9, r0
 800971c:	2300      	movs	r3, #0
 800971e:	220a      	movs	r2, #10
 8009720:	4620      	mov	r0, r4
 8009722:	f000 fddf 	bl	800a2e4 <__multadd>
 8009726:	4606      	mov	r6, r0
 8009728:	e7f2      	b.n	8009710 <_dtoa_r+0xaa0>
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	2201      	movs	r2, #1
 8009730:	9904      	ldr	r1, [sp, #16]
 8009732:	4620      	mov	r0, r4
 8009734:	f000 ff8a 	bl	800a64c <__lshift>
 8009738:	4639      	mov	r1, r7
 800973a:	9004      	str	r0, [sp, #16]
 800973c:	f000 ffda 	bl	800a6f4 <__mcmp>
 8009740:	2800      	cmp	r0, #0
 8009742:	dcb6      	bgt.n	80096b2 <_dtoa_r+0xa42>
 8009744:	d102      	bne.n	800974c <_dtoa_r+0xadc>
 8009746:	f018 0f01 	tst.w	r8, #1
 800974a:	d1b2      	bne.n	80096b2 <_dtoa_r+0xa42>
 800974c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009750:	2b30      	cmp	r3, #48	; 0x30
 8009752:	f105 32ff 	add.w	r2, r5, #4294967295
 8009756:	f47f af0a 	bne.w	800956e <_dtoa_r+0x8fe>
 800975a:	4615      	mov	r5, r2
 800975c:	e7f6      	b.n	800974c <_dtoa_r+0xadc>
 800975e:	4593      	cmp	fp, r2
 8009760:	d105      	bne.n	800976e <_dtoa_r+0xafe>
 8009762:	2331      	movs	r3, #49	; 0x31
 8009764:	f10a 0a01 	add.w	sl, sl, #1
 8009768:	f88b 3000 	strb.w	r3, [fp]
 800976c:	e6ff      	b.n	800956e <_dtoa_r+0x8fe>
 800976e:	4615      	mov	r5, r2
 8009770:	e79f      	b.n	80096b2 <_dtoa_r+0xa42>
 8009772:	f8df b064 	ldr.w	fp, [pc, #100]	; 80097d8 <_dtoa_r+0xb68>
 8009776:	e007      	b.n	8009788 <_dtoa_r+0xb18>
 8009778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800977a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80097dc <_dtoa_r+0xb6c>
 800977e:	b11b      	cbz	r3, 8009788 <_dtoa_r+0xb18>
 8009780:	f10b 0308 	add.w	r3, fp, #8
 8009784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	4658      	mov	r0, fp
 800978a:	b017      	add	sp, #92	; 0x5c
 800978c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009790:	9b06      	ldr	r3, [sp, #24]
 8009792:	2b01      	cmp	r3, #1
 8009794:	f77f ae35 	ble.w	8009402 <_dtoa_r+0x792>
 8009798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800979a:	9307      	str	r3, [sp, #28]
 800979c:	e649      	b.n	8009432 <_dtoa_r+0x7c2>
 800979e:	9b02      	ldr	r3, [sp, #8]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	dc03      	bgt.n	80097ac <_dtoa_r+0xb3c>
 80097a4:	9b06      	ldr	r3, [sp, #24]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	f73f aecc 	bgt.w	8009544 <_dtoa_r+0x8d4>
 80097ac:	465d      	mov	r5, fp
 80097ae:	4639      	mov	r1, r7
 80097b0:	9804      	ldr	r0, [sp, #16]
 80097b2:	f7ff f9cf 	bl	8008b54 <quorem>
 80097b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80097ba:	f805 8b01 	strb.w	r8, [r5], #1
 80097be:	9a02      	ldr	r2, [sp, #8]
 80097c0:	eba5 030b 	sub.w	r3, r5, fp
 80097c4:	429a      	cmp	r2, r3
 80097c6:	ddb0      	ble.n	800972a <_dtoa_r+0xaba>
 80097c8:	2300      	movs	r3, #0
 80097ca:	220a      	movs	r2, #10
 80097cc:	9904      	ldr	r1, [sp, #16]
 80097ce:	4620      	mov	r0, r4
 80097d0:	f000 fd88 	bl	800a2e4 <__multadd>
 80097d4:	9004      	str	r0, [sp, #16]
 80097d6:	e7ea      	b.n	80097ae <_dtoa_r+0xb3e>
 80097d8:	0800b06c 	.word	0x0800b06c
 80097dc:	0800b0e8 	.word	0x0800b0e8

080097e0 <__sflush_r>:
 80097e0:	898a      	ldrh	r2, [r1, #12]
 80097e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097e6:	4605      	mov	r5, r0
 80097e8:	0710      	lsls	r0, r2, #28
 80097ea:	460c      	mov	r4, r1
 80097ec:	d458      	bmi.n	80098a0 <__sflush_r+0xc0>
 80097ee:	684b      	ldr	r3, [r1, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dc05      	bgt.n	8009800 <__sflush_r+0x20>
 80097f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	dc02      	bgt.n	8009800 <__sflush_r+0x20>
 80097fa:	2000      	movs	r0, #0
 80097fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009802:	2e00      	cmp	r6, #0
 8009804:	d0f9      	beq.n	80097fa <__sflush_r+0x1a>
 8009806:	2300      	movs	r3, #0
 8009808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800980c:	682f      	ldr	r7, [r5, #0]
 800980e:	6a21      	ldr	r1, [r4, #32]
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	d032      	beq.n	800987a <__sflush_r+0x9a>
 8009814:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	075a      	lsls	r2, r3, #29
 800981a:	d505      	bpl.n	8009828 <__sflush_r+0x48>
 800981c:	6863      	ldr	r3, [r4, #4]
 800981e:	1ac0      	subs	r0, r0, r3
 8009820:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009822:	b10b      	cbz	r3, 8009828 <__sflush_r+0x48>
 8009824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009826:	1ac0      	subs	r0, r0, r3
 8009828:	2300      	movs	r3, #0
 800982a:	4602      	mov	r2, r0
 800982c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800982e:	6a21      	ldr	r1, [r4, #32]
 8009830:	4628      	mov	r0, r5
 8009832:	47b0      	blx	r6
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	d106      	bne.n	8009848 <__sflush_r+0x68>
 800983a:	6829      	ldr	r1, [r5, #0]
 800983c:	291d      	cmp	r1, #29
 800983e:	d848      	bhi.n	80098d2 <__sflush_r+0xf2>
 8009840:	4a29      	ldr	r2, [pc, #164]	; (80098e8 <__sflush_r+0x108>)
 8009842:	40ca      	lsrs	r2, r1
 8009844:	07d6      	lsls	r6, r2, #31
 8009846:	d544      	bpl.n	80098d2 <__sflush_r+0xf2>
 8009848:	2200      	movs	r2, #0
 800984a:	6062      	str	r2, [r4, #4]
 800984c:	04d9      	lsls	r1, r3, #19
 800984e:	6922      	ldr	r2, [r4, #16]
 8009850:	6022      	str	r2, [r4, #0]
 8009852:	d504      	bpl.n	800985e <__sflush_r+0x7e>
 8009854:	1c42      	adds	r2, r0, #1
 8009856:	d101      	bne.n	800985c <__sflush_r+0x7c>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b903      	cbnz	r3, 800985e <__sflush_r+0x7e>
 800985c:	6560      	str	r0, [r4, #84]	; 0x54
 800985e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009860:	602f      	str	r7, [r5, #0]
 8009862:	2900      	cmp	r1, #0
 8009864:	d0c9      	beq.n	80097fa <__sflush_r+0x1a>
 8009866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986a:	4299      	cmp	r1, r3
 800986c:	d002      	beq.n	8009874 <__sflush_r+0x94>
 800986e:	4628      	mov	r0, r5
 8009870:	f7fd fa82 	bl	8006d78 <_free_r>
 8009874:	2000      	movs	r0, #0
 8009876:	6360      	str	r0, [r4, #52]	; 0x34
 8009878:	e7c0      	b.n	80097fc <__sflush_r+0x1c>
 800987a:	2301      	movs	r3, #1
 800987c:	4628      	mov	r0, r5
 800987e:	47b0      	blx	r6
 8009880:	1c41      	adds	r1, r0, #1
 8009882:	d1c8      	bne.n	8009816 <__sflush_r+0x36>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d0c5      	beq.n	8009816 <__sflush_r+0x36>
 800988a:	2b1d      	cmp	r3, #29
 800988c:	d001      	beq.n	8009892 <__sflush_r+0xb2>
 800988e:	2b16      	cmp	r3, #22
 8009890:	d101      	bne.n	8009896 <__sflush_r+0xb6>
 8009892:	602f      	str	r7, [r5, #0]
 8009894:	e7b1      	b.n	80097fa <__sflush_r+0x1a>
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	e7ad      	b.n	80097fc <__sflush_r+0x1c>
 80098a0:	690f      	ldr	r7, [r1, #16]
 80098a2:	2f00      	cmp	r7, #0
 80098a4:	d0a9      	beq.n	80097fa <__sflush_r+0x1a>
 80098a6:	0793      	lsls	r3, r2, #30
 80098a8:	680e      	ldr	r6, [r1, #0]
 80098aa:	bf08      	it	eq
 80098ac:	694b      	ldreq	r3, [r1, #20]
 80098ae:	600f      	str	r7, [r1, #0]
 80098b0:	bf18      	it	ne
 80098b2:	2300      	movne	r3, #0
 80098b4:	eba6 0807 	sub.w	r8, r6, r7
 80098b8:	608b      	str	r3, [r1, #8]
 80098ba:	f1b8 0f00 	cmp.w	r8, #0
 80098be:	dd9c      	ble.n	80097fa <__sflush_r+0x1a>
 80098c0:	4643      	mov	r3, r8
 80098c2:	463a      	mov	r2, r7
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b0      	blx	r6
 80098cc:	2800      	cmp	r0, #0
 80098ce:	dc06      	bgt.n	80098de <__sflush_r+0xfe>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d6:	81a3      	strh	r3, [r4, #12]
 80098d8:	f04f 30ff 	mov.w	r0, #4294967295
 80098dc:	e78e      	b.n	80097fc <__sflush_r+0x1c>
 80098de:	4407      	add	r7, r0
 80098e0:	eba8 0800 	sub.w	r8, r8, r0
 80098e4:	e7e9      	b.n	80098ba <__sflush_r+0xda>
 80098e6:	bf00      	nop
 80098e8:	20400001 	.word	0x20400001

080098ec <_fflush_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	690b      	ldr	r3, [r1, #16]
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	b1db      	cbz	r3, 800992e <_fflush_r+0x42>
 80098f6:	b118      	cbz	r0, 8009900 <_fflush_r+0x14>
 80098f8:	6983      	ldr	r3, [r0, #24]
 80098fa:	b90b      	cbnz	r3, 8009900 <_fflush_r+0x14>
 80098fc:	f000 f860 	bl	80099c0 <__sinit>
 8009900:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <_fflush_r+0x48>)
 8009902:	429c      	cmp	r4, r3
 8009904:	d109      	bne.n	800991a <_fflush_r+0x2e>
 8009906:	686c      	ldr	r4, [r5, #4]
 8009908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800990c:	b17b      	cbz	r3, 800992e <_fflush_r+0x42>
 800990e:	4621      	mov	r1, r4
 8009910:	4628      	mov	r0, r5
 8009912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009916:	f7ff bf63 	b.w	80097e0 <__sflush_r>
 800991a:	4b07      	ldr	r3, [pc, #28]	; (8009938 <_fflush_r+0x4c>)
 800991c:	429c      	cmp	r4, r3
 800991e:	d101      	bne.n	8009924 <_fflush_r+0x38>
 8009920:	68ac      	ldr	r4, [r5, #8]
 8009922:	e7f1      	b.n	8009908 <_fflush_r+0x1c>
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <_fflush_r+0x50>)
 8009926:	429c      	cmp	r4, r3
 8009928:	bf08      	it	eq
 800992a:	68ec      	ldreq	r4, [r5, #12]
 800992c:	e7ec      	b.n	8009908 <_fflush_r+0x1c>
 800992e:	2000      	movs	r0, #0
 8009930:	bd38      	pop	{r3, r4, r5, pc}
 8009932:	bf00      	nop
 8009934:	0800b118 	.word	0x0800b118
 8009938:	0800b138 	.word	0x0800b138
 800993c:	0800b0f8 	.word	0x0800b0f8

08009940 <std>:
 8009940:	2300      	movs	r3, #0
 8009942:	b510      	push	{r4, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	e9c0 3300 	strd	r3, r3, [r0]
 800994a:	6083      	str	r3, [r0, #8]
 800994c:	8181      	strh	r1, [r0, #12]
 800994e:	6643      	str	r3, [r0, #100]	; 0x64
 8009950:	81c2      	strh	r2, [r0, #14]
 8009952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009956:	6183      	str	r3, [r0, #24]
 8009958:	4619      	mov	r1, r3
 800995a:	2208      	movs	r2, #8
 800995c:	305c      	adds	r0, #92	; 0x5c
 800995e:	f7fd fa03 	bl	8006d68 <memset>
 8009962:	4b05      	ldr	r3, [pc, #20]	; (8009978 <std+0x38>)
 8009964:	6263      	str	r3, [r4, #36]	; 0x24
 8009966:	4b05      	ldr	r3, [pc, #20]	; (800997c <std+0x3c>)
 8009968:	62a3      	str	r3, [r4, #40]	; 0x28
 800996a:	4b05      	ldr	r3, [pc, #20]	; (8009980 <std+0x40>)
 800996c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800996e:	4b05      	ldr	r3, [pc, #20]	; (8009984 <std+0x44>)
 8009970:	6224      	str	r4, [r4, #32]
 8009972:	6323      	str	r3, [r4, #48]	; 0x30
 8009974:	bd10      	pop	{r4, pc}
 8009976:	bf00      	nop
 8009978:	0800ad0d 	.word	0x0800ad0d
 800997c:	0800ad2f 	.word	0x0800ad2f
 8009980:	0800ad67 	.word	0x0800ad67
 8009984:	0800ad8b 	.word	0x0800ad8b

08009988 <_cleanup_r>:
 8009988:	4901      	ldr	r1, [pc, #4]	; (8009990 <_cleanup_r+0x8>)
 800998a:	f000 b885 	b.w	8009a98 <_fwalk_reent>
 800998e:	bf00      	nop
 8009990:	080098ed 	.word	0x080098ed

08009994 <__sfmoreglue>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	1e4a      	subs	r2, r1, #1
 8009998:	2568      	movs	r5, #104	; 0x68
 800999a:	4355      	muls	r5, r2
 800999c:	460e      	mov	r6, r1
 800999e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099a2:	f7fd fa37 	bl	8006e14 <_malloc_r>
 80099a6:	4604      	mov	r4, r0
 80099a8:	b140      	cbz	r0, 80099bc <__sfmoreglue+0x28>
 80099aa:	2100      	movs	r1, #0
 80099ac:	e9c0 1600 	strd	r1, r6, [r0]
 80099b0:	300c      	adds	r0, #12
 80099b2:	60a0      	str	r0, [r4, #8]
 80099b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099b8:	f7fd f9d6 	bl	8006d68 <memset>
 80099bc:	4620      	mov	r0, r4
 80099be:	bd70      	pop	{r4, r5, r6, pc}

080099c0 <__sinit>:
 80099c0:	6983      	ldr	r3, [r0, #24]
 80099c2:	b510      	push	{r4, lr}
 80099c4:	4604      	mov	r4, r0
 80099c6:	bb33      	cbnz	r3, 8009a16 <__sinit+0x56>
 80099c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80099cc:	6503      	str	r3, [r0, #80]	; 0x50
 80099ce:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <__sinit+0x58>)
 80099d0:	4a12      	ldr	r2, [pc, #72]	; (8009a1c <__sinit+0x5c>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6282      	str	r2, [r0, #40]	; 0x28
 80099d6:	4298      	cmp	r0, r3
 80099d8:	bf04      	itt	eq
 80099da:	2301      	moveq	r3, #1
 80099dc:	6183      	streq	r3, [r0, #24]
 80099de:	f000 f81f 	bl	8009a20 <__sfp>
 80099e2:	6060      	str	r0, [r4, #4]
 80099e4:	4620      	mov	r0, r4
 80099e6:	f000 f81b 	bl	8009a20 <__sfp>
 80099ea:	60a0      	str	r0, [r4, #8]
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 f817 	bl	8009a20 <__sfp>
 80099f2:	2200      	movs	r2, #0
 80099f4:	60e0      	str	r0, [r4, #12]
 80099f6:	2104      	movs	r1, #4
 80099f8:	6860      	ldr	r0, [r4, #4]
 80099fa:	f7ff ffa1 	bl	8009940 <std>
 80099fe:	2201      	movs	r2, #1
 8009a00:	2109      	movs	r1, #9
 8009a02:	68a0      	ldr	r0, [r4, #8]
 8009a04:	f7ff ff9c 	bl	8009940 <std>
 8009a08:	2202      	movs	r2, #2
 8009a0a:	2112      	movs	r1, #18
 8009a0c:	68e0      	ldr	r0, [r4, #12]
 8009a0e:	f7ff ff97 	bl	8009940 <std>
 8009a12:	2301      	movs	r3, #1
 8009a14:	61a3      	str	r3, [r4, #24]
 8009a16:	bd10      	pop	{r4, pc}
 8009a18:	0800b058 	.word	0x0800b058
 8009a1c:	08009989 	.word	0x08009989

08009a20 <__sfp>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <__sfp+0x70>)
 8009a24:	681e      	ldr	r6, [r3, #0]
 8009a26:	69b3      	ldr	r3, [r6, #24]
 8009a28:	4607      	mov	r7, r0
 8009a2a:	b913      	cbnz	r3, 8009a32 <__sfp+0x12>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	f7ff ffc7 	bl	80099c0 <__sinit>
 8009a32:	3648      	adds	r6, #72	; 0x48
 8009a34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	d503      	bpl.n	8009a44 <__sfp+0x24>
 8009a3c:	6833      	ldr	r3, [r6, #0]
 8009a3e:	b133      	cbz	r3, 8009a4e <__sfp+0x2e>
 8009a40:	6836      	ldr	r6, [r6, #0]
 8009a42:	e7f7      	b.n	8009a34 <__sfp+0x14>
 8009a44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009a48:	b16d      	cbz	r5, 8009a66 <__sfp+0x46>
 8009a4a:	3468      	adds	r4, #104	; 0x68
 8009a4c:	e7f4      	b.n	8009a38 <__sfp+0x18>
 8009a4e:	2104      	movs	r1, #4
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ff9f 	bl	8009994 <__sfmoreglue>
 8009a56:	6030      	str	r0, [r6, #0]
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d1f1      	bne.n	8009a40 <__sfp+0x20>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	603b      	str	r3, [r7, #0]
 8009a60:	4604      	mov	r4, r0
 8009a62:	4620      	mov	r0, r4
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <__sfp+0x74>)
 8009a68:	6665      	str	r5, [r4, #100]	; 0x64
 8009a6a:	e9c4 5500 	strd	r5, r5, [r4]
 8009a6e:	60a5      	str	r5, [r4, #8]
 8009a70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009a74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009a78:	2208      	movs	r2, #8
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a80:	f7fd f972 	bl	8006d68 <memset>
 8009a84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a8c:	e7e9      	b.n	8009a62 <__sfp+0x42>
 8009a8e:	bf00      	nop
 8009a90:	0800b058 	.word	0x0800b058
 8009a94:	ffff0001 	.word	0xffff0001

08009a98 <_fwalk_reent>:
 8009a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009aa4:	2600      	movs	r6, #0
 8009aa6:	b914      	cbnz	r4, 8009aae <_fwalk_reent+0x16>
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009ab2:	3f01      	subs	r7, #1
 8009ab4:	d501      	bpl.n	8009aba <_fwalk_reent+0x22>
 8009ab6:	6824      	ldr	r4, [r4, #0]
 8009ab8:	e7f5      	b.n	8009aa6 <_fwalk_reent+0xe>
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d907      	bls.n	8009ad0 <_fwalk_reent+0x38>
 8009ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	d003      	beq.n	8009ad0 <_fwalk_reent+0x38>
 8009ac8:	4629      	mov	r1, r5
 8009aca:	4640      	mov	r0, r8
 8009acc:	47c8      	blx	r9
 8009ace:	4306      	orrs	r6, r0
 8009ad0:	3568      	adds	r5, #104	; 0x68
 8009ad2:	e7ee      	b.n	8009ab2 <_fwalk_reent+0x1a>

08009ad4 <rshift>:
 8009ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad6:	6906      	ldr	r6, [r0, #16]
 8009ad8:	114b      	asrs	r3, r1, #5
 8009ada:	429e      	cmp	r6, r3
 8009adc:	f100 0414 	add.w	r4, r0, #20
 8009ae0:	dd30      	ble.n	8009b44 <rshift+0x70>
 8009ae2:	f011 011f 	ands.w	r1, r1, #31
 8009ae6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009aea:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009aee:	d108      	bne.n	8009b02 <rshift+0x2e>
 8009af0:	4621      	mov	r1, r4
 8009af2:	42b2      	cmp	r2, r6
 8009af4:	460b      	mov	r3, r1
 8009af6:	d211      	bcs.n	8009b1c <rshift+0x48>
 8009af8:	f852 3b04 	ldr.w	r3, [r2], #4
 8009afc:	f841 3b04 	str.w	r3, [r1], #4
 8009b00:	e7f7      	b.n	8009af2 <rshift+0x1e>
 8009b02:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009b06:	f1c1 0c20 	rsb	ip, r1, #32
 8009b0a:	40cd      	lsrs	r5, r1
 8009b0c:	3204      	adds	r2, #4
 8009b0e:	4623      	mov	r3, r4
 8009b10:	42b2      	cmp	r2, r6
 8009b12:	4617      	mov	r7, r2
 8009b14:	d30c      	bcc.n	8009b30 <rshift+0x5c>
 8009b16:	601d      	str	r5, [r3, #0]
 8009b18:	b105      	cbz	r5, 8009b1c <rshift+0x48>
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	1b1a      	subs	r2, r3, r4
 8009b1e:	42a3      	cmp	r3, r4
 8009b20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009b24:	bf08      	it	eq
 8009b26:	2300      	moveq	r3, #0
 8009b28:	6102      	str	r2, [r0, #16]
 8009b2a:	bf08      	it	eq
 8009b2c:	6143      	streq	r3, [r0, #20]
 8009b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b30:	683f      	ldr	r7, [r7, #0]
 8009b32:	fa07 f70c 	lsl.w	r7, r7, ip
 8009b36:	433d      	orrs	r5, r7
 8009b38:	f843 5b04 	str.w	r5, [r3], #4
 8009b3c:	f852 5b04 	ldr.w	r5, [r2], #4
 8009b40:	40cd      	lsrs	r5, r1
 8009b42:	e7e5      	b.n	8009b10 <rshift+0x3c>
 8009b44:	4623      	mov	r3, r4
 8009b46:	e7e9      	b.n	8009b1c <rshift+0x48>

08009b48 <__hexdig_fun>:
 8009b48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009b4c:	2b09      	cmp	r3, #9
 8009b4e:	d802      	bhi.n	8009b56 <__hexdig_fun+0xe>
 8009b50:	3820      	subs	r0, #32
 8009b52:	b2c0      	uxtb	r0, r0
 8009b54:	4770      	bx	lr
 8009b56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009b5a:	2b05      	cmp	r3, #5
 8009b5c:	d801      	bhi.n	8009b62 <__hexdig_fun+0x1a>
 8009b5e:	3847      	subs	r0, #71	; 0x47
 8009b60:	e7f7      	b.n	8009b52 <__hexdig_fun+0xa>
 8009b62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d801      	bhi.n	8009b6e <__hexdig_fun+0x26>
 8009b6a:	3827      	subs	r0, #39	; 0x27
 8009b6c:	e7f1      	b.n	8009b52 <__hexdig_fun+0xa>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	4770      	bx	lr

08009b72 <__gethex>:
 8009b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b76:	b08b      	sub	sp, #44	; 0x2c
 8009b78:	468a      	mov	sl, r1
 8009b7a:	9002      	str	r0, [sp, #8]
 8009b7c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b7e:	9306      	str	r3, [sp, #24]
 8009b80:	4690      	mov	r8, r2
 8009b82:	f000 fad0 	bl	800a126 <__localeconv_l>
 8009b86:	6803      	ldr	r3, [r0, #0]
 8009b88:	9303      	str	r3, [sp, #12]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f6 fb28 	bl	80001e0 <strlen>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	9001      	str	r0, [sp, #4]
 8009b94:	4403      	add	r3, r0
 8009b96:	f04f 0b00 	mov.w	fp, #0
 8009b9a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	f8da 3000 	ldr.w	r3, [sl]
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	461f      	mov	r7, r3
 8009ba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009bac:	2830      	cmp	r0, #48	; 0x30
 8009bae:	d06c      	beq.n	8009c8a <__gethex+0x118>
 8009bb0:	f7ff ffca 	bl	8009b48 <__hexdig_fun>
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d16a      	bne.n	8009c90 <__gethex+0x11e>
 8009bba:	9a01      	ldr	r2, [sp, #4]
 8009bbc:	9903      	ldr	r1, [sp, #12]
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f001 f8e7 	bl	800ad92 <strncmp>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d166      	bne.n	8009c96 <__gethex+0x124>
 8009bc8:	9b01      	ldr	r3, [sp, #4]
 8009bca:	5cf8      	ldrb	r0, [r7, r3]
 8009bcc:	18fe      	adds	r6, r7, r3
 8009bce:	f7ff ffbb 	bl	8009b48 <__hexdig_fun>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d062      	beq.n	8009c9c <__gethex+0x12a>
 8009bd6:	4633      	mov	r3, r6
 8009bd8:	7818      	ldrb	r0, [r3, #0]
 8009bda:	2830      	cmp	r0, #48	; 0x30
 8009bdc:	461f      	mov	r7, r3
 8009bde:	f103 0301 	add.w	r3, r3, #1
 8009be2:	d0f9      	beq.n	8009bd8 <__gethex+0x66>
 8009be4:	f7ff ffb0 	bl	8009b48 <__hexdig_fun>
 8009be8:	fab0 f580 	clz	r5, r0
 8009bec:	096d      	lsrs	r5, r5, #5
 8009bee:	4634      	mov	r4, r6
 8009bf0:	f04f 0b01 	mov.w	fp, #1
 8009bf4:	463a      	mov	r2, r7
 8009bf6:	4616      	mov	r6, r2
 8009bf8:	3201      	adds	r2, #1
 8009bfa:	7830      	ldrb	r0, [r6, #0]
 8009bfc:	f7ff ffa4 	bl	8009b48 <__hexdig_fun>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d1f8      	bne.n	8009bf6 <__gethex+0x84>
 8009c04:	9a01      	ldr	r2, [sp, #4]
 8009c06:	9903      	ldr	r1, [sp, #12]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f001 f8c2 	bl	800ad92 <strncmp>
 8009c0e:	b950      	cbnz	r0, 8009c26 <__gethex+0xb4>
 8009c10:	b954      	cbnz	r4, 8009c28 <__gethex+0xb6>
 8009c12:	9b01      	ldr	r3, [sp, #4]
 8009c14:	18f4      	adds	r4, r6, r3
 8009c16:	4622      	mov	r2, r4
 8009c18:	4616      	mov	r6, r2
 8009c1a:	3201      	adds	r2, #1
 8009c1c:	7830      	ldrb	r0, [r6, #0]
 8009c1e:	f7ff ff93 	bl	8009b48 <__hexdig_fun>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	d1f8      	bne.n	8009c18 <__gethex+0xa6>
 8009c26:	b10c      	cbz	r4, 8009c2c <__gethex+0xba>
 8009c28:	1ba4      	subs	r4, r4, r6
 8009c2a:	00a4      	lsls	r4, r4, #2
 8009c2c:	7833      	ldrb	r3, [r6, #0]
 8009c2e:	2b50      	cmp	r3, #80	; 0x50
 8009c30:	d001      	beq.n	8009c36 <__gethex+0xc4>
 8009c32:	2b70      	cmp	r3, #112	; 0x70
 8009c34:	d140      	bne.n	8009cb8 <__gethex+0x146>
 8009c36:	7873      	ldrb	r3, [r6, #1]
 8009c38:	2b2b      	cmp	r3, #43	; 0x2b
 8009c3a:	d031      	beq.n	8009ca0 <__gethex+0x12e>
 8009c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8009c3e:	d033      	beq.n	8009ca8 <__gethex+0x136>
 8009c40:	1c71      	adds	r1, r6, #1
 8009c42:	f04f 0900 	mov.w	r9, #0
 8009c46:	7808      	ldrb	r0, [r1, #0]
 8009c48:	f7ff ff7e 	bl	8009b48 <__hexdig_fun>
 8009c4c:	1e43      	subs	r3, r0, #1
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b18      	cmp	r3, #24
 8009c52:	d831      	bhi.n	8009cb8 <__gethex+0x146>
 8009c54:	f1a0 0210 	sub.w	r2, r0, #16
 8009c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009c5c:	f7ff ff74 	bl	8009b48 <__hexdig_fun>
 8009c60:	1e43      	subs	r3, r0, #1
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	2b18      	cmp	r3, #24
 8009c66:	d922      	bls.n	8009cae <__gethex+0x13c>
 8009c68:	f1b9 0f00 	cmp.w	r9, #0
 8009c6c:	d000      	beq.n	8009c70 <__gethex+0xfe>
 8009c6e:	4252      	negs	r2, r2
 8009c70:	4414      	add	r4, r2
 8009c72:	f8ca 1000 	str.w	r1, [sl]
 8009c76:	b30d      	cbz	r5, 8009cbc <__gethex+0x14a>
 8009c78:	f1bb 0f00 	cmp.w	fp, #0
 8009c7c:	bf0c      	ite	eq
 8009c7e:	2706      	moveq	r7, #6
 8009c80:	2700      	movne	r7, #0
 8009c82:	4638      	mov	r0, r7
 8009c84:	b00b      	add	sp, #44	; 0x2c
 8009c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8a:	f10b 0b01 	add.w	fp, fp, #1
 8009c8e:	e78a      	b.n	8009ba6 <__gethex+0x34>
 8009c90:	2500      	movs	r5, #0
 8009c92:	462c      	mov	r4, r5
 8009c94:	e7ae      	b.n	8009bf4 <__gethex+0x82>
 8009c96:	463e      	mov	r6, r7
 8009c98:	2501      	movs	r5, #1
 8009c9a:	e7c7      	b.n	8009c2c <__gethex+0xba>
 8009c9c:	4604      	mov	r4, r0
 8009c9e:	e7fb      	b.n	8009c98 <__gethex+0x126>
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	1cb1      	adds	r1, r6, #2
 8009ca6:	e7ce      	b.n	8009c46 <__gethex+0xd4>
 8009ca8:	f04f 0901 	mov.w	r9, #1
 8009cac:	e7fa      	b.n	8009ca4 <__gethex+0x132>
 8009cae:	230a      	movs	r3, #10
 8009cb0:	fb03 0202 	mla	r2, r3, r2, r0
 8009cb4:	3a10      	subs	r2, #16
 8009cb6:	e7cf      	b.n	8009c58 <__gethex+0xe6>
 8009cb8:	4631      	mov	r1, r6
 8009cba:	e7da      	b.n	8009c72 <__gethex+0x100>
 8009cbc:	1bf3      	subs	r3, r6, r7
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	2b07      	cmp	r3, #7
 8009cc4:	dc49      	bgt.n	8009d5a <__gethex+0x1e8>
 8009cc6:	9802      	ldr	r0, [sp, #8]
 8009cc8:	f000 fac1 	bl	800a24e <_Balloc>
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	f100 0914 	add.w	r9, r0, #20
 8009cd2:	f04f 0b00 	mov.w	fp, #0
 8009cd6:	f1c3 0301 	rsb	r3, r3, #1
 8009cda:	4605      	mov	r5, r0
 8009cdc:	f8cd 9010 	str.w	r9, [sp, #16]
 8009ce0:	46da      	mov	sl, fp
 8009ce2:	9308      	str	r3, [sp, #32]
 8009ce4:	42b7      	cmp	r7, r6
 8009ce6:	d33b      	bcc.n	8009d60 <__gethex+0x1ee>
 8009ce8:	9804      	ldr	r0, [sp, #16]
 8009cea:	f840 ab04 	str.w	sl, [r0], #4
 8009cee:	eba0 0009 	sub.w	r0, r0, r9
 8009cf2:	1080      	asrs	r0, r0, #2
 8009cf4:	6128      	str	r0, [r5, #16]
 8009cf6:	0147      	lsls	r7, r0, #5
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	f000 fb6c 	bl	800a3d6 <__hi0bits>
 8009cfe:	f8d8 6000 	ldr.w	r6, [r8]
 8009d02:	1a3f      	subs	r7, r7, r0
 8009d04:	42b7      	cmp	r7, r6
 8009d06:	dd64      	ble.n	8009dd2 <__gethex+0x260>
 8009d08:	1bbf      	subs	r7, r7, r6
 8009d0a:	4639      	mov	r1, r7
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f000 fe7b 	bl	800aa08 <__any_on>
 8009d12:	4682      	mov	sl, r0
 8009d14:	b178      	cbz	r0, 8009d36 <__gethex+0x1c4>
 8009d16:	1e7b      	subs	r3, r7, #1
 8009d18:	1159      	asrs	r1, r3, #5
 8009d1a:	f003 021f 	and.w	r2, r3, #31
 8009d1e:	f04f 0a01 	mov.w	sl, #1
 8009d22:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009d26:	fa0a f202 	lsl.w	r2, sl, r2
 8009d2a:	420a      	tst	r2, r1
 8009d2c:	d003      	beq.n	8009d36 <__gethex+0x1c4>
 8009d2e:	4553      	cmp	r3, sl
 8009d30:	dc46      	bgt.n	8009dc0 <__gethex+0x24e>
 8009d32:	f04f 0a02 	mov.w	sl, #2
 8009d36:	4639      	mov	r1, r7
 8009d38:	4628      	mov	r0, r5
 8009d3a:	f7ff fecb 	bl	8009ad4 <rshift>
 8009d3e:	443c      	add	r4, r7
 8009d40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	da52      	bge.n	8009dee <__gethex+0x27c>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	9802      	ldr	r0, [sp, #8]
 8009d4c:	f000 fab3 	bl	800a2b6 <_Bfree>
 8009d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d52:	2300      	movs	r3, #0
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	27a3      	movs	r7, #163	; 0xa3
 8009d58:	e793      	b.n	8009c82 <__gethex+0x110>
 8009d5a:	3101      	adds	r1, #1
 8009d5c:	105b      	asrs	r3, r3, #1
 8009d5e:	e7b0      	b.n	8009cc2 <__gethex+0x150>
 8009d60:	1e73      	subs	r3, r6, #1
 8009d62:	9305      	str	r3, [sp, #20]
 8009d64:	9a07      	ldr	r2, [sp, #28]
 8009d66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d018      	beq.n	8009da0 <__gethex+0x22e>
 8009d6e:	f1bb 0f20 	cmp.w	fp, #32
 8009d72:	d107      	bne.n	8009d84 <__gethex+0x212>
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	f8c3 a000 	str.w	sl, [r3]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	f04f 0a00 	mov.w	sl, #0
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	46d3      	mov	fp, sl
 8009d84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d88:	f7ff fede 	bl	8009b48 <__hexdig_fun>
 8009d8c:	f000 000f 	and.w	r0, r0, #15
 8009d90:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d94:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d98:	f10b 0b04 	add.w	fp, fp, #4
 8009d9c:	9b05      	ldr	r3, [sp, #20]
 8009d9e:	e00d      	b.n	8009dbc <__gethex+0x24a>
 8009da0:	9b05      	ldr	r3, [sp, #20]
 8009da2:	9a08      	ldr	r2, [sp, #32]
 8009da4:	4413      	add	r3, r2
 8009da6:	42bb      	cmp	r3, r7
 8009da8:	d3e1      	bcc.n	8009d6e <__gethex+0x1fc>
 8009daa:	4618      	mov	r0, r3
 8009dac:	9a01      	ldr	r2, [sp, #4]
 8009dae:	9903      	ldr	r1, [sp, #12]
 8009db0:	9309      	str	r3, [sp, #36]	; 0x24
 8009db2:	f000 ffee 	bl	800ad92 <strncmp>
 8009db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db8:	2800      	cmp	r0, #0
 8009dba:	d1d8      	bne.n	8009d6e <__gethex+0x1fc>
 8009dbc:	461e      	mov	r6, r3
 8009dbe:	e791      	b.n	8009ce4 <__gethex+0x172>
 8009dc0:	1eb9      	subs	r1, r7, #2
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	f000 fe20 	bl	800aa08 <__any_on>
 8009dc8:	2800      	cmp	r0, #0
 8009dca:	d0b2      	beq.n	8009d32 <__gethex+0x1c0>
 8009dcc:	f04f 0a03 	mov.w	sl, #3
 8009dd0:	e7b1      	b.n	8009d36 <__gethex+0x1c4>
 8009dd2:	da09      	bge.n	8009de8 <__gethex+0x276>
 8009dd4:	1bf7      	subs	r7, r6, r7
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	463a      	mov	r2, r7
 8009dda:	9802      	ldr	r0, [sp, #8]
 8009ddc:	f000 fc36 	bl	800a64c <__lshift>
 8009de0:	1be4      	subs	r4, r4, r7
 8009de2:	4605      	mov	r5, r0
 8009de4:	f100 0914 	add.w	r9, r0, #20
 8009de8:	f04f 0a00 	mov.w	sl, #0
 8009dec:	e7a8      	b.n	8009d40 <__gethex+0x1ce>
 8009dee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009df2:	42a0      	cmp	r0, r4
 8009df4:	dd6a      	ble.n	8009ecc <__gethex+0x35a>
 8009df6:	1b04      	subs	r4, r0, r4
 8009df8:	42a6      	cmp	r6, r4
 8009dfa:	dc2e      	bgt.n	8009e5a <__gethex+0x2e8>
 8009dfc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d022      	beq.n	8009e4a <__gethex+0x2d8>
 8009e04:	2b03      	cmp	r3, #3
 8009e06:	d024      	beq.n	8009e52 <__gethex+0x2e0>
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d115      	bne.n	8009e38 <__gethex+0x2c6>
 8009e0c:	42a6      	cmp	r6, r4
 8009e0e:	d113      	bne.n	8009e38 <__gethex+0x2c6>
 8009e10:	2e01      	cmp	r6, #1
 8009e12:	dc0b      	bgt.n	8009e2c <__gethex+0x2ba>
 8009e14:	9a06      	ldr	r2, [sp, #24]
 8009e16:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	612b      	str	r3, [r5, #16]
 8009e20:	f8c9 3000 	str.w	r3, [r9]
 8009e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e26:	2762      	movs	r7, #98	; 0x62
 8009e28:	601d      	str	r5, [r3, #0]
 8009e2a:	e72a      	b.n	8009c82 <__gethex+0x110>
 8009e2c:	1e71      	subs	r1, r6, #1
 8009e2e:	4628      	mov	r0, r5
 8009e30:	f000 fdea 	bl	800aa08 <__any_on>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d1ed      	bne.n	8009e14 <__gethex+0x2a2>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	9802      	ldr	r0, [sp, #8]
 8009e3c:	f000 fa3b 	bl	800a2b6 <_Bfree>
 8009e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e42:	2300      	movs	r3, #0
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	2750      	movs	r7, #80	; 0x50
 8009e48:	e71b      	b.n	8009c82 <__gethex+0x110>
 8009e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0e1      	beq.n	8009e14 <__gethex+0x2a2>
 8009e50:	e7f2      	b.n	8009e38 <__gethex+0x2c6>
 8009e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1dd      	bne.n	8009e14 <__gethex+0x2a2>
 8009e58:	e7ee      	b.n	8009e38 <__gethex+0x2c6>
 8009e5a:	1e67      	subs	r7, r4, #1
 8009e5c:	f1ba 0f00 	cmp.w	sl, #0
 8009e60:	d131      	bne.n	8009ec6 <__gethex+0x354>
 8009e62:	b127      	cbz	r7, 8009e6e <__gethex+0x2fc>
 8009e64:	4639      	mov	r1, r7
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 fdce 	bl	800aa08 <__any_on>
 8009e6c:	4682      	mov	sl, r0
 8009e6e:	117a      	asrs	r2, r7, #5
 8009e70:	2301      	movs	r3, #1
 8009e72:	f007 071f 	and.w	r7, r7, #31
 8009e76:	fa03 f707 	lsl.w	r7, r3, r7
 8009e7a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8009e7e:	4621      	mov	r1, r4
 8009e80:	421f      	tst	r7, r3
 8009e82:	4628      	mov	r0, r5
 8009e84:	bf18      	it	ne
 8009e86:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e8a:	1b36      	subs	r6, r6, r4
 8009e8c:	f7ff fe22 	bl	8009ad4 <rshift>
 8009e90:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009e94:	2702      	movs	r7, #2
 8009e96:	f1ba 0f00 	cmp.w	sl, #0
 8009e9a:	d048      	beq.n	8009f2e <__gethex+0x3bc>
 8009e9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d015      	beq.n	8009ed0 <__gethex+0x35e>
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d017      	beq.n	8009ed8 <__gethex+0x366>
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d109      	bne.n	8009ec0 <__gethex+0x34e>
 8009eac:	f01a 0f02 	tst.w	sl, #2
 8009eb0:	d006      	beq.n	8009ec0 <__gethex+0x34e>
 8009eb2:	f8d9 3000 	ldr.w	r3, [r9]
 8009eb6:	ea4a 0a03 	orr.w	sl, sl, r3
 8009eba:	f01a 0f01 	tst.w	sl, #1
 8009ebe:	d10e      	bne.n	8009ede <__gethex+0x36c>
 8009ec0:	f047 0710 	orr.w	r7, r7, #16
 8009ec4:	e033      	b.n	8009f2e <__gethex+0x3bc>
 8009ec6:	f04f 0a01 	mov.w	sl, #1
 8009eca:	e7d0      	b.n	8009e6e <__gethex+0x2fc>
 8009ecc:	2701      	movs	r7, #1
 8009ece:	e7e2      	b.n	8009e96 <__gethex+0x324>
 8009ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ed2:	f1c3 0301 	rsb	r3, r3, #1
 8009ed6:	9315      	str	r3, [sp, #84]	; 0x54
 8009ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d0f0      	beq.n	8009ec0 <__gethex+0x34e>
 8009ede:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009ee2:	f105 0314 	add.w	r3, r5, #20
 8009ee6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009eea:	eb03 010a 	add.w	r1, r3, sl
 8009eee:	f04f 0c00 	mov.w	ip, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009efc:	d01c      	beq.n	8009f38 <__gethex+0x3c6>
 8009efe:	3201      	adds	r2, #1
 8009f00:	6002      	str	r2, [r0, #0]
 8009f02:	2f02      	cmp	r7, #2
 8009f04:	f105 0314 	add.w	r3, r5, #20
 8009f08:	d138      	bne.n	8009f7c <__gethex+0x40a>
 8009f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8009f0e:	3a01      	subs	r2, #1
 8009f10:	42b2      	cmp	r2, r6
 8009f12:	d10a      	bne.n	8009f2a <__gethex+0x3b8>
 8009f14:	1171      	asrs	r1, r6, #5
 8009f16:	2201      	movs	r2, #1
 8009f18:	f006 061f 	and.w	r6, r6, #31
 8009f1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f20:	fa02 f606 	lsl.w	r6, r2, r6
 8009f24:	421e      	tst	r6, r3
 8009f26:	bf18      	it	ne
 8009f28:	4617      	movne	r7, r2
 8009f2a:	f047 0720 	orr.w	r7, r7, #32
 8009f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009f30:	601d      	str	r5, [r3, #0]
 8009f32:	9b06      	ldr	r3, [sp, #24]
 8009f34:	601c      	str	r4, [r3, #0]
 8009f36:	e6a4      	b.n	8009c82 <__gethex+0x110>
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	f843 cc04 	str.w	ip, [r3, #-4]
 8009f3e:	d8d8      	bhi.n	8009ef2 <__gethex+0x380>
 8009f40:	68ab      	ldr	r3, [r5, #8]
 8009f42:	4599      	cmp	r9, r3
 8009f44:	db12      	blt.n	8009f6c <__gethex+0x3fa>
 8009f46:	6869      	ldr	r1, [r5, #4]
 8009f48:	9802      	ldr	r0, [sp, #8]
 8009f4a:	3101      	adds	r1, #1
 8009f4c:	f000 f97f 	bl	800a24e <_Balloc>
 8009f50:	692a      	ldr	r2, [r5, #16]
 8009f52:	3202      	adds	r2, #2
 8009f54:	f105 010c 	add.w	r1, r5, #12
 8009f58:	4683      	mov	fp, r0
 8009f5a:	0092      	lsls	r2, r2, #2
 8009f5c:	300c      	adds	r0, #12
 8009f5e:	f000 f969 	bl	800a234 <memcpy>
 8009f62:	4629      	mov	r1, r5
 8009f64:	9802      	ldr	r0, [sp, #8]
 8009f66:	f000 f9a6 	bl	800a2b6 <_Bfree>
 8009f6a:	465d      	mov	r5, fp
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	1c5a      	adds	r2, r3, #1
 8009f70:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009f74:	612a      	str	r2, [r5, #16]
 8009f76:	2201      	movs	r2, #1
 8009f78:	615a      	str	r2, [r3, #20]
 8009f7a:	e7c2      	b.n	8009f02 <__gethex+0x390>
 8009f7c:	692a      	ldr	r2, [r5, #16]
 8009f7e:	454a      	cmp	r2, r9
 8009f80:	dd0b      	ble.n	8009f9a <__gethex+0x428>
 8009f82:	2101      	movs	r1, #1
 8009f84:	4628      	mov	r0, r5
 8009f86:	f7ff fda5 	bl	8009ad4 <rshift>
 8009f8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f8e:	3401      	adds	r4, #1
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	f6ff aed9 	blt.w	8009d48 <__gethex+0x1d6>
 8009f96:	2701      	movs	r7, #1
 8009f98:	e7c7      	b.n	8009f2a <__gethex+0x3b8>
 8009f9a:	f016 061f 	ands.w	r6, r6, #31
 8009f9e:	d0fa      	beq.n	8009f96 <__gethex+0x424>
 8009fa0:	449a      	add	sl, r3
 8009fa2:	f1c6 0620 	rsb	r6, r6, #32
 8009fa6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009faa:	f000 fa14 	bl	800a3d6 <__hi0bits>
 8009fae:	42b0      	cmp	r0, r6
 8009fb0:	dbe7      	blt.n	8009f82 <__gethex+0x410>
 8009fb2:	e7f0      	b.n	8009f96 <__gethex+0x424>

08009fb4 <L_shift>:
 8009fb4:	f1c2 0208 	rsb	r2, r2, #8
 8009fb8:	0092      	lsls	r2, r2, #2
 8009fba:	b570      	push	{r4, r5, r6, lr}
 8009fbc:	f1c2 0620 	rsb	r6, r2, #32
 8009fc0:	6843      	ldr	r3, [r0, #4]
 8009fc2:	6804      	ldr	r4, [r0, #0]
 8009fc4:	fa03 f506 	lsl.w	r5, r3, r6
 8009fc8:	432c      	orrs	r4, r5
 8009fca:	40d3      	lsrs	r3, r2
 8009fcc:	6004      	str	r4, [r0, #0]
 8009fce:	f840 3f04 	str.w	r3, [r0, #4]!
 8009fd2:	4288      	cmp	r0, r1
 8009fd4:	d3f4      	bcc.n	8009fc0 <L_shift+0xc>
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}

08009fd8 <__match>:
 8009fd8:	b530      	push	{r4, r5, lr}
 8009fda:	6803      	ldr	r3, [r0, #0]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe2:	b914      	cbnz	r4, 8009fea <__match+0x12>
 8009fe4:	6003      	str	r3, [r0, #0]
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	bd30      	pop	{r4, r5, pc}
 8009fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009ff2:	2d19      	cmp	r5, #25
 8009ff4:	bf98      	it	ls
 8009ff6:	3220      	addls	r2, #32
 8009ff8:	42a2      	cmp	r2, r4
 8009ffa:	d0f0      	beq.n	8009fde <__match+0x6>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e7f3      	b.n	8009fe8 <__match+0x10>

0800a000 <__hexnan>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	680b      	ldr	r3, [r1, #0]
 800a006:	6801      	ldr	r1, [r0, #0]
 800a008:	115f      	asrs	r7, r3, #5
 800a00a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a00e:	f013 031f 	ands.w	r3, r3, #31
 800a012:	b087      	sub	sp, #28
 800a014:	bf18      	it	ne
 800a016:	3704      	addne	r7, #4
 800a018:	2500      	movs	r5, #0
 800a01a:	1f3e      	subs	r6, r7, #4
 800a01c:	4682      	mov	sl, r0
 800a01e:	4690      	mov	r8, r2
 800a020:	9301      	str	r3, [sp, #4]
 800a022:	f847 5c04 	str.w	r5, [r7, #-4]
 800a026:	46b1      	mov	r9, r6
 800a028:	4634      	mov	r4, r6
 800a02a:	9502      	str	r5, [sp, #8]
 800a02c:	46ab      	mov	fp, r5
 800a02e:	784a      	ldrb	r2, [r1, #1]
 800a030:	1c4b      	adds	r3, r1, #1
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	b342      	cbz	r2, 800a088 <__hexnan+0x88>
 800a036:	4610      	mov	r0, r2
 800a038:	9105      	str	r1, [sp, #20]
 800a03a:	9204      	str	r2, [sp, #16]
 800a03c:	f7ff fd84 	bl	8009b48 <__hexdig_fun>
 800a040:	2800      	cmp	r0, #0
 800a042:	d143      	bne.n	800a0cc <__hexnan+0xcc>
 800a044:	9a04      	ldr	r2, [sp, #16]
 800a046:	9905      	ldr	r1, [sp, #20]
 800a048:	2a20      	cmp	r2, #32
 800a04a:	d818      	bhi.n	800a07e <__hexnan+0x7e>
 800a04c:	9b02      	ldr	r3, [sp, #8]
 800a04e:	459b      	cmp	fp, r3
 800a050:	dd13      	ble.n	800a07a <__hexnan+0x7a>
 800a052:	454c      	cmp	r4, r9
 800a054:	d206      	bcs.n	800a064 <__hexnan+0x64>
 800a056:	2d07      	cmp	r5, #7
 800a058:	dc04      	bgt.n	800a064 <__hexnan+0x64>
 800a05a:	462a      	mov	r2, r5
 800a05c:	4649      	mov	r1, r9
 800a05e:	4620      	mov	r0, r4
 800a060:	f7ff ffa8 	bl	8009fb4 <L_shift>
 800a064:	4544      	cmp	r4, r8
 800a066:	d944      	bls.n	800a0f2 <__hexnan+0xf2>
 800a068:	2300      	movs	r3, #0
 800a06a:	f1a4 0904 	sub.w	r9, r4, #4
 800a06e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a072:	f8cd b008 	str.w	fp, [sp, #8]
 800a076:	464c      	mov	r4, r9
 800a078:	461d      	mov	r5, r3
 800a07a:	9903      	ldr	r1, [sp, #12]
 800a07c:	e7d7      	b.n	800a02e <__hexnan+0x2e>
 800a07e:	2a29      	cmp	r2, #41	; 0x29
 800a080:	d14a      	bne.n	800a118 <__hexnan+0x118>
 800a082:	3102      	adds	r1, #2
 800a084:	f8ca 1000 	str.w	r1, [sl]
 800a088:	f1bb 0f00 	cmp.w	fp, #0
 800a08c:	d044      	beq.n	800a118 <__hexnan+0x118>
 800a08e:	454c      	cmp	r4, r9
 800a090:	d206      	bcs.n	800a0a0 <__hexnan+0xa0>
 800a092:	2d07      	cmp	r5, #7
 800a094:	dc04      	bgt.n	800a0a0 <__hexnan+0xa0>
 800a096:	462a      	mov	r2, r5
 800a098:	4649      	mov	r1, r9
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff ff8a 	bl	8009fb4 <L_shift>
 800a0a0:	4544      	cmp	r4, r8
 800a0a2:	d928      	bls.n	800a0f6 <__hexnan+0xf6>
 800a0a4:	4643      	mov	r3, r8
 800a0a6:	f854 2b04 	ldr.w	r2, [r4], #4
 800a0aa:	f843 2b04 	str.w	r2, [r3], #4
 800a0ae:	42a6      	cmp	r6, r4
 800a0b0:	d2f9      	bcs.n	800a0a6 <__hexnan+0xa6>
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f843 2b04 	str.w	r2, [r3], #4
 800a0b8:	429e      	cmp	r6, r3
 800a0ba:	d2fb      	bcs.n	800a0b4 <__hexnan+0xb4>
 800a0bc:	6833      	ldr	r3, [r6, #0]
 800a0be:	b91b      	cbnz	r3, 800a0c8 <__hexnan+0xc8>
 800a0c0:	4546      	cmp	r6, r8
 800a0c2:	d127      	bne.n	800a114 <__hexnan+0x114>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	6033      	str	r3, [r6, #0]
 800a0c8:	2005      	movs	r0, #5
 800a0ca:	e026      	b.n	800a11a <__hexnan+0x11a>
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	2d08      	cmp	r5, #8
 800a0d0:	f10b 0b01 	add.w	fp, fp, #1
 800a0d4:	dd06      	ble.n	800a0e4 <__hexnan+0xe4>
 800a0d6:	4544      	cmp	r4, r8
 800a0d8:	d9cf      	bls.n	800a07a <__hexnan+0x7a>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0e0:	2501      	movs	r5, #1
 800a0e2:	3c04      	subs	r4, #4
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	f000 000f 	and.w	r0, r0, #15
 800a0ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a0ee:	6020      	str	r0, [r4, #0]
 800a0f0:	e7c3      	b.n	800a07a <__hexnan+0x7a>
 800a0f2:	2508      	movs	r5, #8
 800a0f4:	e7c1      	b.n	800a07a <__hexnan+0x7a>
 800a0f6:	9b01      	ldr	r3, [sp, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0df      	beq.n	800a0bc <__hexnan+0xbc>
 800a0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a100:	f1c3 0320 	rsb	r3, r3, #32
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
 800a108:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a10c:	401a      	ands	r2, r3
 800a10e:	f847 2c04 	str.w	r2, [r7, #-4]
 800a112:	e7d3      	b.n	800a0bc <__hexnan+0xbc>
 800a114:	3e04      	subs	r6, #4
 800a116:	e7d1      	b.n	800a0bc <__hexnan+0xbc>
 800a118:	2004      	movs	r0, #4
 800a11a:	b007      	add	sp, #28
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a120 <__locale_ctype_ptr_l>:
 800a120:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a124:	4770      	bx	lr

0800a126 <__localeconv_l>:
 800a126:	30f0      	adds	r0, #240	; 0xf0
 800a128:	4770      	bx	lr
	...

0800a12c <_localeconv_r>:
 800a12c:	4b04      	ldr	r3, [pc, #16]	; (800a140 <_localeconv_r+0x14>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6a18      	ldr	r0, [r3, #32]
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <_localeconv_r+0x18>)
 800a134:	2800      	cmp	r0, #0
 800a136:	bf08      	it	eq
 800a138:	4618      	moveq	r0, r3
 800a13a:	30f0      	adds	r0, #240	; 0xf0
 800a13c:	4770      	bx	lr
 800a13e:	bf00      	nop
 800a140:	2000000c 	.word	0x2000000c
 800a144:	20000070 	.word	0x20000070

0800a148 <__swhatbuf_r>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	460e      	mov	r6, r1
 800a14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a150:	2900      	cmp	r1, #0
 800a152:	b096      	sub	sp, #88	; 0x58
 800a154:	4614      	mov	r4, r2
 800a156:	461d      	mov	r5, r3
 800a158:	da07      	bge.n	800a16a <__swhatbuf_r+0x22>
 800a15a:	2300      	movs	r3, #0
 800a15c:	602b      	str	r3, [r5, #0]
 800a15e:	89b3      	ldrh	r3, [r6, #12]
 800a160:	061a      	lsls	r2, r3, #24
 800a162:	d410      	bmi.n	800a186 <__swhatbuf_r+0x3e>
 800a164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a168:	e00e      	b.n	800a188 <__swhatbuf_r+0x40>
 800a16a:	466a      	mov	r2, sp
 800a16c:	f000 fe52 	bl	800ae14 <_fstat_r>
 800a170:	2800      	cmp	r0, #0
 800a172:	dbf2      	blt.n	800a15a <__swhatbuf_r+0x12>
 800a174:	9a01      	ldr	r2, [sp, #4]
 800a176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a17a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a17e:	425a      	negs	r2, r3
 800a180:	415a      	adcs	r2, r3
 800a182:	602a      	str	r2, [r5, #0]
 800a184:	e7ee      	b.n	800a164 <__swhatbuf_r+0x1c>
 800a186:	2340      	movs	r3, #64	; 0x40
 800a188:	2000      	movs	r0, #0
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	b016      	add	sp, #88	; 0x58
 800a18e:	bd70      	pop	{r4, r5, r6, pc}

0800a190 <__smakebuf_r>:
 800a190:	898b      	ldrh	r3, [r1, #12]
 800a192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a194:	079d      	lsls	r5, r3, #30
 800a196:	4606      	mov	r6, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	d507      	bpl.n	800a1ac <__smakebuf_r+0x1c>
 800a19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	6163      	str	r3, [r4, #20]
 800a1a8:	b002      	add	sp, #8
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	ab01      	add	r3, sp, #4
 800a1ae:	466a      	mov	r2, sp
 800a1b0:	f7ff ffca 	bl	800a148 <__swhatbuf_r>
 800a1b4:	9900      	ldr	r1, [sp, #0]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7fc fe2b 	bl	8006e14 <_malloc_r>
 800a1be:	b948      	cbnz	r0, 800a1d4 <__smakebuf_r+0x44>
 800a1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c4:	059a      	lsls	r2, r3, #22
 800a1c6:	d4ef      	bmi.n	800a1a8 <__smakebuf_r+0x18>
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	f043 0302 	orr.w	r3, r3, #2
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	e7e3      	b.n	800a19c <__smakebuf_r+0xc>
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <__smakebuf_r+0x7c>)
 800a1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	9b00      	ldr	r3, [sp, #0]
 800a1e4:	6163      	str	r3, [r4, #20]
 800a1e6:	9b01      	ldr	r3, [sp, #4]
 800a1e8:	6120      	str	r0, [r4, #16]
 800a1ea:	b15b      	cbz	r3, 800a204 <__smakebuf_r+0x74>
 800a1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 fe21 	bl	800ae38 <_isatty_r>
 800a1f6:	b128      	cbz	r0, 800a204 <__smakebuf_r+0x74>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	431d      	orrs	r5, r3
 800a208:	81a5      	strh	r5, [r4, #12]
 800a20a:	e7cd      	b.n	800a1a8 <__smakebuf_r+0x18>
 800a20c:	08009989 	.word	0x08009989

0800a210 <__ascii_mbtowc>:
 800a210:	b082      	sub	sp, #8
 800a212:	b901      	cbnz	r1, 800a216 <__ascii_mbtowc+0x6>
 800a214:	a901      	add	r1, sp, #4
 800a216:	b142      	cbz	r2, 800a22a <__ascii_mbtowc+0x1a>
 800a218:	b14b      	cbz	r3, 800a22e <__ascii_mbtowc+0x1e>
 800a21a:	7813      	ldrb	r3, [r2, #0]
 800a21c:	600b      	str	r3, [r1, #0]
 800a21e:	7812      	ldrb	r2, [r2, #0]
 800a220:	1c10      	adds	r0, r2, #0
 800a222:	bf18      	it	ne
 800a224:	2001      	movne	r0, #1
 800a226:	b002      	add	sp, #8
 800a228:	4770      	bx	lr
 800a22a:	4610      	mov	r0, r2
 800a22c:	e7fb      	b.n	800a226 <__ascii_mbtowc+0x16>
 800a22e:	f06f 0001 	mvn.w	r0, #1
 800a232:	e7f8      	b.n	800a226 <__ascii_mbtowc+0x16>

0800a234 <memcpy>:
 800a234:	b510      	push	{r4, lr}
 800a236:	1e43      	subs	r3, r0, #1
 800a238:	440a      	add	r2, r1
 800a23a:	4291      	cmp	r1, r2
 800a23c:	d100      	bne.n	800a240 <memcpy+0xc>
 800a23e:	bd10      	pop	{r4, pc}
 800a240:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a244:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a248:	e7f7      	b.n	800a23a <memcpy+0x6>

0800a24a <__malloc_lock>:
 800a24a:	4770      	bx	lr

0800a24c <__malloc_unlock>:
 800a24c:	4770      	bx	lr

0800a24e <_Balloc>:
 800a24e:	b570      	push	{r4, r5, r6, lr}
 800a250:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a252:	4604      	mov	r4, r0
 800a254:	460e      	mov	r6, r1
 800a256:	b93d      	cbnz	r5, 800a268 <_Balloc+0x1a>
 800a258:	2010      	movs	r0, #16
 800a25a:	f7fc fd7d 	bl	8006d58 <malloc>
 800a25e:	6260      	str	r0, [r4, #36]	; 0x24
 800a260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a264:	6005      	str	r5, [r0, #0]
 800a266:	60c5      	str	r5, [r0, #12]
 800a268:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a26a:	68eb      	ldr	r3, [r5, #12]
 800a26c:	b183      	cbz	r3, 800a290 <_Balloc+0x42>
 800a26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a276:	b9b8      	cbnz	r0, 800a2a8 <_Balloc+0x5a>
 800a278:	2101      	movs	r1, #1
 800a27a:	fa01 f506 	lsl.w	r5, r1, r6
 800a27e:	1d6a      	adds	r2, r5, #5
 800a280:	0092      	lsls	r2, r2, #2
 800a282:	4620      	mov	r0, r4
 800a284:	f000 fbe1 	bl	800aa4a <_calloc_r>
 800a288:	b160      	cbz	r0, 800a2a4 <_Balloc+0x56>
 800a28a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a28e:	e00e      	b.n	800a2ae <_Balloc+0x60>
 800a290:	2221      	movs	r2, #33	; 0x21
 800a292:	2104      	movs	r1, #4
 800a294:	4620      	mov	r0, r4
 800a296:	f000 fbd8 	bl	800aa4a <_calloc_r>
 800a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29c:	60e8      	str	r0, [r5, #12]
 800a29e:	68db      	ldr	r3, [r3, #12]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e4      	bne.n	800a26e <_Balloc+0x20>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	bd70      	pop	{r4, r5, r6, pc}
 800a2a8:	6802      	ldr	r2, [r0, #0]
 800a2aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a2b4:	e7f7      	b.n	800a2a6 <_Balloc+0x58>

0800a2b6 <_Bfree>:
 800a2b6:	b570      	push	{r4, r5, r6, lr}
 800a2b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a2ba:	4606      	mov	r6, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	b93c      	cbnz	r4, 800a2d0 <_Bfree+0x1a>
 800a2c0:	2010      	movs	r0, #16
 800a2c2:	f7fc fd49 	bl	8006d58 <malloc>
 800a2c6:	6270      	str	r0, [r6, #36]	; 0x24
 800a2c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2cc:	6004      	str	r4, [r0, #0]
 800a2ce:	60c4      	str	r4, [r0, #12]
 800a2d0:	b13d      	cbz	r5, 800a2e2 <_Bfree+0x2c>
 800a2d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2d4:	686a      	ldr	r2, [r5, #4]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2dc:	6029      	str	r1, [r5, #0]
 800a2de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a2e2:	bd70      	pop	{r4, r5, r6, pc}

0800a2e4 <__multadd>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	690d      	ldr	r5, [r1, #16]
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f101 0c14 	add.w	ip, r1, #20
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f8dc 0000 	ldr.w	r0, [ip]
 800a2fa:	b281      	uxth	r1, r0
 800a2fc:	fb02 7101 	mla	r1, r2, r1, r7
 800a300:	0c0f      	lsrs	r7, r1, #16
 800a302:	0c00      	lsrs	r0, r0, #16
 800a304:	fb02 7000 	mla	r0, r2, r0, r7
 800a308:	b289      	uxth	r1, r1
 800a30a:	3301      	adds	r3, #1
 800a30c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a310:	429d      	cmp	r5, r3
 800a312:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a316:	f84c 1b04 	str.w	r1, [ip], #4
 800a31a:	dcec      	bgt.n	800a2f6 <__multadd+0x12>
 800a31c:	b1d7      	cbz	r7, 800a354 <__multadd+0x70>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	42ab      	cmp	r3, r5
 800a322:	dc12      	bgt.n	800a34a <__multadd+0x66>
 800a324:	6861      	ldr	r1, [r4, #4]
 800a326:	4630      	mov	r0, r6
 800a328:	3101      	adds	r1, #1
 800a32a:	f7ff ff90 	bl	800a24e <_Balloc>
 800a32e:	6922      	ldr	r2, [r4, #16]
 800a330:	3202      	adds	r2, #2
 800a332:	f104 010c 	add.w	r1, r4, #12
 800a336:	4680      	mov	r8, r0
 800a338:	0092      	lsls	r2, r2, #2
 800a33a:	300c      	adds	r0, #12
 800a33c:	f7ff ff7a 	bl	800a234 <memcpy>
 800a340:	4621      	mov	r1, r4
 800a342:	4630      	mov	r0, r6
 800a344:	f7ff ffb7 	bl	800a2b6 <_Bfree>
 800a348:	4644      	mov	r4, r8
 800a34a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a34e:	3501      	adds	r5, #1
 800a350:	615f      	str	r7, [r3, #20]
 800a352:	6125      	str	r5, [r4, #16]
 800a354:	4620      	mov	r0, r4
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a35a <__s2b>:
 800a35a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a35e:	460c      	mov	r4, r1
 800a360:	4615      	mov	r5, r2
 800a362:	461f      	mov	r7, r3
 800a364:	2209      	movs	r2, #9
 800a366:	3308      	adds	r3, #8
 800a368:	4606      	mov	r6, r0
 800a36a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a36e:	2100      	movs	r1, #0
 800a370:	2201      	movs	r2, #1
 800a372:	429a      	cmp	r2, r3
 800a374:	db20      	blt.n	800a3b8 <__s2b+0x5e>
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff ff69 	bl	800a24e <_Balloc>
 800a37c:	9b08      	ldr	r3, [sp, #32]
 800a37e:	6143      	str	r3, [r0, #20]
 800a380:	2d09      	cmp	r5, #9
 800a382:	f04f 0301 	mov.w	r3, #1
 800a386:	6103      	str	r3, [r0, #16]
 800a388:	dd19      	ble.n	800a3be <__s2b+0x64>
 800a38a:	f104 0809 	add.w	r8, r4, #9
 800a38e:	46c1      	mov	r9, r8
 800a390:	442c      	add	r4, r5
 800a392:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a396:	4601      	mov	r1, r0
 800a398:	3b30      	subs	r3, #48	; 0x30
 800a39a:	220a      	movs	r2, #10
 800a39c:	4630      	mov	r0, r6
 800a39e:	f7ff ffa1 	bl	800a2e4 <__multadd>
 800a3a2:	45a1      	cmp	r9, r4
 800a3a4:	d1f5      	bne.n	800a392 <__s2b+0x38>
 800a3a6:	eb08 0405 	add.w	r4, r8, r5
 800a3aa:	3c08      	subs	r4, #8
 800a3ac:	1b2d      	subs	r5, r5, r4
 800a3ae:	1963      	adds	r3, r4, r5
 800a3b0:	42bb      	cmp	r3, r7
 800a3b2:	db07      	blt.n	800a3c4 <__s2b+0x6a>
 800a3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b8:	0052      	lsls	r2, r2, #1
 800a3ba:	3101      	adds	r1, #1
 800a3bc:	e7d9      	b.n	800a372 <__s2b+0x18>
 800a3be:	340a      	adds	r4, #10
 800a3c0:	2509      	movs	r5, #9
 800a3c2:	e7f3      	b.n	800a3ac <__s2b+0x52>
 800a3c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	3b30      	subs	r3, #48	; 0x30
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ff88 	bl	800a2e4 <__multadd>
 800a3d4:	e7eb      	b.n	800a3ae <__s2b+0x54>

0800a3d6 <__hi0bits>:
 800a3d6:	0c02      	lsrs	r2, r0, #16
 800a3d8:	0412      	lsls	r2, r2, #16
 800a3da:	4603      	mov	r3, r0
 800a3dc:	b9b2      	cbnz	r2, 800a40c <__hi0bits+0x36>
 800a3de:	0403      	lsls	r3, r0, #16
 800a3e0:	2010      	movs	r0, #16
 800a3e2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a3e6:	bf04      	itt	eq
 800a3e8:	021b      	lsleq	r3, r3, #8
 800a3ea:	3008      	addeq	r0, #8
 800a3ec:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a3f0:	bf04      	itt	eq
 800a3f2:	011b      	lsleq	r3, r3, #4
 800a3f4:	3004      	addeq	r0, #4
 800a3f6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a3fa:	bf04      	itt	eq
 800a3fc:	009b      	lsleq	r3, r3, #2
 800a3fe:	3002      	addeq	r0, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	db06      	blt.n	800a412 <__hi0bits+0x3c>
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	d503      	bpl.n	800a410 <__hi0bits+0x3a>
 800a408:	3001      	adds	r0, #1
 800a40a:	4770      	bx	lr
 800a40c:	2000      	movs	r0, #0
 800a40e:	e7e8      	b.n	800a3e2 <__hi0bits+0xc>
 800a410:	2020      	movs	r0, #32
 800a412:	4770      	bx	lr

0800a414 <__lo0bits>:
 800a414:	6803      	ldr	r3, [r0, #0]
 800a416:	f013 0207 	ands.w	r2, r3, #7
 800a41a:	4601      	mov	r1, r0
 800a41c:	d00b      	beq.n	800a436 <__lo0bits+0x22>
 800a41e:	07da      	lsls	r2, r3, #31
 800a420:	d423      	bmi.n	800a46a <__lo0bits+0x56>
 800a422:	0798      	lsls	r0, r3, #30
 800a424:	bf49      	itett	mi
 800a426:	085b      	lsrmi	r3, r3, #1
 800a428:	089b      	lsrpl	r3, r3, #2
 800a42a:	2001      	movmi	r0, #1
 800a42c:	600b      	strmi	r3, [r1, #0]
 800a42e:	bf5c      	itt	pl
 800a430:	600b      	strpl	r3, [r1, #0]
 800a432:	2002      	movpl	r0, #2
 800a434:	4770      	bx	lr
 800a436:	b298      	uxth	r0, r3
 800a438:	b9a8      	cbnz	r0, 800a466 <__lo0bits+0x52>
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	2010      	movs	r0, #16
 800a43e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a442:	bf04      	itt	eq
 800a444:	0a1b      	lsreq	r3, r3, #8
 800a446:	3008      	addeq	r0, #8
 800a448:	071a      	lsls	r2, r3, #28
 800a44a:	bf04      	itt	eq
 800a44c:	091b      	lsreq	r3, r3, #4
 800a44e:	3004      	addeq	r0, #4
 800a450:	079a      	lsls	r2, r3, #30
 800a452:	bf04      	itt	eq
 800a454:	089b      	lsreq	r3, r3, #2
 800a456:	3002      	addeq	r0, #2
 800a458:	07da      	lsls	r2, r3, #31
 800a45a:	d402      	bmi.n	800a462 <__lo0bits+0x4e>
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	d006      	beq.n	800a46e <__lo0bits+0x5a>
 800a460:	3001      	adds	r0, #1
 800a462:	600b      	str	r3, [r1, #0]
 800a464:	4770      	bx	lr
 800a466:	4610      	mov	r0, r2
 800a468:	e7e9      	b.n	800a43e <__lo0bits+0x2a>
 800a46a:	2000      	movs	r0, #0
 800a46c:	4770      	bx	lr
 800a46e:	2020      	movs	r0, #32
 800a470:	4770      	bx	lr

0800a472 <__i2b>:
 800a472:	b510      	push	{r4, lr}
 800a474:	460c      	mov	r4, r1
 800a476:	2101      	movs	r1, #1
 800a478:	f7ff fee9 	bl	800a24e <_Balloc>
 800a47c:	2201      	movs	r2, #1
 800a47e:	6144      	str	r4, [r0, #20]
 800a480:	6102      	str	r2, [r0, #16]
 800a482:	bd10      	pop	{r4, pc}

0800a484 <__multiply>:
 800a484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	4614      	mov	r4, r2
 800a48a:	690a      	ldr	r2, [r1, #16]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	429a      	cmp	r2, r3
 800a490:	bfb8      	it	lt
 800a492:	460b      	movlt	r3, r1
 800a494:	4688      	mov	r8, r1
 800a496:	bfbc      	itt	lt
 800a498:	46a0      	movlt	r8, r4
 800a49a:	461c      	movlt	r4, r3
 800a49c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a4a0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a4ac:	eb07 0609 	add.w	r6, r7, r9
 800a4b0:	42b3      	cmp	r3, r6
 800a4b2:	bfb8      	it	lt
 800a4b4:	3101      	addlt	r1, #1
 800a4b6:	f7ff feca 	bl	800a24e <_Balloc>
 800a4ba:	f100 0514 	add.w	r5, r0, #20
 800a4be:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a4c2:	462b      	mov	r3, r5
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4573      	cmp	r3, lr
 800a4c8:	d316      	bcc.n	800a4f8 <__multiply+0x74>
 800a4ca:	f104 0214 	add.w	r2, r4, #20
 800a4ce:	f108 0114 	add.w	r1, r8, #20
 800a4d2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a4d6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	9201      	str	r2, [sp, #4]
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d80c      	bhi.n	800a4fe <__multiply+0x7a>
 800a4e4:	2e00      	cmp	r6, #0
 800a4e6:	dd03      	ble.n	800a4f0 <__multiply+0x6c>
 800a4e8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d05d      	beq.n	800a5ac <__multiply+0x128>
 800a4f0:	6106      	str	r6, [r0, #16]
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f8:	f843 2b04 	str.w	r2, [r3], #4
 800a4fc:	e7e3      	b.n	800a4c6 <__multiply+0x42>
 800a4fe:	f8b2 b000 	ldrh.w	fp, [r2]
 800a502:	f1bb 0f00 	cmp.w	fp, #0
 800a506:	d023      	beq.n	800a550 <__multiply+0xcc>
 800a508:	4689      	mov	r9, r1
 800a50a:	46ac      	mov	ip, r5
 800a50c:	f04f 0800 	mov.w	r8, #0
 800a510:	f859 4b04 	ldr.w	r4, [r9], #4
 800a514:	f8dc a000 	ldr.w	sl, [ip]
 800a518:	b2a3      	uxth	r3, r4
 800a51a:	fa1f fa8a 	uxth.w	sl, sl
 800a51e:	fb0b a303 	mla	r3, fp, r3, sl
 800a522:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a526:	f8dc 4000 	ldr.w	r4, [ip]
 800a52a:	4443      	add	r3, r8
 800a52c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a530:	fb0b 840a 	mla	r4, fp, sl, r8
 800a534:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a538:	46e2      	mov	sl, ip
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a540:	454f      	cmp	r7, r9
 800a542:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a546:	f84a 3b04 	str.w	r3, [sl], #4
 800a54a:	d82b      	bhi.n	800a5a4 <__multiply+0x120>
 800a54c:	f8cc 8004 	str.w	r8, [ip, #4]
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a556:	3204      	adds	r2, #4
 800a558:	f1ba 0f00 	cmp.w	sl, #0
 800a55c:	d020      	beq.n	800a5a0 <__multiply+0x11c>
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	4689      	mov	r9, r1
 800a562:	46a8      	mov	r8, r5
 800a564:	f04f 0b00 	mov.w	fp, #0
 800a568:	f8b9 c000 	ldrh.w	ip, [r9]
 800a56c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a570:	fb0a 440c 	mla	r4, sl, ip, r4
 800a574:	445c      	add	r4, fp
 800a576:	46c4      	mov	ip, r8
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a57e:	f84c 3b04 	str.w	r3, [ip], #4
 800a582:	f859 3b04 	ldr.w	r3, [r9], #4
 800a586:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a58a:	0c1b      	lsrs	r3, r3, #16
 800a58c:	fb0a b303 	mla	r3, sl, r3, fp
 800a590:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a594:	454f      	cmp	r7, r9
 800a596:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a59a:	d805      	bhi.n	800a5a8 <__multiply+0x124>
 800a59c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a5a0:	3504      	adds	r5, #4
 800a5a2:	e79b      	b.n	800a4dc <__multiply+0x58>
 800a5a4:	46d4      	mov	ip, sl
 800a5a6:	e7b3      	b.n	800a510 <__multiply+0x8c>
 800a5a8:	46e0      	mov	r8, ip
 800a5aa:	e7dd      	b.n	800a568 <__multiply+0xe4>
 800a5ac:	3e01      	subs	r6, #1
 800a5ae:	e799      	b.n	800a4e4 <__multiply+0x60>

0800a5b0 <__pow5mult>:
 800a5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	f012 0203 	ands.w	r2, r2, #3
 800a5ba:	4606      	mov	r6, r0
 800a5bc:	460f      	mov	r7, r1
 800a5be:	d007      	beq.n	800a5d0 <__pow5mult+0x20>
 800a5c0:	3a01      	subs	r2, #1
 800a5c2:	4c21      	ldr	r4, [pc, #132]	; (800a648 <__pow5mult+0x98>)
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5ca:	f7ff fe8b 	bl	800a2e4 <__multadd>
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	10ad      	asrs	r5, r5, #2
 800a5d2:	d035      	beq.n	800a640 <__pow5mult+0x90>
 800a5d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a5d6:	b93c      	cbnz	r4, 800a5e8 <__pow5mult+0x38>
 800a5d8:	2010      	movs	r0, #16
 800a5da:	f7fc fbbd 	bl	8006d58 <malloc>
 800a5de:	6270      	str	r0, [r6, #36]	; 0x24
 800a5e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a5e4:	6004      	str	r4, [r0, #0]
 800a5e6:	60c4      	str	r4, [r0, #12]
 800a5e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a5ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a5f0:	b94c      	cbnz	r4, 800a606 <__pow5mult+0x56>
 800a5f2:	f240 2171 	movw	r1, #625	; 0x271
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff3b 	bl	800a472 <__i2b>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800a602:	4604      	mov	r4, r0
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	f04f 0800 	mov.w	r8, #0
 800a60a:	07eb      	lsls	r3, r5, #31
 800a60c:	d50a      	bpl.n	800a624 <__pow5mult+0x74>
 800a60e:	4639      	mov	r1, r7
 800a610:	4622      	mov	r2, r4
 800a612:	4630      	mov	r0, r6
 800a614:	f7ff ff36 	bl	800a484 <__multiply>
 800a618:	4639      	mov	r1, r7
 800a61a:	4681      	mov	r9, r0
 800a61c:	4630      	mov	r0, r6
 800a61e:	f7ff fe4a 	bl	800a2b6 <_Bfree>
 800a622:	464f      	mov	r7, r9
 800a624:	106d      	asrs	r5, r5, #1
 800a626:	d00b      	beq.n	800a640 <__pow5mult+0x90>
 800a628:	6820      	ldr	r0, [r4, #0]
 800a62a:	b938      	cbnz	r0, 800a63c <__pow5mult+0x8c>
 800a62c:	4622      	mov	r2, r4
 800a62e:	4621      	mov	r1, r4
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff ff27 	bl	800a484 <__multiply>
 800a636:	6020      	str	r0, [r4, #0]
 800a638:	f8c0 8000 	str.w	r8, [r0]
 800a63c:	4604      	mov	r4, r0
 800a63e:	e7e4      	b.n	800a60a <__pow5mult+0x5a>
 800a640:	4638      	mov	r0, r7
 800a642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a646:	bf00      	nop
 800a648:	0800b258 	.word	0x0800b258

0800a64c <__lshift>:
 800a64c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a650:	460c      	mov	r4, r1
 800a652:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a656:	6923      	ldr	r3, [r4, #16]
 800a658:	6849      	ldr	r1, [r1, #4]
 800a65a:	eb0a 0903 	add.w	r9, sl, r3
 800a65e:	68a3      	ldr	r3, [r4, #8]
 800a660:	4607      	mov	r7, r0
 800a662:	4616      	mov	r6, r2
 800a664:	f109 0501 	add.w	r5, r9, #1
 800a668:	42ab      	cmp	r3, r5
 800a66a:	db32      	blt.n	800a6d2 <__lshift+0x86>
 800a66c:	4638      	mov	r0, r7
 800a66e:	f7ff fdee 	bl	800a24e <_Balloc>
 800a672:	2300      	movs	r3, #0
 800a674:	4680      	mov	r8, r0
 800a676:	f100 0114 	add.w	r1, r0, #20
 800a67a:	461a      	mov	r2, r3
 800a67c:	4553      	cmp	r3, sl
 800a67e:	db2b      	blt.n	800a6d8 <__lshift+0x8c>
 800a680:	6920      	ldr	r0, [r4, #16]
 800a682:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a686:	f104 0314 	add.w	r3, r4, #20
 800a68a:	f016 021f 	ands.w	r2, r6, #31
 800a68e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a692:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a696:	d025      	beq.n	800a6e4 <__lshift+0x98>
 800a698:	f1c2 0e20 	rsb	lr, r2, #32
 800a69c:	2000      	movs	r0, #0
 800a69e:	681e      	ldr	r6, [r3, #0]
 800a6a0:	468a      	mov	sl, r1
 800a6a2:	4096      	lsls	r6, r2
 800a6a4:	4330      	orrs	r0, r6
 800a6a6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6aa:	f853 0b04 	ldr.w	r0, [r3], #4
 800a6ae:	459c      	cmp	ip, r3
 800a6b0:	fa20 f00e 	lsr.w	r0, r0, lr
 800a6b4:	d814      	bhi.n	800a6e0 <__lshift+0x94>
 800a6b6:	6048      	str	r0, [r1, #4]
 800a6b8:	b108      	cbz	r0, 800a6be <__lshift+0x72>
 800a6ba:	f109 0502 	add.w	r5, r9, #2
 800a6be:	3d01      	subs	r5, #1
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f8c8 5010 	str.w	r5, [r8, #16]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f7ff fdf5 	bl	800a2b6 <_Bfree>
 800a6cc:	4640      	mov	r0, r8
 800a6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d2:	3101      	adds	r1, #1
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	e7c7      	b.n	800a668 <__lshift+0x1c>
 800a6d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	e7cd      	b.n	800a67c <__lshift+0x30>
 800a6e0:	4651      	mov	r1, sl
 800a6e2:	e7dc      	b.n	800a69e <__lshift+0x52>
 800a6e4:	3904      	subs	r1, #4
 800a6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ea:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6ee:	459c      	cmp	ip, r3
 800a6f0:	d8f9      	bhi.n	800a6e6 <__lshift+0x9a>
 800a6f2:	e7e4      	b.n	800a6be <__lshift+0x72>

0800a6f4 <__mcmp>:
 800a6f4:	6903      	ldr	r3, [r0, #16]
 800a6f6:	690a      	ldr	r2, [r1, #16]
 800a6f8:	1a9b      	subs	r3, r3, r2
 800a6fa:	b530      	push	{r4, r5, lr}
 800a6fc:	d10c      	bne.n	800a718 <__mcmp+0x24>
 800a6fe:	0092      	lsls	r2, r2, #2
 800a700:	3014      	adds	r0, #20
 800a702:	3114      	adds	r1, #20
 800a704:	1884      	adds	r4, r0, r2
 800a706:	4411      	add	r1, r2
 800a708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a70c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a710:	4295      	cmp	r5, r2
 800a712:	d003      	beq.n	800a71c <__mcmp+0x28>
 800a714:	d305      	bcc.n	800a722 <__mcmp+0x2e>
 800a716:	2301      	movs	r3, #1
 800a718:	4618      	mov	r0, r3
 800a71a:	bd30      	pop	{r4, r5, pc}
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d3f3      	bcc.n	800a708 <__mcmp+0x14>
 800a720:	e7fa      	b.n	800a718 <__mcmp+0x24>
 800a722:	f04f 33ff 	mov.w	r3, #4294967295
 800a726:	e7f7      	b.n	800a718 <__mcmp+0x24>

0800a728 <__mdiff>:
 800a728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a72c:	460d      	mov	r5, r1
 800a72e:	4607      	mov	r7, r0
 800a730:	4611      	mov	r1, r2
 800a732:	4628      	mov	r0, r5
 800a734:	4614      	mov	r4, r2
 800a736:	f7ff ffdd 	bl	800a6f4 <__mcmp>
 800a73a:	1e06      	subs	r6, r0, #0
 800a73c:	d108      	bne.n	800a750 <__mdiff+0x28>
 800a73e:	4631      	mov	r1, r6
 800a740:	4638      	mov	r0, r7
 800a742:	f7ff fd84 	bl	800a24e <_Balloc>
 800a746:	2301      	movs	r3, #1
 800a748:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a750:	bfa4      	itt	ge
 800a752:	4623      	movge	r3, r4
 800a754:	462c      	movge	r4, r5
 800a756:	4638      	mov	r0, r7
 800a758:	6861      	ldr	r1, [r4, #4]
 800a75a:	bfa6      	itte	ge
 800a75c:	461d      	movge	r5, r3
 800a75e:	2600      	movge	r6, #0
 800a760:	2601      	movlt	r6, #1
 800a762:	f7ff fd74 	bl	800a24e <_Balloc>
 800a766:	692b      	ldr	r3, [r5, #16]
 800a768:	60c6      	str	r6, [r0, #12]
 800a76a:	6926      	ldr	r6, [r4, #16]
 800a76c:	f105 0914 	add.w	r9, r5, #20
 800a770:	f104 0214 	add.w	r2, r4, #20
 800a774:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a778:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a77c:	f100 0514 	add.w	r5, r0, #20
 800a780:	f04f 0e00 	mov.w	lr, #0
 800a784:	f852 ab04 	ldr.w	sl, [r2], #4
 800a788:	f859 4b04 	ldr.w	r4, [r9], #4
 800a78c:	fa1e f18a 	uxtah	r1, lr, sl
 800a790:	b2a3      	uxth	r3, r4
 800a792:	1ac9      	subs	r1, r1, r3
 800a794:	0c23      	lsrs	r3, r4, #16
 800a796:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a79a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a79e:	b289      	uxth	r1, r1
 800a7a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a7a4:	45c8      	cmp	r8, r9
 800a7a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a7aa:	4694      	mov	ip, r2
 800a7ac:	f845 3b04 	str.w	r3, [r5], #4
 800a7b0:	d8e8      	bhi.n	800a784 <__mdiff+0x5c>
 800a7b2:	45bc      	cmp	ip, r7
 800a7b4:	d304      	bcc.n	800a7c0 <__mdiff+0x98>
 800a7b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a7ba:	b183      	cbz	r3, 800a7de <__mdiff+0xb6>
 800a7bc:	6106      	str	r6, [r0, #16]
 800a7be:	e7c5      	b.n	800a74c <__mdiff+0x24>
 800a7c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a7c4:	fa1e f381 	uxtah	r3, lr, r1
 800a7c8:	141a      	asrs	r2, r3, #16
 800a7ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a7d8:	f845 3b04 	str.w	r3, [r5], #4
 800a7dc:	e7e9      	b.n	800a7b2 <__mdiff+0x8a>
 800a7de:	3e01      	subs	r6, #1
 800a7e0:	e7e9      	b.n	800a7b6 <__mdiff+0x8e>
	...

0800a7e4 <__ulp>:
 800a7e4:	4b12      	ldr	r3, [pc, #72]	; (800a830 <__ulp+0x4c>)
 800a7e6:	ee10 2a90 	vmov	r2, s1
 800a7ea:	401a      	ands	r2, r3
 800a7ec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dd04      	ble.n	800a7fe <__ulp+0x1a>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	ec41 0b10 	vmov	d0, r0, r1
 800a7fc:	4770      	bx	lr
 800a7fe:	425b      	negs	r3, r3
 800a800:	151b      	asrs	r3, r3, #20
 800a802:	2b13      	cmp	r3, #19
 800a804:	f04f 0000 	mov.w	r0, #0
 800a808:	f04f 0100 	mov.w	r1, #0
 800a80c:	dc04      	bgt.n	800a818 <__ulp+0x34>
 800a80e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a812:	fa42 f103 	asr.w	r1, r2, r3
 800a816:	e7ef      	b.n	800a7f8 <__ulp+0x14>
 800a818:	3b14      	subs	r3, #20
 800a81a:	2b1e      	cmp	r3, #30
 800a81c:	f04f 0201 	mov.w	r2, #1
 800a820:	bfda      	itte	le
 800a822:	f1c3 031f 	rsble	r3, r3, #31
 800a826:	fa02 f303 	lslle.w	r3, r2, r3
 800a82a:	4613      	movgt	r3, r2
 800a82c:	4618      	mov	r0, r3
 800a82e:	e7e3      	b.n	800a7f8 <__ulp+0x14>
 800a830:	7ff00000 	.word	0x7ff00000

0800a834 <__b2d>:
 800a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a836:	6905      	ldr	r5, [r0, #16]
 800a838:	f100 0714 	add.w	r7, r0, #20
 800a83c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a840:	1f2e      	subs	r6, r5, #4
 800a842:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a846:	4620      	mov	r0, r4
 800a848:	f7ff fdc5 	bl	800a3d6 <__hi0bits>
 800a84c:	f1c0 0320 	rsb	r3, r0, #32
 800a850:	280a      	cmp	r0, #10
 800a852:	600b      	str	r3, [r1, #0]
 800a854:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a8cc <__b2d+0x98>
 800a858:	dc14      	bgt.n	800a884 <__b2d+0x50>
 800a85a:	f1c0 0e0b 	rsb	lr, r0, #11
 800a85e:	fa24 f10e 	lsr.w	r1, r4, lr
 800a862:	42b7      	cmp	r7, r6
 800a864:	ea41 030c 	orr.w	r3, r1, ip
 800a868:	bf34      	ite	cc
 800a86a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a86e:	2100      	movcs	r1, #0
 800a870:	3015      	adds	r0, #21
 800a872:	fa04 f000 	lsl.w	r0, r4, r0
 800a876:	fa21 f10e 	lsr.w	r1, r1, lr
 800a87a:	ea40 0201 	orr.w	r2, r0, r1
 800a87e:	ec43 2b10 	vmov	d0, r2, r3
 800a882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a884:	42b7      	cmp	r7, r6
 800a886:	bf3a      	itte	cc
 800a888:	f1a5 0608 	subcc.w	r6, r5, #8
 800a88c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a890:	2100      	movcs	r1, #0
 800a892:	380b      	subs	r0, #11
 800a894:	d015      	beq.n	800a8c2 <__b2d+0x8e>
 800a896:	4084      	lsls	r4, r0
 800a898:	f1c0 0520 	rsb	r5, r0, #32
 800a89c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a8a0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a8a4:	42be      	cmp	r6, r7
 800a8a6:	fa21 fc05 	lsr.w	ip, r1, r5
 800a8aa:	ea44 030c 	orr.w	r3, r4, ip
 800a8ae:	bf8c      	ite	hi
 800a8b0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a8b4:	2400      	movls	r4, #0
 800a8b6:	fa01 f000 	lsl.w	r0, r1, r0
 800a8ba:	40ec      	lsrs	r4, r5
 800a8bc:	ea40 0204 	orr.w	r2, r0, r4
 800a8c0:	e7dd      	b.n	800a87e <__b2d+0x4a>
 800a8c2:	ea44 030c 	orr.w	r3, r4, ip
 800a8c6:	460a      	mov	r2, r1
 800a8c8:	e7d9      	b.n	800a87e <__b2d+0x4a>
 800a8ca:	bf00      	nop
 800a8cc:	3ff00000 	.word	0x3ff00000

0800a8d0 <__d2b>:
 800a8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	460e      	mov	r6, r1
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	ec59 8b10 	vmov	r8, r9, d0
 800a8dc:	4615      	mov	r5, r2
 800a8de:	f7ff fcb6 	bl	800a24e <_Balloc>
 800a8e2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8ec:	bb34      	cbnz	r4, 800a93c <__d2b+0x6c>
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a8f4:	d027      	beq.n	800a946 <__d2b+0x76>
 800a8f6:	a802      	add	r0, sp, #8
 800a8f8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a8fc:	f7ff fd8a 	bl	800a414 <__lo0bits>
 800a900:	9900      	ldr	r1, [sp, #0]
 800a902:	b1f0      	cbz	r0, 800a942 <__d2b+0x72>
 800a904:	9a01      	ldr	r2, [sp, #4]
 800a906:	f1c0 0320 	rsb	r3, r0, #32
 800a90a:	fa02 f303 	lsl.w	r3, r2, r3
 800a90e:	430b      	orrs	r3, r1
 800a910:	40c2      	lsrs	r2, r0
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	9201      	str	r2, [sp, #4]
 800a916:	9b01      	ldr	r3, [sp, #4]
 800a918:	61bb      	str	r3, [r7, #24]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	bf14      	ite	ne
 800a91e:	2102      	movne	r1, #2
 800a920:	2101      	moveq	r1, #1
 800a922:	6139      	str	r1, [r7, #16]
 800a924:	b1c4      	cbz	r4, 800a958 <__d2b+0x88>
 800a926:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a92a:	4404      	add	r4, r0
 800a92c:	6034      	str	r4, [r6, #0]
 800a92e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a932:	6028      	str	r0, [r5, #0]
 800a934:	4638      	mov	r0, r7
 800a936:	b003      	add	sp, #12
 800a938:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a940:	e7d5      	b.n	800a8ee <__d2b+0x1e>
 800a942:	6179      	str	r1, [r7, #20]
 800a944:	e7e7      	b.n	800a916 <__d2b+0x46>
 800a946:	a801      	add	r0, sp, #4
 800a948:	f7ff fd64 	bl	800a414 <__lo0bits>
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	2101      	movs	r1, #1
 800a952:	6139      	str	r1, [r7, #16]
 800a954:	3020      	adds	r0, #32
 800a956:	e7e5      	b.n	800a924 <__d2b+0x54>
 800a958:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a95c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a960:	6030      	str	r0, [r6, #0]
 800a962:	6918      	ldr	r0, [r3, #16]
 800a964:	f7ff fd37 	bl	800a3d6 <__hi0bits>
 800a968:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a96c:	e7e1      	b.n	800a932 <__d2b+0x62>

0800a96e <__ratio>:
 800a96e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a972:	4688      	mov	r8, r1
 800a974:	4669      	mov	r1, sp
 800a976:	4681      	mov	r9, r0
 800a978:	f7ff ff5c 	bl	800a834 <__b2d>
 800a97c:	a901      	add	r1, sp, #4
 800a97e:	4640      	mov	r0, r8
 800a980:	ec57 6b10 	vmov	r6, r7, d0
 800a984:	f7ff ff56 	bl	800a834 <__b2d>
 800a988:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a98c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a990:	eba3 0c02 	sub.w	ip, r3, r2
 800a994:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a998:	1a9b      	subs	r3, r3, r2
 800a99a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a99e:	ec5b ab10 	vmov	sl, fp, d0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	bfce      	itee	gt
 800a9a6:	463a      	movgt	r2, r7
 800a9a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9ac:	465a      	movle	r2, fp
 800a9ae:	4659      	mov	r1, fp
 800a9b0:	463d      	mov	r5, r7
 800a9b2:	bfd4      	ite	le
 800a9b4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a9b8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a9bc:	4630      	mov	r0, r6
 800a9be:	ee10 2a10 	vmov	r2, s0
 800a9c2:	460b      	mov	r3, r1
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	f7f5 ff49 	bl	800085c <__aeabi_ddiv>
 800a9ca:	ec41 0b10 	vmov	d0, r0, r1
 800a9ce:	b003      	add	sp, #12
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9d4 <__copybits>:
 800a9d4:	3901      	subs	r1, #1
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	1149      	asrs	r1, r1, #5
 800a9da:	6914      	ldr	r4, [r2, #16]
 800a9dc:	3101      	adds	r1, #1
 800a9de:	f102 0314 	add.w	r3, r2, #20
 800a9e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	d303      	bcc.n	800a9f8 <__copybits+0x24>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	428a      	cmp	r2, r1
 800a9f4:	d305      	bcc.n	800aa02 <__copybits+0x2e>
 800a9f6:	bd10      	pop	{r4, pc}
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	f840 2b04 	str.w	r2, [r0], #4
 800aa00:	e7f3      	b.n	800a9ea <__copybits+0x16>
 800aa02:	f842 3b04 	str.w	r3, [r2], #4
 800aa06:	e7f4      	b.n	800a9f2 <__copybits+0x1e>

0800aa08 <__any_on>:
 800aa08:	f100 0214 	add.w	r2, r0, #20
 800aa0c:	6900      	ldr	r0, [r0, #16]
 800aa0e:	114b      	asrs	r3, r1, #5
 800aa10:	4298      	cmp	r0, r3
 800aa12:	b510      	push	{r4, lr}
 800aa14:	db11      	blt.n	800aa3a <__any_on+0x32>
 800aa16:	dd0a      	ble.n	800aa2e <__any_on+0x26>
 800aa18:	f011 011f 	ands.w	r1, r1, #31
 800aa1c:	d007      	beq.n	800aa2e <__any_on+0x26>
 800aa1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa22:	fa24 f001 	lsr.w	r0, r4, r1
 800aa26:	fa00 f101 	lsl.w	r1, r0, r1
 800aa2a:	428c      	cmp	r4, r1
 800aa2c:	d10b      	bne.n	800aa46 <__any_on+0x3e>
 800aa2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d803      	bhi.n	800aa3e <__any_on+0x36>
 800aa36:	2000      	movs	r0, #0
 800aa38:	bd10      	pop	{r4, pc}
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	e7f7      	b.n	800aa2e <__any_on+0x26>
 800aa3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa42:	2900      	cmp	r1, #0
 800aa44:	d0f5      	beq.n	800aa32 <__any_on+0x2a>
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7f6      	b.n	800aa38 <__any_on+0x30>

0800aa4a <_calloc_r>:
 800aa4a:	b538      	push	{r3, r4, r5, lr}
 800aa4c:	fb02 f401 	mul.w	r4, r2, r1
 800aa50:	4621      	mov	r1, r4
 800aa52:	f7fc f9df 	bl	8006e14 <_malloc_r>
 800aa56:	4605      	mov	r5, r0
 800aa58:	b118      	cbz	r0, 800aa62 <_calloc_r+0x18>
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	f7fc f983 	bl	8006d68 <memset>
 800aa62:	4628      	mov	r0, r5
 800aa64:	bd38      	pop	{r3, r4, r5, pc}

0800aa66 <__ssputs_r>:
 800aa66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6a:	688e      	ldr	r6, [r1, #8]
 800aa6c:	429e      	cmp	r6, r3
 800aa6e:	4682      	mov	sl, r0
 800aa70:	460c      	mov	r4, r1
 800aa72:	4690      	mov	r8, r2
 800aa74:	4699      	mov	r9, r3
 800aa76:	d837      	bhi.n	800aae8 <__ssputs_r+0x82>
 800aa78:	898a      	ldrh	r2, [r1, #12]
 800aa7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa7e:	d031      	beq.n	800aae4 <__ssputs_r+0x7e>
 800aa80:	6825      	ldr	r5, [r4, #0]
 800aa82:	6909      	ldr	r1, [r1, #16]
 800aa84:	1a6f      	subs	r7, r5, r1
 800aa86:	6965      	ldr	r5, [r4, #20]
 800aa88:	2302      	movs	r3, #2
 800aa8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa8e:	fb95 f5f3 	sdiv	r5, r5, r3
 800aa92:	f109 0301 	add.w	r3, r9, #1
 800aa96:	443b      	add	r3, r7
 800aa98:	429d      	cmp	r5, r3
 800aa9a:	bf38      	it	cc
 800aa9c:	461d      	movcc	r5, r3
 800aa9e:	0553      	lsls	r3, r2, #21
 800aaa0:	d530      	bpl.n	800ab04 <__ssputs_r+0x9e>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	f7fc f9b6 	bl	8006e14 <_malloc_r>
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	b950      	cbnz	r0, 800aac2 <__ssputs_r+0x5c>
 800aaac:	230c      	movs	r3, #12
 800aaae:	f8ca 3000 	str.w	r3, [sl]
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab8:	81a3      	strh	r3, [r4, #12]
 800aaba:	f04f 30ff 	mov.w	r0, #4294967295
 800aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac2:	463a      	mov	r2, r7
 800aac4:	6921      	ldr	r1, [r4, #16]
 800aac6:	f7ff fbb5 	bl	800a234 <memcpy>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad4:	81a3      	strh	r3, [r4, #12]
 800aad6:	6126      	str	r6, [r4, #16]
 800aad8:	6165      	str	r5, [r4, #20]
 800aada:	443e      	add	r6, r7
 800aadc:	1bed      	subs	r5, r5, r7
 800aade:	6026      	str	r6, [r4, #0]
 800aae0:	60a5      	str	r5, [r4, #8]
 800aae2:	464e      	mov	r6, r9
 800aae4:	454e      	cmp	r6, r9
 800aae6:	d900      	bls.n	800aaea <__ssputs_r+0x84>
 800aae8:	464e      	mov	r6, r9
 800aaea:	4632      	mov	r2, r6
 800aaec:	4641      	mov	r1, r8
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	f000 f9c4 	bl	800ae7c <memmove>
 800aaf4:	68a3      	ldr	r3, [r4, #8]
 800aaf6:	1b9b      	subs	r3, r3, r6
 800aaf8:	60a3      	str	r3, [r4, #8]
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	441e      	add	r6, r3
 800aafe:	6026      	str	r6, [r4, #0]
 800ab00:	2000      	movs	r0, #0
 800ab02:	e7dc      	b.n	800aabe <__ssputs_r+0x58>
 800ab04:	462a      	mov	r2, r5
 800ab06:	f000 f9d2 	bl	800aeae <_realloc_r>
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1e2      	bne.n	800aad6 <__ssputs_r+0x70>
 800ab10:	6921      	ldr	r1, [r4, #16]
 800ab12:	4650      	mov	r0, sl
 800ab14:	f7fc f930 	bl	8006d78 <_free_r>
 800ab18:	e7c8      	b.n	800aaac <__ssputs_r+0x46>
	...

0800ab1c <_svfiprintf_r>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	461d      	mov	r5, r3
 800ab22:	898b      	ldrh	r3, [r1, #12]
 800ab24:	061f      	lsls	r7, r3, #24
 800ab26:	b09d      	sub	sp, #116	; 0x74
 800ab28:	4680      	mov	r8, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	4616      	mov	r6, r2
 800ab2e:	d50f      	bpl.n	800ab50 <_svfiprintf_r+0x34>
 800ab30:	690b      	ldr	r3, [r1, #16]
 800ab32:	b96b      	cbnz	r3, 800ab50 <_svfiprintf_r+0x34>
 800ab34:	2140      	movs	r1, #64	; 0x40
 800ab36:	f7fc f96d 	bl	8006e14 <_malloc_r>
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	6120      	str	r0, [r4, #16]
 800ab3e:	b928      	cbnz	r0, 800ab4c <_svfiprintf_r+0x30>
 800ab40:	230c      	movs	r3, #12
 800ab42:	f8c8 3000 	str.w	r3, [r8]
 800ab46:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4a:	e0c8      	b.n	800acde <_svfiprintf_r+0x1c2>
 800ab4c:	2340      	movs	r3, #64	; 0x40
 800ab4e:	6163      	str	r3, [r4, #20]
 800ab50:	2300      	movs	r3, #0
 800ab52:	9309      	str	r3, [sp, #36]	; 0x24
 800ab54:	2320      	movs	r3, #32
 800ab56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab5a:	2330      	movs	r3, #48	; 0x30
 800ab5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab60:	9503      	str	r5, [sp, #12]
 800ab62:	f04f 0b01 	mov.w	fp, #1
 800ab66:	4637      	mov	r7, r6
 800ab68:	463d      	mov	r5, r7
 800ab6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ab6e:	b10b      	cbz	r3, 800ab74 <_svfiprintf_r+0x58>
 800ab70:	2b25      	cmp	r3, #37	; 0x25
 800ab72:	d13e      	bne.n	800abf2 <_svfiprintf_r+0xd6>
 800ab74:	ebb7 0a06 	subs.w	sl, r7, r6
 800ab78:	d00b      	beq.n	800ab92 <_svfiprintf_r+0x76>
 800ab7a:	4653      	mov	r3, sl
 800ab7c:	4632      	mov	r2, r6
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4640      	mov	r0, r8
 800ab82:	f7ff ff70 	bl	800aa66 <__ssputs_r>
 800ab86:	3001      	adds	r0, #1
 800ab88:	f000 80a4 	beq.w	800acd4 <_svfiprintf_r+0x1b8>
 800ab8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab8e:	4453      	add	r3, sl
 800ab90:	9309      	str	r3, [sp, #36]	; 0x24
 800ab92:	783b      	ldrb	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 809d 	beq.w	800acd4 <_svfiprintf_r+0x1b8>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aba0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	9307      	str	r3, [sp, #28]
 800aba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abac:	931a      	str	r3, [sp, #104]	; 0x68
 800abae:	462f      	mov	r7, r5
 800abb0:	2205      	movs	r2, #5
 800abb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800abb6:	4850      	ldr	r0, [pc, #320]	; (800acf8 <_svfiprintf_r+0x1dc>)
 800abb8:	f7f5 fb1a 	bl	80001f0 <memchr>
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	b9d0      	cbnz	r0, 800abf6 <_svfiprintf_r+0xda>
 800abc0:	06d9      	lsls	r1, r3, #27
 800abc2:	bf44      	itt	mi
 800abc4:	2220      	movmi	r2, #32
 800abc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abca:	071a      	lsls	r2, r3, #28
 800abcc:	bf44      	itt	mi
 800abce:	222b      	movmi	r2, #43	; 0x2b
 800abd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800abd4:	782a      	ldrb	r2, [r5, #0]
 800abd6:	2a2a      	cmp	r2, #42	; 0x2a
 800abd8:	d015      	beq.n	800ac06 <_svfiprintf_r+0xea>
 800abda:	9a07      	ldr	r2, [sp, #28]
 800abdc:	462f      	mov	r7, r5
 800abde:	2000      	movs	r0, #0
 800abe0:	250a      	movs	r5, #10
 800abe2:	4639      	mov	r1, r7
 800abe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abe8:	3b30      	subs	r3, #48	; 0x30
 800abea:	2b09      	cmp	r3, #9
 800abec:	d94d      	bls.n	800ac8a <_svfiprintf_r+0x16e>
 800abee:	b1b8      	cbz	r0, 800ac20 <_svfiprintf_r+0x104>
 800abf0:	e00f      	b.n	800ac12 <_svfiprintf_r+0xf6>
 800abf2:	462f      	mov	r7, r5
 800abf4:	e7b8      	b.n	800ab68 <_svfiprintf_r+0x4c>
 800abf6:	4a40      	ldr	r2, [pc, #256]	; (800acf8 <_svfiprintf_r+0x1dc>)
 800abf8:	1a80      	subs	r0, r0, r2
 800abfa:	fa0b f000 	lsl.w	r0, fp, r0
 800abfe:	4318      	orrs	r0, r3
 800ac00:	9004      	str	r0, [sp, #16]
 800ac02:	463d      	mov	r5, r7
 800ac04:	e7d3      	b.n	800abae <_svfiprintf_r+0x92>
 800ac06:	9a03      	ldr	r2, [sp, #12]
 800ac08:	1d11      	adds	r1, r2, #4
 800ac0a:	6812      	ldr	r2, [r2, #0]
 800ac0c:	9103      	str	r1, [sp, #12]
 800ac0e:	2a00      	cmp	r2, #0
 800ac10:	db01      	blt.n	800ac16 <_svfiprintf_r+0xfa>
 800ac12:	9207      	str	r2, [sp, #28]
 800ac14:	e004      	b.n	800ac20 <_svfiprintf_r+0x104>
 800ac16:	4252      	negs	r2, r2
 800ac18:	f043 0302 	orr.w	r3, r3, #2
 800ac1c:	9207      	str	r2, [sp, #28]
 800ac1e:	9304      	str	r3, [sp, #16]
 800ac20:	783b      	ldrb	r3, [r7, #0]
 800ac22:	2b2e      	cmp	r3, #46	; 0x2e
 800ac24:	d10c      	bne.n	800ac40 <_svfiprintf_r+0x124>
 800ac26:	787b      	ldrb	r3, [r7, #1]
 800ac28:	2b2a      	cmp	r3, #42	; 0x2a
 800ac2a:	d133      	bne.n	800ac94 <_svfiprintf_r+0x178>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	9203      	str	r2, [sp, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb8      	it	lt
 800ac38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac3c:	3702      	adds	r7, #2
 800ac3e:	9305      	str	r3, [sp, #20]
 800ac40:	4d2e      	ldr	r5, [pc, #184]	; (800acfc <_svfiprintf_r+0x1e0>)
 800ac42:	7839      	ldrb	r1, [r7, #0]
 800ac44:	2203      	movs	r2, #3
 800ac46:	4628      	mov	r0, r5
 800ac48:	f7f5 fad2 	bl	80001f0 <memchr>
 800ac4c:	b138      	cbz	r0, 800ac5e <_svfiprintf_r+0x142>
 800ac4e:	2340      	movs	r3, #64	; 0x40
 800ac50:	1b40      	subs	r0, r0, r5
 800ac52:	fa03 f000 	lsl.w	r0, r3, r0
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	4303      	orrs	r3, r0
 800ac5a:	3701      	adds	r7, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	7839      	ldrb	r1, [r7, #0]
 800ac60:	4827      	ldr	r0, [pc, #156]	; (800ad00 <_svfiprintf_r+0x1e4>)
 800ac62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac66:	2206      	movs	r2, #6
 800ac68:	1c7e      	adds	r6, r7, #1
 800ac6a:	f7f5 fac1 	bl	80001f0 <memchr>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d038      	beq.n	800ace4 <_svfiprintf_r+0x1c8>
 800ac72:	4b24      	ldr	r3, [pc, #144]	; (800ad04 <_svfiprintf_r+0x1e8>)
 800ac74:	bb13      	cbnz	r3, 800acbc <_svfiprintf_r+0x1a0>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	f023 0307 	bic.w	r3, r3, #7
 800ac7e:	3308      	adds	r3, #8
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac84:	444b      	add	r3, r9
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	e76d      	b.n	800ab66 <_svfiprintf_r+0x4a>
 800ac8a:	fb05 3202 	mla	r2, r5, r2, r3
 800ac8e:	2001      	movs	r0, #1
 800ac90:	460f      	mov	r7, r1
 800ac92:	e7a6      	b.n	800abe2 <_svfiprintf_r+0xc6>
 800ac94:	2300      	movs	r3, #0
 800ac96:	3701      	adds	r7, #1
 800ac98:	9305      	str	r3, [sp, #20]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	250a      	movs	r5, #10
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca4:	3a30      	subs	r2, #48	; 0x30
 800aca6:	2a09      	cmp	r2, #9
 800aca8:	d903      	bls.n	800acb2 <_svfiprintf_r+0x196>
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0c8      	beq.n	800ac40 <_svfiprintf_r+0x124>
 800acae:	9105      	str	r1, [sp, #20]
 800acb0:	e7c6      	b.n	800ac40 <_svfiprintf_r+0x124>
 800acb2:	fb05 2101 	mla	r1, r5, r1, r2
 800acb6:	2301      	movs	r3, #1
 800acb8:	4607      	mov	r7, r0
 800acba:	e7f0      	b.n	800ac9e <_svfiprintf_r+0x182>
 800acbc:	ab03      	add	r3, sp, #12
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	4622      	mov	r2, r4
 800acc2:	4b11      	ldr	r3, [pc, #68]	; (800ad08 <_svfiprintf_r+0x1ec>)
 800acc4:	a904      	add	r1, sp, #16
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7fc f992 	bl	8006ff0 <_printf_float>
 800accc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800acd0:	4681      	mov	r9, r0
 800acd2:	d1d6      	bne.n	800ac82 <_svfiprintf_r+0x166>
 800acd4:	89a3      	ldrh	r3, [r4, #12]
 800acd6:	065b      	lsls	r3, r3, #25
 800acd8:	f53f af35 	bmi.w	800ab46 <_svfiprintf_r+0x2a>
 800acdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acde:	b01d      	add	sp, #116	; 0x74
 800ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace4:	ab03      	add	r3, sp, #12
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	4622      	mov	r2, r4
 800acea:	4b07      	ldr	r3, [pc, #28]	; (800ad08 <_svfiprintf_r+0x1ec>)
 800acec:	a904      	add	r1, sp, #16
 800acee:	4640      	mov	r0, r8
 800acf0:	f7fc fc34 	bl	800755c <_printf_i>
 800acf4:	e7ea      	b.n	800accc <_svfiprintf_r+0x1b0>
 800acf6:	bf00      	nop
 800acf8:	0800b264 	.word	0x0800b264
 800acfc:	0800b26a 	.word	0x0800b26a
 800ad00:	0800b26e 	.word	0x0800b26e
 800ad04:	08006ff1 	.word	0x08006ff1
 800ad08:	0800aa67 	.word	0x0800aa67

0800ad0c <__sread>:
 800ad0c:	b510      	push	{r4, lr}
 800ad0e:	460c      	mov	r4, r1
 800ad10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad14:	f000 f8f2 	bl	800aefc <_read_r>
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	bfab      	itete	ge
 800ad1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad1e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad20:	181b      	addge	r3, r3, r0
 800ad22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad26:	bfac      	ite	ge
 800ad28:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad2a:	81a3      	strhlt	r3, [r4, #12]
 800ad2c:	bd10      	pop	{r4, pc}

0800ad2e <__swrite>:
 800ad2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	461f      	mov	r7, r3
 800ad34:	898b      	ldrh	r3, [r1, #12]
 800ad36:	05db      	lsls	r3, r3, #23
 800ad38:	4605      	mov	r5, r0
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	4616      	mov	r6, r2
 800ad3e:	d505      	bpl.n	800ad4c <__swrite+0x1e>
 800ad40:	2302      	movs	r3, #2
 800ad42:	2200      	movs	r2, #0
 800ad44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad48:	f000 f886 	bl	800ae58 <_lseek_r>
 800ad4c:	89a3      	ldrh	r3, [r4, #12]
 800ad4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad56:	81a3      	strh	r3, [r4, #12]
 800ad58:	4632      	mov	r2, r6
 800ad5a:	463b      	mov	r3, r7
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad62:	f000 b835 	b.w	800add0 <_write_r>

0800ad66 <__sseek>:
 800ad66:	b510      	push	{r4, lr}
 800ad68:	460c      	mov	r4, r1
 800ad6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad6e:	f000 f873 	bl	800ae58 <_lseek_r>
 800ad72:	1c43      	adds	r3, r0, #1
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	bf15      	itete	ne
 800ad78:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad82:	81a3      	strheq	r3, [r4, #12]
 800ad84:	bf18      	it	ne
 800ad86:	81a3      	strhne	r3, [r4, #12]
 800ad88:	bd10      	pop	{r4, pc}

0800ad8a <__sclose>:
 800ad8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad8e:	f000 b831 	b.w	800adf4 <_close_r>

0800ad92 <strncmp>:
 800ad92:	b510      	push	{r4, lr}
 800ad94:	b16a      	cbz	r2, 800adb2 <strncmp+0x20>
 800ad96:	3901      	subs	r1, #1
 800ad98:	1884      	adds	r4, r0, r2
 800ad9a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ad9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d103      	bne.n	800adae <strncmp+0x1c>
 800ada6:	42a0      	cmp	r0, r4
 800ada8:	d001      	beq.n	800adae <strncmp+0x1c>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1f5      	bne.n	800ad9a <strncmp+0x8>
 800adae:	1a98      	subs	r0, r3, r2
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	4610      	mov	r0, r2
 800adb4:	e7fc      	b.n	800adb0 <strncmp+0x1e>

0800adb6 <__ascii_wctomb>:
 800adb6:	b149      	cbz	r1, 800adcc <__ascii_wctomb+0x16>
 800adb8:	2aff      	cmp	r2, #255	; 0xff
 800adba:	bf85      	ittet	hi
 800adbc:	238a      	movhi	r3, #138	; 0x8a
 800adbe:	6003      	strhi	r3, [r0, #0]
 800adc0:	700a      	strbls	r2, [r1, #0]
 800adc2:	f04f 30ff 	movhi.w	r0, #4294967295
 800adc6:	bf98      	it	ls
 800adc8:	2001      	movls	r0, #1
 800adca:	4770      	bx	lr
 800adcc:	4608      	mov	r0, r1
 800adce:	4770      	bx	lr

0800add0 <_write_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4c07      	ldr	r4, [pc, #28]	; (800adf0 <_write_r+0x20>)
 800add4:	4605      	mov	r5, r0
 800add6:	4608      	mov	r0, r1
 800add8:	4611      	mov	r1, r2
 800adda:	2200      	movs	r2, #0
 800addc:	6022      	str	r2, [r4, #0]
 800adde:	461a      	mov	r2, r3
 800ade0:	f7f7 fa43 	bl	800226a <_write>
 800ade4:	1c43      	adds	r3, r0, #1
 800ade6:	d102      	bne.n	800adee <_write_r+0x1e>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	b103      	cbz	r3, 800adee <_write_r+0x1e>
 800adec:	602b      	str	r3, [r5, #0]
 800adee:	bd38      	pop	{r3, r4, r5, pc}
 800adf0:	20000718 	.word	0x20000718

0800adf4 <_close_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4c06      	ldr	r4, [pc, #24]	; (800ae10 <_close_r+0x1c>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4605      	mov	r5, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	6023      	str	r3, [r4, #0]
 800ae00:	f7f7 fa4f 	bl	80022a2 <_close>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_close_r+0x1a>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_close_r+0x1a>
 800ae0c:	602b      	str	r3, [r5, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20000718 	.word	0x20000718

0800ae14 <_fstat_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4c07      	ldr	r4, [pc, #28]	; (800ae34 <_fstat_r+0x20>)
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	4608      	mov	r0, r1
 800ae1e:	4611      	mov	r1, r2
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	f7f7 fa4a 	bl	80022ba <_fstat>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	d102      	bne.n	800ae30 <_fstat_r+0x1c>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	b103      	cbz	r3, 800ae30 <_fstat_r+0x1c>
 800ae2e:	602b      	str	r3, [r5, #0]
 800ae30:	bd38      	pop	{r3, r4, r5, pc}
 800ae32:	bf00      	nop
 800ae34:	20000718 	.word	0x20000718

0800ae38 <_isatty_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4c06      	ldr	r4, [pc, #24]	; (800ae54 <_isatty_r+0x1c>)
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4605      	mov	r5, r0
 800ae40:	4608      	mov	r0, r1
 800ae42:	6023      	str	r3, [r4, #0]
 800ae44:	f7f7 fa49 	bl	80022da <_isatty>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d102      	bne.n	800ae52 <_isatty_r+0x1a>
 800ae4c:	6823      	ldr	r3, [r4, #0]
 800ae4e:	b103      	cbz	r3, 800ae52 <_isatty_r+0x1a>
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	20000718 	.word	0x20000718

0800ae58 <_lseek_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4c07      	ldr	r4, [pc, #28]	; (800ae78 <_lseek_r+0x20>)
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	4608      	mov	r0, r1
 800ae60:	4611      	mov	r1, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	6022      	str	r2, [r4, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7f7 fa42 	bl	80022f0 <_lseek>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_lseek_r+0x1e>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_lseek_r+0x1e>
 800ae74:	602b      	str	r3, [r5, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20000718 	.word	0x20000718

0800ae7c <memmove>:
 800ae7c:	4288      	cmp	r0, r1
 800ae7e:	b510      	push	{r4, lr}
 800ae80:	eb01 0302 	add.w	r3, r1, r2
 800ae84:	d807      	bhi.n	800ae96 <memmove+0x1a>
 800ae86:	1e42      	subs	r2, r0, #1
 800ae88:	4299      	cmp	r1, r3
 800ae8a:	d00a      	beq.n	800aea2 <memmove+0x26>
 800ae8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae90:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ae94:	e7f8      	b.n	800ae88 <memmove+0xc>
 800ae96:	4283      	cmp	r3, r0
 800ae98:	d9f5      	bls.n	800ae86 <memmove+0xa>
 800ae9a:	1881      	adds	r1, r0, r2
 800ae9c:	1ad2      	subs	r2, r2, r3
 800ae9e:	42d3      	cmn	r3, r2
 800aea0:	d100      	bne.n	800aea4 <memmove+0x28>
 800aea2:	bd10      	pop	{r4, pc}
 800aea4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aea8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aeac:	e7f7      	b.n	800ae9e <memmove+0x22>

0800aeae <_realloc_r>:
 800aeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	460e      	mov	r6, r1
 800aeb6:	b921      	cbnz	r1, 800aec2 <_realloc_r+0x14>
 800aeb8:	4611      	mov	r1, r2
 800aeba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aebe:	f7fb bfa9 	b.w	8006e14 <_malloc_r>
 800aec2:	b922      	cbnz	r2, 800aece <_realloc_r+0x20>
 800aec4:	f7fb ff58 	bl	8006d78 <_free_r>
 800aec8:	4625      	mov	r5, r4
 800aeca:	4628      	mov	r0, r5
 800aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aece:	f000 f827 	bl	800af20 <_malloc_usable_size_r>
 800aed2:	42a0      	cmp	r0, r4
 800aed4:	d20f      	bcs.n	800aef6 <_realloc_r+0x48>
 800aed6:	4621      	mov	r1, r4
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7fb ff9b 	bl	8006e14 <_malloc_r>
 800aede:	4605      	mov	r5, r0
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d0f2      	beq.n	800aeca <_realloc_r+0x1c>
 800aee4:	4631      	mov	r1, r6
 800aee6:	4622      	mov	r2, r4
 800aee8:	f7ff f9a4 	bl	800a234 <memcpy>
 800aeec:	4631      	mov	r1, r6
 800aeee:	4638      	mov	r0, r7
 800aef0:	f7fb ff42 	bl	8006d78 <_free_r>
 800aef4:	e7e9      	b.n	800aeca <_realloc_r+0x1c>
 800aef6:	4635      	mov	r5, r6
 800aef8:	e7e7      	b.n	800aeca <_realloc_r+0x1c>
	...

0800aefc <_read_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4c07      	ldr	r4, [pc, #28]	; (800af1c <_read_r+0x20>)
 800af00:	4605      	mov	r5, r0
 800af02:	4608      	mov	r0, r1
 800af04:	4611      	mov	r1, r2
 800af06:	2200      	movs	r2, #0
 800af08:	6022      	str	r2, [r4, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f7f7 f990 	bl	8002230 <_read>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_read_r+0x1e>
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	b103      	cbz	r3, 800af1a <_read_r+0x1e>
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	20000718 	.word	0x20000718

0800af20 <_malloc_usable_size_r>:
 800af20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af24:	1f18      	subs	r0, r3, #4
 800af26:	2b00      	cmp	r3, #0
 800af28:	bfbc      	itt	lt
 800af2a:	580b      	ldrlt	r3, [r1, r0]
 800af2c:	18c0      	addlt	r0, r0, r3
 800af2e:	4770      	bx	lr

0800af30 <_init>:
 800af30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af32:	bf00      	nop
 800af34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af36:	bc08      	pop	{r3}
 800af38:	469e      	mov	lr, r3
 800af3a:	4770      	bx	lr

0800af3c <_fini>:
 800af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af3e:	bf00      	nop
 800af40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af42:	bc08      	pop	{r3}
 800af44:	469e      	mov	lr, r3
 800af46:	4770      	bx	lr
